<!DOCTYPE html>
<html class="dashboard-bg">

    <head>
        {% block head %}
            <title>
                {% block title %}{% endblock %}
                - ALPHACONSOLE
            </title>
            {% include '_metadata.twig' %}
        {% endblock %}
    </head>

    <body class="">
        <div class="title-bar-wrapper">
            <!-- Title Bar : the bar is a seperate div to define a 100% draggable window -->
            <div id="title-bar"></div>

            <!-- Title Bar Buttons: The width of the wrapper for the buttons is relative to the buttons them self this way the buttons can not be used to drag the title bar and the title bar does not overlap the buttons -->
            <div class="" id="title-bar-btns">
                <!-- Minimize Button -->
                <a class="title-bar-btn-wrapper" id="min-btn">
                    <img class="min-btn" src="https://png.icons8.com/small/64/ffffff/minimize-window.png">
                </a>

                <!-- Maximise Button : Disabled -->
                <a style="display:none;" id="max-btn"></a>

                <!-- Close Button -->
                <a class="title-bar-btn-wrapper" id="close-btn">
                    <span class="close-btn lnr lnr-cross pl-2 pr-2"></span>
                </a>
            </div>
            <!-- Title Bar End ./// -->
        </div>

        {#
  <!-- Header -->
  <div class=" mt-5 pull-left container-fluid w-100">
    <div style="background:url('assets/img/logo_normal.png') no-repeat; background-position: 30px 19px;" class="row m-0 w-100">
      <div class="col">
        <p class="font-quarcaL p-2 w-100 heading-title">
          {% block title %} {{ page_title|title }} {% endblock %}
        </p>
      </div>
    </div>
  </div>
  <!-- Header End ./// -->#}

        <div class="pull-left container-fluid w-100 h-100">
            <div class="row">
                <div class="col-md-12 col-sm-4">
                    {% include '../partials/navigation.twig' %}
                </div>
                <div class="col-md-12 col-sm-8">
                    {% block content %}{% endblock %}
                </div>
            </div>
        </div>
        {% include '../partials/modals.twig' %}
        {% block footer %}
            <!-- Footer -->
            {#
  <div class="footer-bar-wrapper affix">
    <!-- Footer Bar -->
    <div class="footer-bar">
      <div class="container-fluid">
        <div class="row">
          <div class="col-8">
            <small class="status-text">Status -
              <span id="status-message" class="">
            </small>
            </small>
          </div>
          <div class="col-4">
            <small class="build-number text-right">Beta Version</small>
          </div>
        </div>
      </div>
    </div>
  </div> #}
            <!-- Footer End ./// -->
            <!-- JQUERY -->
            <script src="./assets/js/jquery-3.3.1.min.js"></script>
            <script src="https://code.jquery.com/jquery-3.3.1.min.js"></script>
            <script src="https://code.jquery.com/jquery-3.2.1.min.js"></script>

            {# VENDOR PACKAGES #}
            <script src="https://cdnjs.cloudflare.com/ajax/libs/spectrum/1.8.0/spectrum.min.js"></script>
            <link rel="stylesheet" type="text/css" href="https://cdnjs.cloudflare.com/ajax/libs/spectrum/1.8.0/spectrum.min.css">
            <script src="assets/js/grapick.min.js"></script>
            <script src="./assets/js/tether.min.js"></script>
            <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.12.9/umd/popper.min.js" integrity="sha384-ApNbgh9B+Y1QKtv3Rn7W3mgPxhU9K/ScQsAP7hUibX39j7fakFPskvXusvfa0b4Q" crossorigin="anonymous"></script>
            <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/js/bootstrap.min.js" integrity="sha384-JZR6Spejh4U02d8jOt6vLEHfe/JQGiRRSQQxSfFWpi1MquVdAyjUar5+76PVCmYl" crossorigin="anonymous"></script>

            {# THE FOLLOWING MUST REMAIN INSIDE THE LAYOUT FILE - DO NO MOVE TO THE CONTROLLERS #}
            <script type="text/javascript">
                /* const gp = new Grapick({
      el: '#body-gp',
      colorEl: '<input id="colorpicker"/>' //Essential for color picker to work
    });

    gp.setColorPicker(handler => {
      const el = handler.getEl().querySelector('#colorpicker');

      $(el).spectrum({
        color: handler.getColor(),
        showAlpha: false,
        change(color) {
          handler.setColor(color.toRgbString());

        },
        move(color) {
          handler.setColor(color.toRgbString(), 0);
        }

      });

    });

    gp.on('change', complete => {
      var gradientvalue = gp.getSafeValue();

      console.log(gradientvalue);

    })

    gp.on('change', complete => {
      document.body.style.background = gp.getSafeValue();
    })*/
            </script>

            <script>
                const {ipcRenderer} = require('electron')
                let shell = require('electron').shell

                document.addEventListener('click', function (event) {
                    if (event.target.tagName === 'A' && event.target.href.startsWith('http')) {
                        event.preventDefault()
                        shell.openExternal(event.target.href)
                    }
                })
            </script>
            <script>
                //DONT TOUCH
                //this must stay in this file.

                (function () {
                    // Retrieve remote BrowserWindow
                    const {BrowserWindow} = require('electron').remote

                    function init() {
                        // Minimize task
                        document.getElementById("min-btn").addEventListener("click", (e) => {
                            var window = BrowserWindow.getFocusedWindow();
                            window.minimize();
                        });

                        // Maximize window
                        document.getElementById("max-btn").addEventListener("click", (e) => {
                            var window = BrowserWindow.getFocusedWindow();
                            if (window.isMaximized()) {
                                window.unmaximize();
                            } else {
                                window.maximize();
                            }
                        });

                        // Close app
                        document.getElementById("close-btn").addEventListener("click", (e) => {
                            var window = BrowserWindow.getFocusedWindow();
                            window.close();
                        });

                        //UNUSED?????
                        //document.getElementById("detectInstall").addEventListener("click", (e) => {});
                    };

                    document.onreadystatechange = () => {
                        if (document.readyState == "complete") {
                            init();
                        }
                    };

                })();
            </script>

            <script src="../controllers/backend.js"></script>
            <script src="../controllers/UI.js"></script>

            <script>
                $(document).ready(function () {
                    RequestPackages();

                    $("#close").click(function (d) {
                        d.collapse('hide');
                    });

                    $("#progress-bar").hide();
                    $("#download-package").click(function (d) {
                        $("#progress-bar").show();
                    });
                });

                function GetBasePath() {
                    return require("path").dirname(__dirname).replace('app.asar', 'app.asar.unpacked');
                }

                var SelectedPackage;
                var Details = [];

                var AllPackages;
                var PageNumber = 1;
                var PackagesPerPage = 8;
                var NumberOfPages = 1;

                var path = require('path');
                var fs = require('fs');

                packagesBeingDownloaded = {};

                function fisnihedDownload(packagedID, filename) {
                    packagesBeingDownloaded[packagedID]['files'][filename]['done'] = true
                    for (var file in packagesBeingDownloaded[packagedID]['files']) {
                        if (!packagesBeingDownloaded[packagedID]['files'][file]['done']) {
                            return;
                        }
                    }
                    var dir = GetBasePath() + "/../../textures/" + packagesBeingDownloaded[packagedID]['dir'] + '/'
                    for (var file in packagesBeingDownloaded[packagedID]['files']) {
                        ensureDirectoryExistence(dir + file);
                        fs.rename(dir + 'tmp_' + file, dir + file, function (err) {
                            if (err) {
                                return console.log(err);
                            }
                            ipcRenderer.send('refreshwindow');
                        });
                    }

                }

                function ensureDirectoryExistence(filePath) {
                    var dirname = path.dirname(filePath);
                    if (fs.existsSync(dirname)) {
                        return true;
                    }
                    ensureDirectoryExistence(dirname);
                    fs.mkdirSync(dirname);
                }

                function DownloadSingleImage(basedir, url, imageName, index, Progress) {

                    var request = require("request");

                    console.log("Downloading " + basedir + 'tmp_' + imageName)
                    ensureDirectoryExistence(basedir + 'tmp_' + imageName);

                    packagesBeingDownloaded[index]['files'][imageName] = {}
                    packagesBeingDownloaded[index]['files'][imageName]['done'] = false
                    request(url).on('response', function (response) {
                        var len = parseInt(response.headers['content-length'], 10);
                        Progress.total += len;
                    }).on('data', function (data) {
                        Progress.cur += data.length;
                        // compressed data as it is received
                        $(".progress-bar").width((100.0 * Progress.cur / Progress.total).toFixed(2) + '%');
                        $(".progress-bar").html((100.0 * Progress.cur / Progress.total).toFixed(0) + '%');
                    }).pipe(fs.createWriteStream(basedir + 'tmp_' + imageName).on('finish', function () {
                        fisnihedDownload(index, imageName);
                    }));
                }

                const baseurl = 'https://raw.githubusercontent.com/AlphaConsole/AlphaConsoleTextures/dev/textures/';
                //TODO: Make sure package is downloaded before allowing closing the window.
                //TODO: Don't allow package redownloading.. Maybe add remove package button and only allow download if package doesn't exist
                function DownloadPackage() {
                    if (SelectedPackage === undefined) {
                        return;
                    }

                    $("#progress-bar").css("display", "block");

                    const notifier = require('node-notifier');

                    var request = require("request");

                    var index = SelectedPackage.attr("details-index");
                    packagesBeingDownloaded[index] = {}
                    packagesBeingDownloaded[index]['dir'] = Details[index].folder
                    packagesBeingDownloaded[index]['files'] = {}

                    const con = require('electron').remote.getGlobal('console');

                    request(baseurl + Details[index].folder + '/package.json?' + Math.random(), {
                        json: true
                    }, (err, res, body) => {
                        if (err) {
                            return console.log(err);
                        }

                        //All so i can pass by reference, i hate js
                        var Progress = {};
                        Progress.total = 0;
                        Progress.cur = 0;

                        var basedir = GetBasePath() + "/../../textures/" + Details[index].folder + '/'
                        for (let item of body.items) {

                            if (item.parameters != undefined) 
                                for (let image of item.parameters) {
                                    if (image.animated != undefined && image.animated == true) {
                                        for (var imageIndex = 0; imageIndex < image.frames; imageIndex++) {
                                            var imageName = image.image + imageIndex + ".png";
                                            var url = baseurl + Details[index].folder + '/' + imageName;
                                            DownloadSingleImage(basedir, url, imageName, index, Progress);
                                        }
                                    } else {
                                        var url = baseurl + Details[index].folder + '/' + image.image;
                                        DownloadSingleImage(basedir, url, image.image, index, Progress);
                                    }
                                }
                            
                            if (item.textures != undefined) 
                                for (let image of item.textures) {
                                    if (image.animated != undefined && image.animated == true) {
                                        for (var imageIndex = 0; imageIndex < image.frames; imageIndex++) {
                                            var imageName = image.image + imageIndex + ".png";
                                            var url = baseurl + Details[index].folder + '/' + imageName;
                                            DownloadSingleImage(basedir, url, imageName, index, Progress);
                                        }
                                    } else {
                                        var url = baseurl + Details[index].folder + '/' + image.image;
                                        DownloadSingleImage(basedir, url, image.image, index, Progress);
                                    }
                                }
                            }

                        var url = baseurl + Details[index].folder + '/package.json?' + Math.random();
                        packagesBeingDownloaded[index]['files']['package.json'] = {}
                        packagesBeingDownloaded[index]['files']['package.json']['done'] = false
                        ensureDirectoryExistence(basedir + 'tmp_package.json');
                        request(url).on('response', function (response) {
                            var len = parseInt(response.headers['content-length'], 10);
                            Progress.total += len;

                        }).on('data', function (data) {
                            Progress.cur += data.length;
                            // compressed data as it is received
                            $(".progress-bar").width((100.0 * Progress.cur / Progress.total).toFixed(2) + '%');
                            $(".progress-bar").html((100.0 * Progress.cur / Progress.total).toFixed(0) + '%');
                        }).pipe(fs.createWriteStream(basedir + 'tmp_package.json').on('finish', function () {
                            fisnihedDownload(index, 'package.json');
                        }))

                    });

                }

                function PopulateTexturePackList(packageList) { // packageList is a slice of body.packages from RequestPackages

                    var row = $('<div>');
                    row.addClass("row mt-4");

                    $("#texture-pack-list").empty();

                    $("#texture-pack-list").append(row);

                    var i = 0;

                    for (let item of packageList) {

                        Details[i] = item;

                        var column = $('<div>');
                        column.addClass("col-md-3 col-xs-4 pull-left mb-2 texture-wrapper");

                        var newPack = $('<div>');
                        newPack.addClass("square");
                        newPack.css("background", "url(" + baseurl + item.folder + "/preview." + (
                        item.previewExtension == null ? "png" : item.previewExtension) + ") no-repeat center center");
                        newPack.css("background-size", "100% 100%");
                        newPack.attr("details-row", Math.floor(i / 3));
                        newPack.attr("details-index", i);

                        var j = i;

                        var para = $("<p>");
                        para.addClass("bg-black author font-bourgM");
                        para.text("by " + item.author);

                        var para2 = $("<p>");
                        para2.addClass("bg-black pack-title font-bourgM");
                        para2.text(item.name);

                        var likeDiv = $("<div>");

                        var likeLink = $("<a>");
                        likeLink.addClass("like-status");

                        var likeImage = $('<i style="font-size:20px; color:#f5b; cursor:pointer;">');

                        var likeNumber = $('<p class="like-count like-status">')
                        likeNumber.text(item.Likes);

                        likeImage.addClass("fa");
                        likeImage.addClass(item.Liked ? "fa-heart" : "fa-heart-o");

                        likeImage.click(function (event) {
                            event.stopPropagation();

                            LikedPackage = Details[$(this).closest('.square').attr("details-index")];

                            if (LikedPackage.Liked) {
                                $(this).removeClass("fa-heart");
                                $(this).addClass("fa-heart-o");
                                LikedPackage.Likes--;
                            } else {
                                $(this).removeClass("fa-heart-o");
                                $(this).addClass("fa-heart");
                                LikedPackage.Likes++;
                            }

                            LikedPackage.Liked = !LikedPackage.Liked;

                            $(this).parent().next().text(LikedPackage.Likes);

                            var request = require("request");
                            request('http://alphaconsole.net/textures/registerLike.php?PackID=' + LikedPackage.id + "&Status=" + LikedPackage.Liked, function (error, response, body) {});

                        });

                        likeLink.append(likeImage);
                        likeDiv.append(likeLink);
                        likeDiv.append(likeNumber);

                        newPack.append(para);
                        newPack.append(para2);
                        newPack.append(likeDiv);

                        ////HIGHTLIGHT
                        newPack.mouseenter(function () {
                            $(this).css("box-shadow", "0 0 3pt 2pt #8D661B");
                        });
                        newPack.mouseleave(function () {
                            if (SelectedPackage === undefined || $(this)[0] != SelectedPackage[0]) {
                                $(this).css("box-shadow", "0 0 0 0 #8D661B");
                            } else {
                                $(this).css("box-shadow", "0 0 3pt 2pt #2E8C58");
                            }
                        });
                        //////////////

                        ////DETAILS PANEL
                        newPack.click(function () {

                            console.log($(this).prop("tagName"));

                            if (SelectedPackage != undefined) {
                                SelectedPackage.css("box-shadow", "0 0 0 0 #2E8C58");

                                var d = $("#details" + SelectedPackage.attr("details-row"));
                                var index = SelectedPackage.attr("details-index");

                                if (SelectedPackage.attr("details-row") != $(this).attr("details-row")) {
                                    d.collapse('hide');
                                } else {}
                            }
                            if (SelectedPackage === undefined || $(this)[0] != SelectedPackage[0]) {
                                SelectedPackage = $(this);
                                SelectedPackage.css("box-shadow", "0 0 3pt 2pt #2E8C58");

                                var d = $("#details" + SelectedPackage.attr("details-row"));
                                var index = SelectedPackage.attr("details-index");

                                d.find("#title").html(Details[index].name + " <small style='color:#999;'>by" + Details[index].author + "</small>");

                                var imgHtml = baseurl + item.folder + "/preview." + (
                                item.previewExtension == null ? "png" : item.previewExtension);
                                d.find("#image").html("<img style='width:300px; height:300px; border-radius:8px;' src=" + imgHtml + " >");

                                d.find("#closebutton").html("<button class='font-quarcaL btn btn-danger' id='close'>CLOSE</button>");

                                var descHtml = Details[index].description || "No description found.<br><br>";
                                d.find("#description").html(descHtml + "<div style='padding:10px'></div>");

                                d.collapse('show');

                                $("#close").click(function () {
                                    d.collapse('hide');

                                });

                                $("#download-package").click(function () {
                                    console.log("clicked download");
                                    $("#progress-bar").css("display", "block");
                                });

                            } else {
                                $(this).css("box-shadow", "0 0 3pt 2pt #8D661B");
                                $("#details" + $(this).attr("details-row")).collapse('hide');
                                SelectedPackage = undefined;
                            }
                            $(".progress-bar").width(0);
                            $(".progress-bar").html("");
                        });
                        /////////////////
                        column.append(newPack);

                        $("#texture-pack-list").append(column);

                        if (i % 3 == 2 || i + 1 == packageList.length) {
                            var separator = $('<div>');
                            separator.addClass("bg-black separator collapse");
                            separator.attr("id", "details" + Math.floor(i / 3));

                            var close = $('<div>');
                            close.addClass("close");
                            close.attr("id", "closebutton");

                            var image = $("<div>");
                            image.addClass("font-bourgM image m-3");
                            image.attr("id", "image");

                            var title = $("<p>");
                            title.addClass("details-title fs-32 text-uppercase ls-s font-bourgM mt-3");
                            title.attr("id", "title");

                            var desc = $("<div>");
                            desc.addClass("font-exo-lightL fs-16 text-uppercase description mt-2");
                            desc.attr("id", "description");

                            var download = $("<button id='download-package' style=\"margin-bottom:30px\" onclick='DownloadPackage()'>DOWNLOAD</button>");
                            download.addClass("font-quarcaL btn btn-success download");
                            var progress = $("<div style='position: absolute;bottom: 1px;float: left;width: 100%; display:none;' id='progress-bar' class=\"progress\"> <div class=\"progress-bar\" style=\"width:0%;background-color: #5cb85c;\">0%</div></div>");

                            var divlevel = $("<div>");
                            divlevel.addClass("texture-details animated fadeInLeft");

                            divlevel.append(image);
                            divlevel.append(close);
                            divlevel.append(title);
                            divlevel.append(desc);
                            divlevel.append(download);
                            divlevel.append(progress);
                            separator.append(divlevel);

                            //var row = $('<div>');
                            //row.addClass("row mt-4");

                            //      $("#texture-pack-list").append(row);

                            $("#v-pills-textures").prepend(separator);

                        }

                        i++;
                    }

                }

                function RequestPackages() {
                    var request = require("request");
                    request(baseurl + 'packages.json?' + Math.random(), {
                        json: true
                    }, (err, res, body) => {
                        if (err) {
                            return console.log(err);
                        }

                        AllPackages = body.packages;
                        NumberOfPages = Math.ceil(AllPackages.length / PackagesPerPage);
                        PageNumber = 1;

                        request("http://alphaconsole.net/textures/getLikes.php", {
                            json: true
                        }, (err2, res2, body2) => {
                            if (err2) {
                                RefreshPackageList();
                                return console.log(err2);
                            }

                            if (body2.All == undefined || body2.Own == undefined) {
                                RefreshPackageList();
                                alert("Unable to contact the ratings server!");
                            }

                            for (var i = 0; i < AllPackages.length; i++) {

                                if (body2.All[AllPackages[i].id] != undefined) {
                                    AllPackages[i].Likes = body2.All[AllPackages[i].id];
                                } else {
                                    AllPackages[i].Likes = 0;
                                }

                                if (body2.Own[AllPackages[i].id] != undefined) {
                                    AllPackages[i].Liked = true;
                                } else {
                                    AllPackages[i].Liked = false;
                                }

                            }

                            AllPackages.sort((a, b) => {
                                return b.Likes - a.Likes;
                            });

                            console.log(AllPackages);

                            RefreshPackageList();

                        });

                    });

                }

                function RefreshPackageList() {
                    PopulateTexturePackList(AllPackages.slice((PageNumber - 1) * PackagesPerPage, PageNumber * PackagesPerPage));
                    $("#page-number-top").text("Page: " + PageNumber + "/" + NumberOfPages);
                    $("#page-number-bottom").text("Page: " + PageNumber + "/" + NumberOfPages);
                }

                function NextPage() {
                    if (PageNumber < NumberOfPages) {
                        PageNumber++;
                        RefreshPackageList();
                    }
                }

                function PrevPage() {
                    if (PageNumber > 1) {
                        PageNumber--;
                        RefreshPackageList();
                    }
                }

                var acc = document.getElementsByClassName("accordion");
                var i;

                for (i = 0; i < acc.length; i++) {
                    acc[i].addEventListener("click", function () {
                        this.classList.toggle("active");
                        var panel = this.nextElementSibling;
                        if (panel.style.maxHeight) {
                            panel.style.maxHeight = null;
                        } else {
                            panel.style.maxHeight = panel.scrollHeight + "px";
                        }
                    });
                }

                function searchtextures() {

                    var txt = $('#search-criteria').val();
                    $('.texture-wrapper').each(function () {
                        if ($(this).text().toUpperCase().indexOf(txt.toUpperCase()) != -1) {
                            $(this).show();
                        } else {
                            $(this).hide();
                        }
                    });

                }

                $(document).ready(function () {

                    const myResizeBtn = document.getElementById('resizeBtn')
                    myResizeBtn.addEventListener('click', function () {
                        ipcRenderer.send('resize-me-please')
                    })

                    $("#progress-bar").hide();

                });
            </script>

            <script>

                function LoadFile(path) {
                    var fs = require("fs");
                    return fs.readFileSync(path, "utf8"); //y tho, without utf8 it is just an array of bytes
                }

                function GetBasePath() {

                    return require("path").dirname(__dirname).replace('app.asar', 'app.asar.unpacked');

                }

                function PlaylistIdToName(id) {
                    switch (id) {
                        case 10:
                            return "1v1";
                        case 11:
                            return "2v2";
                        case 12:
                            return "Solo 3v3";
                        case 13:
                            return "3v3";
                        default:
                            return "Undefined"
                    }
                }
            </script>

            <script type="text/javascript">

                var Matches = [];

                function LoadMatches() {

                    var matchesString = LoadFile(GetBasePath() + "/../../mmrTracker.txt");
                    matchesString.split("\n").slice(0, -1).map(x => Matches.push(JSON.parse(x)));
                    console.log(Matches);

                }

                function GenerateChart() {

                    var Lines = {
                        "1v1": ["1v1"],
                        "2v2": ["2v2"],
                        "Solo 3v3": ["Solo 3v3"],
                        "3v3": ["3v3"],
                        "1v1x": ["1v1x"],
                        "2v2x": ["2v2x"],
                        "Solo 3v3x": ["Solo 3v3x"],
                        "3v3x": ["3v3x"]
                    };
                    var LinesArray = [];

                    for (var i = 0; i < Matches.length; i++) {
                        var playlist = PlaylistIdToName(Matches[i].playlist)
                        if (!Lines[playlist]) {
                            Lines[playlist] = [];
                            Lines[playlist].push(playlist);
                        }
                        Lines[playlist].push(Matches[i].skill);
                        Lines[playlist + "x"].push(i);

                    }

                    for (var p in Lines) {
                        LinesArray.push(Lines[p]);
                    }

                    console.log(LinesArray);

                    var chart = c3.generate({
                        bindto: "#chart",
                        data: {
                            xs: {
                                '1v1': '1v1x',
                                '2v2': '2v2x',
                                'Solo 3v3': 'Solo 3v3x',
                                '3v3': '3v3x'
                            },
                            columns: LinesArray,
                            types: {
                                "1v1": 'line',
                                "2v2": 'line',
                                "3v3": 'line',
                                "Solo 3v3": 'line'
                            }
                        }
                    });

                }

                LoadMatches();
                GenerateChart();

                //DASHBOARD BG
                $('#pills-dashboard-tab').on('click', function () {
                    $("html").removeClass("no-bg");
                    $("html").removeClass("profile-bg");
                    $('html').addClass('dashboard-bg');
                });

                //NO BG
                $('#pills-items-tab').on('click', function () {
                    $("html").removeClass("dashboard-bg");
                    $("html").removeClass("profile-bg");
                    $('html').addClass('no-bg');
                });

                //NO BG
                $('#pills-textures-tab').on('click', function () {
                    $("html").removeClass("dashboard-bg");
                    $("html").removeClass("profile-bg");
                    $('html').addClass('no-bg');
                });
            </script>

        {% endblock %}

    </body>

</html>