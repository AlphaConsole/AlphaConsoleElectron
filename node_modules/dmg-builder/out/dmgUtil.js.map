{"version":3,"file":"dmgUtil.js","sourceRoot":"","sources":["../src/dmgUtil.ts"],"names":[],"mappings":"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","sourcesContent":["import BluebirdPromise from \"bluebird-lst\"\nimport { exec } from \"builder-util\"\nimport { PackageBuilder } from \"builder-util/out/api\"\nimport { AsyncTaskManager } from \"builder-util/out/asyncTaskManager\"\nimport { exists } from \"builder-util/out/fs\"\nimport { executeFinally } from \"builder-util/out/promise\"\nimport { outputFile, readFile } from \"fs-extra-p\"\nimport * as path from \"path\"\nimport { TmpDir } from \"temp-file\"\n\nexport { DmgTarget } from \"./dmg\"\n\nconst root = path.join(__dirname, \"..\")\n\nexport function getDmgTemplatePath() {\n  return path.join(root, \"templates\")\n}\n\nexport function getDmgVendorPath() {\n  return path.join(root, \"vendor\")\n}\n\nexport async function attachAndExecute(dmgPath: string, readWrite: boolean, task: () => Promise<any>) {\n  //noinspection SpellCheckingInspection\n  const args = [\"attach\", \"-noverify\", \"-noautoopen\"]\n  if (readWrite) {\n    args.push(\"-readwrite\")\n  }\n\n  args.push(dmgPath)\n  const attachResult = await exec(\"hdiutil\", args)\n  const deviceResult = attachResult == null ? null : /^(\\/dev\\/\\w+)/.exec(attachResult)\n  const device = deviceResult == null || deviceResult.length !== 2 ? null : deviceResult[1]\n  if (device == null) {\n    throw new Error(`Cannot mount: ${attachResult}`)\n  }\n\n  return await executeFinally(task(), () => detach(device))\n}\n\nexport async function detach(name: string) {\n  try {\n    await exec(\"hdiutil\", [\"detach\", \"-quiet\", name])\n  }\n  catch (e) {\n    await new BluebirdPromise((resolve, reject) => {\n      setTimeout(() => {\n        exec(\"hdiutil\", [\"detach\", \"-force\", name])\n          .then(resolve)\n          .catch(reject)\n      }, 1000)\n    })\n  }\n}\n\nexport function computeBackgroundColor(rawValue: string) {\n  return require(\"parse-color\")(rawValue).hex\n}\n\nexport async function computeBackground(packager: PackageBuilder): Promise<string> {\n  const resourceList = await packager.resourceList\n  if (resourceList.includes(\"background.tiff\")) {\n    return path.join(packager.buildResourcesDir, \"background.tiff\")\n  }\n  else if (resourceList.includes(\"background.png\")) {\n    return path.join(packager.buildResourcesDir, \"background.png\")\n  }\n  else {\n    return path.join(getDmgTemplatePath(), \"background.tiff\")\n  }\n}\n\nexport async function applyProperties(entries: any, env: any, asyncTaskManager: AsyncTaskManager, packager: PackageBuilder) {\n  const dmgPropertiesFile = await packager.getTempFile(\"dmgProperties.pl\")\n\n  asyncTaskManager.addTask(outputFile(dmgPropertiesFile, (await readFile(path.join(getDmgTemplatePath(), \"dmgProperties.pl\"), \"utf-8\")).replace(\"$ENTRIES\", entries)))\n\n  await asyncTaskManager.awaitTasks()\n\n  await exec(\"/usr/bin/perl\", [dmgPropertiesFile], {\n    cwd: getDmgVendorPath(),\n    env\n  })\n}\n\nexport async function transformBackgroundFileIfNeed(file: string, tmpDir: TmpDir): Promise<string> {\n  if (file.endsWith(\".tiff\") || file.endsWith(\".TIFF\")) {\n    return file\n  }\n\n  const retinaFile = file.replace(/\\.([a-z]+)$/, \"@2x.$1\")\n  if (await exists(retinaFile)) {\n    const tiffFile = await tmpDir.getTempFile({suffix: \".tiff\"})\n    await exec(\"tiffutil\", [\"-cathidpicheck\", file, retinaFile, \"-out\", tiffFile])\n    return tiffFile\n  }\n\n  return file\n}\n\n/** @internal */\nexport function serializeString(data: string) {\n  return '  $\"' + data.match(/.{1,32}/g)!!.map(it => it.match(/.{1,4}/g)!!.join(\" \")).join('\"\\n  $\"') + '\"'\n}"]}
