{"version":3,"file":"licenseButtons.js","sourceRoot":"","sources":["../src/licenseButtons.ts"],"names":[],"mappings":"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","sourcesContent":["import { log } from \"builder-util\"\nimport { PackageBuilder } from \"builder-util/out/api\"\nimport { getLicenseAssets } from \"builder-util/out/license\"\nimport { readFile } from \"fs-extra-p\"\nimport * as iconv from \"iconv-lite\"\nimport { safeLoad } from \"js-yaml\"\nimport { serializeString } from \"./dmgUtil\"\nimport { getDefaultButtons } from \"./licenseDefaultButtons\"\n\nexport async function getLicenseButtonsFile(packager: PackageBuilder): Promise<Array<LicenseButtonsFile>> {\n  return getLicenseAssets((await packager.resourceList)\n    .filter(it => {\n      const name = it.toLowerCase()\n      // noinspection SpellCheckingInspection\n      return name.startsWith(\"licensebuttons_\") && (name.endsWith(\".json\") || name.endsWith(\".yml\"))\n    }), packager)\n}\n\nexport interface LicenseButtonsFile {\n  file: string\n  lang: string\n  langWithRegion: string\n  langName: string\n}\n\nexport async function getLicenseButtons(licenseButtonFiles: Array<LicenseButtonsFile>, langWithRegion: string, id: number, name: string) {\n  let data = getDefaultButtons(langWithRegion, id, name)\n\n  for (const item of licenseButtonFiles) {\n    if (item.langWithRegion !== langWithRegion) {\n      continue\n    }\n\n    try {\n      const fileData = safeLoad(await\n        readFile(item.file, \"utf-8\")\n      )\n      const buttonsStr = labelToHex(fileData.lang, item.lang, item.langWithRegion) +\n        labelToHex(fileData.agree, item.lang, item.langWithRegion) +\n        labelToHex(fileData.disagree, item.lang, item.langWithRegion) +\n        labelToHex(fileData.print, item.lang, item.langWithRegion) +\n        labelToHex(fileData.save, item.lang, item.langWithRegion) +\n        labelToHex(fileData.description, item.lang, item.langWithRegion)\n\n      data = `data 'STR#' (${id}, \"${name}\") {\\n`\n      data += serializeString(\"0006\" + buttonsStr)\n      data += `\\n};`\n\n      if (log.isDebugEnabled) {\n        log.debug({lang: item.langName, data}, `overwriting license buttons`)\n      }\n      return data\n    }\n    catch (e) {\n      log.debug({error: e}, \"cannot overwrite license buttons\")\n      return data\n    }\n  }\n\n  return data\n}\n\nfunction labelToHex(label: string, lang: string, langWithRegion: string) {\n  const lbl = hexEncode(label, lang, langWithRegion).toString().toUpperCase()\n  const len = numberToHex((lbl.length / 2))\n  return len + lbl\n}\n\nfunction numberToHex(nb: number) {\n  return (\"0\" + (nb.toString(16))).slice(-2)\n}\n\nfunction hexEncode(str: string, lang: string, langWithRegion: string) {\n  const macCodePages = getMacCodePage(lang, langWithRegion)\n  let result = \"\"\n\n  for (let i = 0; i < str.length; i++) {\n    try {\n      let hex = getMacHexCode(str, i, macCodePages)\n      if (hex === undefined) {\n        hex = \"3F\" //?\n      }\n      result += hex\n    }\n    catch (e) {\n      log.debug({error: e, char: str[i]}, \"cannot convert\")\n      result += \"3F\" //?\n    }\n  }\n\n  return result\n}\n\nfunction getMacCodePage(lang: string, langWithRegion: string) {\n  switch (lang) {\n    case \"ja\": //japanese\n      return [\"euc-jp\"] //Apple Japanese\n    case \"zh\": //chinese\n      if (langWithRegion === \"zh_CN\") {\n        return [\"gb2312\"] //Apple Simplified Chinese (GB 2312)\n      }\n      return [\"big5\"] //Apple Traditional Chinese (Big5)\n    case \"ko\": //korean\n      return [\"euc-kr\"] //Apple Korean\n    case \"ar\": //arabic\n    case \"ur\": //urdu\n      return [\"macarabic\"] //Apple Arabic\n    case \"he\": //hebrew\n      return [\"machebrew\"] //Apple Hebrew\n    case \"el\": //greek\n    case \"elc\": //greek\n      return [\"macgreek\"] //Apple Greek\n    case \"ru\": //russian\n    case \"be\": //belarussian\n    case \"sr\": //serbian\n    case \"bg\": //bulgarian\n    case \"uz\": //uzbek\n      return [\"maccyrillic\"] //Apple Macintosh Cyrillic\n    case \"ro\": //romanian\n      return [\"macromania\"] //Apple Romanian\n    case \"uk\": //ukrainian\n      return [\"macukraine\"] //Apple Ukrainian\n    case \"th\": //thai\n      return [\"macthai\"] //Apple Thai\n    case \"et\": //estonian\n    case \"lt\": //lithuanian\n    case \"lv\": //latvian\n    case \"pl\": //polish\n    case \"hu\": //hungarian\n    case \"cs\": //czech\n    case \"sk\": //slovak\n      return [\"maccenteuro\"] //Apple Macintosh Central Europe\n    case \"is\": //icelandic\n    case \"fo\": //faroese\n      return [\"maciceland\"] //Apple Icelandic\n    case \"tr\": //turkish\n      return [\"macturkish\"] //Apple Turkish\n    case \"hr\": //croatian\n    case \"sl\": //slovenian\n      return [\"maccroatian\"] //Apple Croatian\n    default:\n      return [\"macroman\"] //Apple Macintosh Roman\n  }\n}\n\nfunction getMacHexCode(str: string, i: number, macCodePages: any) {\n  const code = str.charCodeAt(i)\n  if (code < 128) {\n    return code.toString(16)\n  }\n  else if (code < 256) {\n    return iconv.encode(str[i], \"macroman\").toString(\"hex\")\n  }\n  else {\n    for (let i = 0; i < macCodePages.length; i++) {\n      const result = iconv.encode(str[i], macCodePages[i]).toString(\"hex\")\n      if (result !== undefined) {\n        return result\n      }\n    }\n  }\n  return code\n}"]}
