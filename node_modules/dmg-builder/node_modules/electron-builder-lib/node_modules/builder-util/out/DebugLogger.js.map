{"version":3,"file":"DebugLogger.js","sourceRoot":"","sources":["../src/DebugLogger.ts"],"names":[],"mappings":";;;;;;;;;AAAA,AAAO,AAAe,AAAM,AAAc;;;;;;AAC1C,AAAO,AAAE,AAAU,AAAE,AAAM,AAAY;;;;;;AACvC,AAAO,AAAE,AAAe,AAAE,AAAM,AAAQ,AAExC,AAAM;;;;;;;AAGJ,gBAAqB,UAAU,AAAI;AAAd,aAAO,UAAP,AAAO,AAAO;AAF1B,aAAI,OAAQ,AAAE,AAGvB;AAAC;AAED,AAAG,QAAC,AAAW,KAAE,AAAU;AACzB,AAAE,AAAC,YAAC,CAAC,AAAI,KAAC,AAAO,AAAC,SAAC,AAAC;AAClB,AAAM,AACR;AAAC;AAED,cAAM,AAAQ,WAAG,AAAG,IAAC,AAAK,MAAC,AAAG,AAAC;AAC/B,YAAI,AAAC,IAAG,AAAI,KAAC,AAAI;AACjB,YAAI,AAAQ,WAAkB,AAAI;AAClC,AAAG,AAAC,aAAC,MAAM,AAAC,KAAI,AAAQ,AAAC,UAAC,AAAC;AACzB,AAAE,AAAC,gBAAC,AAAC,MAAK,AAAQ,SAAC,AAAQ,SAAC,AAAM,SAAG,AAAC,AAAC,AAAC,IAAC,AAAC;AACxC,AAAQ,2BAAG,AAAC;AACZ,AAAK,AACP;AAAC,AACD,AAAI,mBAAC,AAAC;AACJ,AAAE,AAAC,oBAAC,AAAC,EAAC,AAAC,AAAC,MAAI,AAAI,AAAC,MAAC,AAAC;AACjB,AAAC,sBAAC,AAAC,AAAC,KAAG,AAAM,OAAC,AAAM,OAAC,AAAI,AAAC,AAC5B;AAAC,AACD,AAAI,uBAAC,AAAE,AAAC,IAAC,OAAO,AAAC,EAAC,AAAC,AAAC,OAAK,AAAQ,AAAC,UAAC,AAAC;AAClC,AAAC,sBAAC,AAAC,AAAC,KAAG,CAAC,AAAC,EAAC,AAAC,AAAC,AAAC,AACf;AAAC;AACD,AAAC,oBAAG,AAAC,EAAC,AAAC,AAAC,AACV;AAAC,AACH;AAAC;AAED,AAAE,AAAC,YAAC,AAAK,MAAC,AAAO,QAAC,AAAC,EAAC,AAAU,AAAC,AAAC,AAAC,YAAC,AAAC;AACjC,AAAC,cAAC,AAAU,AAAC,UAAC,AAAI,KAAC,AAAK,AAAC,AAC3B;AAAC,AACD,AAAI,eAAC,AAAC;AACJ,AAAC,cAAC,AAAU,AAAC,YAAG,AAAK,AACvB;AAAC,AACH;AAAC;AAED,AAAI,SAAC,AAAY;AACf,AAAuE;AACvE,AAAE,AAAC,YAAC,AAAI,KAAC,AAAO,WAAI,AAAM,OAAC,AAAI,KAAC,AAAI,KAAC,AAAI,AAAC,MAAC,AAAM,SAAG,AAAC,AAAC,GAAC,AAAC;AACtD,AAAM,mBAAC,AAAU,gDAAC,AAAI,MAAE,AAAe,6CAAC,AAAI,KAAC,AAAI,AAAC,AAAC,AACrD;AAAC,AACD,AAAI,eAAC,AAAC;AACJ,AAAM,mBAAC,AAAe,8CAAC,AAAO,AAAE,AAClC;AAAC,AACH;AAAC,AACF","sourcesContent":["import BluebirdPromise from \"bluebird-lst\"\nimport { outputFile } from \"fs-extra-p\"\nimport { serializeToYaml } from \"./util\"\n\nexport class DebugLogger {\n  readonly data: any = {}\n\n  constructor(readonly enabled = true) {\n  }\n\n  add(key: string, value: any) {\n    if (!this.enabled) {\n      return\n    }\n\n    const dataPath = key.split(\".\")\n    let o = this.data\n    let lastName: string | null = null\n    for (const p of dataPath) {\n      if (p === dataPath[dataPath.length - 1]) {\n        lastName = p\n        break\n      }\n      else {\n        if (o[p] == null) {\n          o[p] = Object.create(null)\n        }\n        else if (typeof o[p] === \"string\") {\n          o[p] = [o[p]]\n        }\n        o = o[p]\n      }\n    }\n\n    if (Array.isArray(o[lastName!!])) {\n      o[lastName!!].push(value)\n    }\n    else {\n      o[lastName!!] = value\n    }\n  }\n\n  save(file: string) {\n    // toml and json doesn't correctly output multiline string as multiline\n    if (this.enabled && Object.keys(this.data).length > 0) {\n      return outputFile(file, serializeToYaml(this.data))\n    }\n    else {\n      return BluebirdPromise.resolve()\n    }\n  }\n}"]}
