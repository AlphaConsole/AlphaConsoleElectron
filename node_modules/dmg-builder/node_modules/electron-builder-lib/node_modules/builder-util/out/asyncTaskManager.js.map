{"version":3,"file":"asyncTaskManager.js","sourceRoot":"","sources":["../src/asyncTaskManager.ts"],"names":[],"mappings":"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","sourcesContent":["import BluebirdPromise from \"bluebird-lst\"\nimport { CancellationToken } from \"builder-util-runtime\"\nimport { log } from \"./log\"\nimport { NestedError } from \"./promise\"\n\nexport class AsyncTaskManager {\n  readonly tasks: Array<Promise<any>> = []\n  private readonly errors: Array<Error> = []\n\n  constructor(private readonly cancellationToken: CancellationToken) {\n  }\n\n  add(task: () => Promise<any>) {\n    if (this.cancellationToken == null || !this.cancellationToken.cancelled) {\n      this.addTask(task())\n    }\n  }\n\n  addTask(promise: Promise<any>) {\n    if (this.cancellationToken.cancelled) {\n      log.debug({reason: \"cancelled\", stack: new Error().stack}, \"async task not added\")\n      if (\"cancel\" in promise) {\n        (promise as any).cancel()\n      }\n      return\n    }\n\n    this.tasks.push(promise\n      .catch(it => {\n        log.debug({error: it.message || it.toString()}, \"async task error\")\n        this.errors.push(it)\n        return BluebirdPromise.resolve(null)\n      }))\n  }\n\n  cancelTasks() {\n    for (const task of this.tasks) {\n      if (\"cancel\" in task) {\n        (task as any).cancel()\n      }\n    }\n    this.tasks.length = 0\n  }\n\n  async awaitTasks(): Promise<Array<any>> {\n    if (this.cancellationToken.cancelled) {\n      this.cancelTasks()\n      return []\n    }\n\n    const checkErrors = () => {\n      if (this.errors.length > 0) {\n        this.cancelTasks()\n        throwError(this.errors)\n        return\n      }\n    }\n\n    checkErrors()\n\n    let result: Array<any> | null = null\n    const tasks = this.tasks\n    let list = tasks.slice()\n    tasks.length = 0\n    while (list.length > 0) {\n      const subResult = await BluebirdPromise.all(list)\n      result = result == null ? subResult : result.concat(subResult)\n      checkErrors()\n      if (tasks.length === 0) {\n        break\n      }\n      else {\n        if (this.cancellationToken.cancelled) {\n          this.cancelTasks()\n          return []\n        }\n\n        list = tasks.slice()\n        tasks.length = 0\n      }\n    }\n    return result || []\n  }\n}\n\nfunction throwError(errors: Array<Error>) {\n  if (errors.length === 1) {\n    throw errors[0]\n  }\n  else if (errors.length > 1) {\n    throw new NestedError(errors, \"Cannot cleanup: \")\n  }\n}"]}
