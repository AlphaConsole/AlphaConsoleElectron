{"version":3,"file":"AppxTarget.js","sourceRoot":"","sources":["../../src/targets/AppxTarget.ts"],"names":[],"mappings":"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","sourcesContent":["import BluebirdPromise from \"bluebird-lst\"\nimport { Arch, asArray, InvalidConfigurationError, log, deepAssign } from \"builder-util\"\nimport { copyOrLinkFile, walk } from \"builder-util/out/fs\"\nimport { emptyDir, readdir, readFile, writeFile } from \"fs-extra-p\"\nimport * as path from \"path\"\nimport { AppXOptions } from \"../\"\nimport { Target } from \"../core\"\nimport { getTemplatePath } from \"../util/pathManager\"\nimport { VmManager } from \"../vm/vm\"\nimport { getSignVendorPath, isOldWin6 } from \"../windowsCodeSign\"\nimport { WinPackager } from \"../winPackager\"\nimport { createStageDir } from \"./targetUtil\"\n\nconst APPX_ASSETS_DIR_NAME = \"appx\"\n\nconst vendorAssetsForDefaultAssets: { [key: string]: string; } = {\n  \"StoreLogo.png\": \"SampleAppx.50x50.png\",\n  \"Square150x150Logo.png\": \"SampleAppx.150x150.png\",\n  \"Square44x44Logo.png\": \"SampleAppx.44x44.png\",\n  \"Wide310x150Logo.png\": \"SampleAppx.310x150.png\",\n}\n\nconst DEFAULT_RESOURCE_LANG = \"en-US\"\n\nexport default class AppXTarget extends Target {\n  readonly options: AppXOptions = deepAssign({}, this.packager.platformSpecificBuildOptions, this.packager.config.appx)\n\n  constructor(private readonly packager: WinPackager, readonly outDir: string) {\n    super(\"appx\")\n\n    if (process.platform !== \"darwin\" && (process.platform !== \"win32\" || isOldWin6())) {\n      throw new Error(\"AppX is supported only on Windows 10 or Windows Server 2012 R2 (version number 6.3+)\")\n    }\n  }\n\n  // https://docs.microsoft.com/en-us/windows/uwp/packaging/create-app-package-with-makeappx-tool#mapping-files\n  async build(appOutDir: string, arch: Arch): Promise<any> {\n    const packager = this.packager\n    const artifactName = packager.expandArtifactNamePattern(this.options, \"appx\", arch)\n    const artifactPath = path.join(this.outDir, artifactName)\n    this.logBuilding(\"AppX\", artifactPath, arch)\n\n    const vendorPath = await getSignVendorPath()\n    const vm = await packager.vm.value\n\n    const stageDir = await createStageDir(this, packager, arch)\n\n    const mappingFile = stageDir.getTempFile(\"mapping.txt\")\n    const makeAppXArgs = [\"pack\", \"/o\" /* overwrite the output file if it exists */,\n      \"/f\", vm.toVmFile(mappingFile),\n      \"/p\", vm.toVmFile(artifactPath),\n    ]\n    if (packager.compression === \"store\") {\n      makeAppXArgs.push(\"/nc\")\n    }\n\n    const mappingList: Array<Array<string>> = []\n    mappingList.push(await BluebirdPromise.map(walk(appOutDir), file => {\n      let appxPath = file.substring(appOutDir.length + 1)\n      if (path.sep !== \"\\\\\") {\n        appxPath = appxPath.replace(/\\//g, \"\\\\\")\n      }\n      return `\"${vm.toVmFile(file)}\" \"app\\\\${appxPath}\"`\n    }))\n\n    const userAssetDir = await this.packager.getResource(undefined, APPX_ASSETS_DIR_NAME)\n    const assetInfo = await AppXTarget.computeUserAssets(vm, vendorPath, userAssetDir)\n    const userAssets = assetInfo.userAssets\n\n    const manifestFile = stageDir.getTempFile(\"AppxManifest.xml\")\n    await this.writeManifest(getTemplatePath(\"appx\"), manifestFile, arch, await this.computePublisherName(), userAssets)\n    mappingList.push(assetInfo.mappings)\n    mappingList.push([`\"${vm.toVmFile(manifestFile)}\" \"AppxManifest.xml\"`])\n\n    if (isScaledAssetsProvided(userAssets)) {\n      const outFile = vm.toVmFile(stageDir.getTempFile(\"resources.pri\"))\n      const makePriPath = vm.toVmFile(path.join(vendorPath, \"windows-10\", Arch[arch], \"makepri.exe\"))\n\n      const assetRoot = stageDir.getTempFile(\"appx/assets\")\n      await emptyDir(assetRoot)\n      await BluebirdPromise.map(assetInfo.allAssets, it => copyOrLinkFile(it, path.join(assetRoot, path.basename(it))))\n\n      await vm.exec(makePriPath, [\"new\",\n        \"/Overwrite\",\n        \"/Manifest\", vm.toVmFile(manifestFile),\n        \"/ProjectRoot\", vm.toVmFile(path.dirname(assetRoot)),\n        \"/ConfigXml\", vm.toVmFile(path.join(getTemplatePath(\"appx\"), \"priconfig.xml\")),\n        \"/OutputFile\", outFile,\n      ])\n\n      // in addition to resources.pri, resources.scale-140.pri and other such files will be generated\n      for (const resourceFile of (await readdir(stageDir.dir)).filter(it => it.startsWith(\"resources.\")).sort()) {\n        mappingList.push([`\"${vm.toVmFile(stageDir.getTempFile(resourceFile))}\" \"${resourceFile}\"`])\n      }\n      makeAppXArgs.push(\"/l\")\n    }\n\n    let mapping = \"[Files]\"\n    for (const list of mappingList) {\n      mapping += \"\\r\\n\" + list.join(\"\\r\\n\")\n    }\n    await writeFile(mappingFile, mapping)\n    packager.debugLogger.add(\"appx.mapping\", mapping)\n\n    if (this.options.makeappxArgs != null) {\n      makeAppXArgs.push(...this.options.makeappxArgs)\n    }\n    await vm.exec(vm.toVmFile(path.join(vendorPath, \"windows-10\", Arch[arch], \"makeappx.exe\")), makeAppXArgs)\n    await packager.sign(artifactPath)\n\n    await stageDir.cleanup()\n\n    packager.info.dispatchArtifactCreated({\n      file: artifactPath,\n      packager,\n      arch,\n      safeArtifactName: packager.computeSafeArtifactName(artifactName, \"appx\"),\n      target: this,\n      isWriteUpdateInfo: this.options.electronUpdaterAware,\n    })\n  }\n\n  private static async computeUserAssets(vm: VmManager, vendorPath: string, userAssetDir: string | null) {\n    const mappings: Array<string> = []\n    let userAssets: Array<string>\n    const allAssets: Array<string> = []\n    if (userAssetDir == null) {\n      userAssets = []\n    }\n    else {\n      userAssets = (await readdir(userAssetDir)).filter(it => !it.startsWith(\".\") && !it.endsWith(\".db\") && it.includes(\".\"))\n      for (const name of userAssets) {\n        mappings.push(`\"${vm.toVmFile(userAssetDir)}${vm.pathSep}${name}\" \"assets\\\\${name}\"`)\n        allAssets.push(path.join(userAssetDir, name))\n      }\n    }\n\n    for (const defaultAsset of Object.keys(vendorAssetsForDefaultAssets)) {\n      if (userAssets.length === 0 || !isDefaultAssetIncluded(userAssets, defaultAsset)) {\n        const file = path.join(vendorPath, \"appxAssets\", vendorAssetsForDefaultAssets[defaultAsset])\n        mappings.push(`\"${vm.toVmFile(file)}\" \"assets\\\\${defaultAsset}\"`)\n        allAssets.push(file)\n      }\n    }\n\n    // we do not use process.arch to build path to tools, because even if you are on x64, ia32 appx tool must be used if you build appx for ia32\n    return {userAssets, mappings, allAssets}\n  }\n\n  // https://github.com/electron-userland/electron-builder/issues/2108#issuecomment-333200711\n  private async computePublisherName() {\n    if (await this.packager.cscInfo.value == null) {\n      log.info({reason: \"Windows Store only build\"}, \"AppX is not signed\")\n      return this.options.publisher || \"CN=ms\"\n    }\n\n    const publisher = await this.packager.computedPublisherSubjectOnWindowsOnly.value\n    if (!publisher) {\n      throw new Error(\"Internal error: cannot compute subject using certificate info\")\n    }\n    return publisher\n  }\n\n  private async writeManifest(templatePath: string, outFile: string, arch: Arch, publisher: string, userAssets: Array<string>) {\n    const appInfo = this.packager.appInfo\n    const options = this.options\n    const manifest = (await readFile(path.join(templatePath, \"appxmanifest.xml\"), \"utf8\"))\n      .replace(/\\$\\{([a-zA-Z0-9]+)\\}/g, (match, p1): string => {\n        switch (p1) {\n          case \"publisher\":\n            return publisher\n\n          case \"publisherDisplayName\":\n            const name = options.publisherDisplayName || appInfo.companyName\n            if (name == null) {\n              throw new InvalidConfigurationError(`Please specify \"author\" in the application package.json — it is required because \"appx.publisherDisplayName\" is not set.`)\n            }\n            return name\n\n          case \"version\":\n            return appInfo.versionInWeirdWindowsForm\n\n          case \"applicationId\":\n            const result = options.applicationId || options.identityName || appInfo.name\n            if (!isNaN(parseInt(result[0], 10))) {\n              let message = `AppX Application.Id can’t start with numbers: \"${result}\"`\n              if (options.applicationId == null) {\n                message += `\\nPlease set appx.applicationId (or correct appx.identityName or name)`\n              }\n              throw new InvalidConfigurationError(message)\n            }\n            return result\n\n          case \"identityName\":\n            return options.identityName  || appInfo.name\n\n          case \"executable\":\n            return `app\\\\${appInfo.productFilename}.exe`\n\n          case \"displayName\":\n            return options.displayName || appInfo.productName\n\n          case \"description\":\n            return appInfo.description || appInfo.productName\n\n          case \"backgroundColor\":\n            return options.backgroundColor || \"#464646\"\n\n          case \"logo\":\n            return \"assets\\\\StoreLogo.png\"\n\n          case \"square150x150Logo\":\n            return \"assets\\\\Square150x150Logo.png\"\n\n          case \"square44x44Logo\":\n            return \"assets\\\\Square44x44Logo.png\"\n\n          case \"lockScreen\":\n            return lockScreenTag(userAssets)\n\n          case \"defaultTile\":\n            return defaultTileTag(userAssets)\n\n          case \"splashScreen\":\n            return splashScreenTag(userAssets)\n\n          case \"arch\":\n            return arch === Arch.ia32 ? \"x86\" : \"x64\"\n\n          case \"resourceLanguages\":\n            return resourceLanguageTag(asArray(options.languages))\n\n          default:\n            throw new Error(`Macro ${p1} is not defined`)\n        }\n      })\n    await writeFile(outFile, manifest)\n  }\n}\n\n// get the resource - language tag, see https://docs.microsoft.com/en-us/windows/uwp/globalizing/manage-language-and-region#specify-the-supported-languages-in-the-apps-manifest\nfunction resourceLanguageTag(userLanguages: Array<string> | null | undefined): string {\n  if (userLanguages == null || userLanguages.length === 0) {\n    userLanguages = [DEFAULT_RESOURCE_LANG]\n  }\n  return userLanguages.map(it => `<Resource Language=\"${it.replace(/_/g, \"-\")}\" />`).join(\"\\n\")\n}\n\nfunction lockScreenTag(userAssets: Array<string>): string {\n  if (isDefaultAssetIncluded(userAssets, \"BadgeLogo.png\")) {\n    return '<uap:LockScreen Notification=\"badgeAndTileText\" BadgeLogo=\"assets\\\\BadgeLogo.png\" />'\n  }\n  else {\n    return \"\"\n  }\n}\n\nfunction defaultTileTag(userAssets: Array<string>): string {\n  const defaultTiles: Array<string> = [\"<uap:DefaultTile\", 'Wide310x150Logo=\"assets\\\\Wide310x150Logo.png\"']\n\n  if (isDefaultAssetIncluded(userAssets, \"LargeTile.png\")) {\n    defaultTiles.push('Square310x310Logo=\"assets\\\\LargeTile.png\"')\n  }\n  if (isDefaultAssetIncluded(userAssets, \"SmallTile.png\")) {\n    defaultTiles.push('Square71x71Logo=\"assets\\\\SmallTile.png\"')\n  }\n\n  defaultTiles.push(\"/>\")\n  return defaultTiles.join(\" \")\n}\n\nfunction splashScreenTag(userAssets: Array<string>): string {\n  if (isDefaultAssetIncluded(userAssets, \"SplashScreen.png\")) {\n    return '<uap:SplashScreen Image=\"assets\\\\SplashScreen.png\" />'\n  }\n  else {\n    return \"\"\n  }\n}\n\nfunction isDefaultAssetIncluded(userAssets: Array<string>, defaultAsset: string) {\n  const defaultAssetName = defaultAsset.substring(0, defaultAsset.indexOf(\".\"))\n  return userAssets.some(it => it.includes(defaultAssetName))\n}\n\nfunction isScaledAssetsProvided(userAssets: Array<string>) {\n  return userAssets.some(it => it.includes(\".scale-\") || it.includes(\".targetsize-\"))\n}"]}
