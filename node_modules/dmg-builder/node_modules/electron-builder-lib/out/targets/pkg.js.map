{"version":3,"file":"pkg.js","sourceRoot":"","sources":["../../src/targets/pkg.ts"],"names":[],"mappings":"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","sourcesContent":["import { Arch, debug, exec, use } from \"builder-util\"\nimport { statOrNull } from \"builder-util/out/fs\"\nimport { getNotLocalizedLicenseFiles } from \"builder-util/out/license\"\nimport { readFile, unlink, writeFile } from \"fs-extra-p\"\nimport * as path from \"path\"\nimport { PkgOptions } from \"..\"\nimport { findIdentity, Identity } from \"../codeSign\"\nimport { Target } from \"../core\"\nimport MacPackager from \"../macPackager\"\nimport { filterCFBundleIdentifier } from \"../packager/mac\"\n\nconst certType = \"Developer ID Installer\"\n\n// http://www.shanekirk.com/2013/10/creating-flat-packages-in-osx/\n// to use --scripts, we must build .app bundle separately using pkgbuild\n// productbuild --scripts doesn't work (because scripts in this case not added to our package)\n// https://github.com/electron-userland/electron-osx-sign/issues/96#issuecomment-274986942\nexport class PkgTarget extends Target {\n  readonly options: PkgOptions = {\n    allowAnywhere: true,\n    allowCurrentUserHome: true,\n    allowRootDirectory: true,\n    ...this.packager.config.pkg,\n  }\n\n  constructor(private readonly packager: MacPackager, readonly outDir: string) {\n    super(\"pkg\")\n  }\n\n  async build(appPath: string, arch: Arch): Promise<any> {\n    const packager = this.packager\n    const options = this.options\n    const appInfo = packager.appInfo\n\n    const artifactName = packager.expandArtifactNamePattern(options, \"pkg\")\n    const artifactPath = path.join(this.outDir, artifactName)\n\n    this.logBuilding(\"pkg\", artifactPath, arch)\n\n    const keychainName = (await packager.codeSigningInfo.value).keychainName\n\n    const appOutDir = this.outDir\n    // https://developer.apple.com/library/content/documentation/DeveloperTools/Reference/DistributionDefinitionRef/Chapters/Distribution_XML_Ref.html\n    const distInfoFile = path.join(appOutDir, \"distribution.xml\")\n\n    const innerPackageFile = path.join(appOutDir, `${filterCFBundleIdentifier(appInfo.id)}.pkg`)\n    const identity = (await Promise.all([\n      findIdentity(certType, options.identity || packager.platformSpecificBuildOptions.identity, keychainName),\n      this.customizeDistributionConfiguration(distInfoFile, appPath),\n      this.buildComponentPackage(appPath, innerPackageFile),\n    ]))[0]\n\n    if (identity == null && packager.forceCodeSigning) {\n      throw new Error(`Cannot find valid \"${certType}\" to sign standalone installer, please see https://electron.build/code-signing`)\n    }\n\n    const args = prepareProductBuildArgs(identity, keychainName)\n    args.push(\"--distribution\", distInfoFile)\n    args.push(artifactPath)\n    use(options.productbuild, it => args.push(...it as any))\n    await exec(\"productbuild\", args, {\n      cwd: appOutDir,\n    })\n    await Promise.all([unlink(innerPackageFile), unlink(distInfoFile)])\n\n    packager.dispatchArtifactCreated(artifactPath, this, arch, packager.computeSafeArtifactName(artifactName, \"pkg\", arch))\n  }\n\n  private async customizeDistributionConfiguration(distInfoFile: string, appPath: string) {\n    await exec(\"productbuild\", [\"--synthesize\", \"--component\", appPath, distInfoFile], {\n      cwd: this.outDir,\n    })\n\n    const options = this.options\n    let distInfo = await readFile(distInfoFile, \"utf-8\")\n    const insertIndex = distInfo.lastIndexOf(\"</installer-gui-script>\")\n    distInfo = distInfo.substring(0, insertIndex) + `    <domains enable_anywhere=\"${options.allowAnywhere}\" enable_currentUserHome=\"${options.allowCurrentUserHome}\" enable_localSystem=\"${options.allowRootDirectory}\" />\\n` + distInfo.substring(insertIndex)\n\n    const license = await getNotLocalizedLicenseFiles(options.license, this.packager)\n    if (license != null) {\n      distInfo = distInfo.substring(0, insertIndex) + `    <license file=\"${license}\"/>\\n` + distInfo.substring(insertIndex)\n    }\n\n    debug(distInfo)\n    await writeFile(distInfoFile, distInfo)\n  }\n\n  private async buildComponentPackage(appPath: string, outFile: string) {\n    const options = this.options\n    const args = [\n      \"--component\", appPath,\n    ]\n    use(this.options.installLocation || \"/Applications\", it => args.push(\"--install-location\", it!))\n    if (options.scripts != null) {\n      args.push(\"--scripts\", path.resolve(this.packager.info.buildResourcesDir, options.scripts))\n    }\n    else if (options.scripts !== null) {\n      const dir = path.join(this.packager.info.buildResourcesDir, \"pkg-scripts\")\n      const stat = await statOrNull(dir)\n      if (stat != null && stat.isDirectory()) {\n        args.push(\"--scripts\", dir)\n      }\n    }\n\n    args.push(outFile)\n    await exec(\"pkgbuild\", args)\n  }\n}\n\nexport function prepareProductBuildArgs(identity: Identity | null, keychain: string | null | undefined): Array<string> {\n  const args: Array<string> = []\n  if (identity != null) {\n    args.push(\"--sign\", identity.hash)\n    if (keychain != null) {\n      args.push(\"--keychain\", keychain)\n    }\n  }\n  return args\n}"]}
