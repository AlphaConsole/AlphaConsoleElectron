{"version":3,"file":"archive.js","sourceRoot":"","sources":["../../src/targets/archive.ts"],"names":[],"mappings":"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","sourcesContent":["import { path7za } from \"7zip-bin\"\nimport { debug7z, debug7zArgs, exec } from \"builder-util\"\nimport { exists, unlinkIfExists } from \"builder-util/out/fs\"\nimport { move } from \"fs-extra-p\"\nimport * as path from \"path\"\nimport { TmpDir } from \"temp-file\"\nimport { CompressionLevel } from \"../core\"\nimport { getLinuxToolsPath } from \"./tools\"\n\n/** @internal */\nexport async function tar(compression: CompressionLevel | any | any, format: string, outFile: string, dirToArchive: string, isMacApp: boolean, tempDirManager: TmpDir): Promise<void> {\n  const tarFile = await tempDirManager.getTempFile({suffix: \".tar\"})\n  const tarArgs = debug7zArgs(\"a\")\n  tarArgs.push(tarFile)\n  tarArgs.push(path.basename(dirToArchive))\n\n  await Promise.all([\n    exec(path7za, tarArgs, {cwd: path.dirname(dirToArchive)}),\n    // remove file before - 7z doesn't overwrite file, but update\n    unlinkIfExists(outFile),\n  ])\n\n  if (!isMacApp) {\n    await exec(path7za, [\"rn\", tarFile, path.basename(dirToArchive), path.basename(outFile, `.${format}`)])\n  }\n\n  if (format === \"tar.lz\") {\n    // noinspection SpellCheckingInspection\n    let lzipPath = \"lzip\"\n    if (process.platform === \"darwin\") {\n      lzipPath = path.join(await getLinuxToolsPath(), \"bin\", lzipPath)\n    }\n    await exec(lzipPath, [compression === \"store\" ? \"-1\" : \"-9\", \"--keep\" /* keep (don't delete) input files */, tarFile])\n    // bloody lzip creates file in the same dir where input file with postfix `.lz`, option --output doesn't work\n    await move(`${tarFile}.lz`, outFile)\n    return\n  }\n\n  const args = compute7zCompressArgs(format === \"tar.xz\" ? \"xz\" : (format === \"tar.bz2\" ? \"bzip2\" : \"gzip\"), {\n    isRegularFile: true,\n    method: \"DEFAULT\",\n    compression,\n  })\n  args.push(outFile, tarFile)\n  await exec(path7za, args, {\n    cwd: path.dirname(dirToArchive),\n  }, debug7z.enabled)\n}\n\nexport interface ArchiveOptions {\n  compression?: CompressionLevel | null\n\n  /**\n   * @default false\n   */\n  withoutDir?: boolean\n\n  /**\n   * @default true\n   */\n  solid?: boolean\n\n  /**\n   * @default true\n   */\n  isArchiveHeaderCompressed?: boolean\n\n  listFile?: string\n\n  dictSize?: number\n  excluded?: Array<string>\n\n  // DEFAULT allows to disable custom logic and do not pass method switch at all\n  method?: \"Copy\" | \"LZMA\" | \"Deflate\" | \"DEFAULT\"\n\n  isRegularFile?: boolean\n}\n\nexport function compute7zCompressArgs(format: string, options: ArchiveOptions = {}) {\n  let storeOnly = options.compression === \"store\"\n  const args = debug7zArgs(\"a\")\n\n  let isLevelSet = false\n  if (process.env.ELECTRON_BUILDER_COMPRESSION_LEVEL != null) {\n    storeOnly = false\n    args.push(`-mx=${process.env.ELECTRON_BUILDER_COMPRESSION_LEVEL}`)\n    isLevelSet = true\n  }\n\n  if (format === \"zip\" && options.compression === \"maximum\") {\n    // http://superuser.com/a/742034\n    args.push(\"-mfb=258\", \"-mpass=15\")\n  }\n\n  if (!isLevelSet && !storeOnly) {\n    args.push(\"-mx=9\")\n  }\n\n  if (options.dictSize != null) {\n    args.push(`-md=${options.dictSize}m`)\n  }\n\n  // https://sevenzip.osdn.jp/chm/cmdline/switches/method.htm#7Z\n  // https://stackoverflow.com/questions/27136783/7zip-produces-different-output-from-identical-input\n  // tc and ta are off by default, but to be sure, we explicitly set it to off\n  // disable \"Stores NTFS timestamps for files: Modification time, Creation time, Last access time.\" to produce the same archive for the same data\n  if (!options.isRegularFile) {\n    args.push(\"-mtc=off\")\n  }\n\n  if (format === \"7z\" || format.endsWith(\".7z\")) {\n    if (options.solid === false) {\n      args.push(\"-ms=off\")\n    }\n\n    if (options.isArchiveHeaderCompressed === false) {\n      args.push(\"-mhc=off\")\n    }\n\n    // args valid only for 7z\n    // -mtm=off disable \"Stores last Modified timestamps for files.\"\n    args.push(\"-mtm=off\", \"-mta=off\")\n  }\n\n  if (options.method != null) {\n    if (options.method !== \"DEFAULT\") {\n      args.push(`-mm=${options.method}`)\n    }\n  }\n  else if (format === \"zip\" || storeOnly) {\n    args.push(`-mm=${storeOnly ? \"Copy\" : \"Deflate\"}`)\n  }\n\n  if (format === \"zip\") {\n    // -mcu switch:  7-Zip uses UTF-8, if there are non-ASCII symbols.\n    // because default mode: 7-Zip uses UTF-8, if the local code page doesn't contain required symbols.\n    // but archive should be the same regardless where produced\n    args.push(\"-mcu\")\n  }\n  return args\n}\n\n// 7z is very fast, so, use ultra compression\n/** @internal */\nexport async function archive(format: string, outFile: string, dirToArchive: string, options: ArchiveOptions = {}): Promise<string> {\n  const args = compute7zCompressArgs(format, options)\n  // remove file before - 7z doesn't overwrite file, but update\n  await unlinkIfExists(outFile)\n\n  args.push(outFile, options.listFile == null ? (options.withoutDir ? \".\" : path.basename(dirToArchive)) : `@${options.listFile}`)\n  if (options.excluded != null) {\n    args.push(...options.excluded)\n  }\n\n  try {\n    await exec(path7za, args, {\n      cwd: options.withoutDir ? dirToArchive : path.dirname(dirToArchive),\n    }, debug7z.enabled)\n  }\n  catch (e) {\n    if (e.code === \"ENOENT\" && !(await exists(dirToArchive))) {\n      throw new Error(`Cannot create archive: \"${dirToArchive}\" doesn't exist`)\n    }\n    else {\n      throw e\n    }\n  }\n\n  return outFile\n}"]}
