"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.createStageDirPath = exports.createStageDir = exports.StageDir = undefined;

var _bluebirdLst;

function _load_bluebirdLst() {
    return _bluebirdLst = require("bluebird-lst");
}

let createStageDir = exports.createStageDir = (() => {
    var _ref = (0, (_bluebirdLst || _load_bluebirdLst()).coroutine)(function* (target, packager, arch) {
        return new StageDir((yield createStageDirPath(target, packager, arch)));
    });

    return function createStageDir(_x, _x2, _x3) {
        return _ref.apply(this, arguments);
    };
})();

let createStageDirPath = exports.createStageDirPath = (() => {
    var _ref2 = (0, (_bluebirdLst || _load_bluebirdLst()).coroutine)(function* (target, packager, arch) {
        const tempDir = packager.info.stageDirPathCustomizer(target, packager, arch);
        yield (0, (_fsExtraP || _load_fsExtraP()).emptyDir)(tempDir);
        return tempDir;
    });

    return function createStageDirPath(_x4, _x5, _x6) {
        return _ref2.apply(this, arguments);
    };
})();
//# sourceMappingURL=targetUtil.js.map


var _fsExtraP;

function _load_fsExtraP() {
    return _fsExtraP = require("fs-extra-p");
}

var _path = _interopRequireWildcard(require("path"));

var _builderUtil;

function _load_builderUtil() {
    return _builderUtil = require("builder-util");
}

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

class StageDir {
    constructor(dir) {
        this.dir = dir;
    }
    getTempFile(name) {
        return this.dir + _path.sep + name;
    }
    cleanup() {
        if (!(_builderUtil || _load_builderUtil()).debug.enabled || process.env.ELECTRON_BUILDER_REMOVE_STAGE_EVEN_IF_DEBUG === "true") {
            return (0, (_fsExtraP || _load_fsExtraP()).remove)(this.dir);
        }
        return Promise.resolve();
    }
    toString() {
        return this.dir;
    }
}
exports.StageDir = StageDir;