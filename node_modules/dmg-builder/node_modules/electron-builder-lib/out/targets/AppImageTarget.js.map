{"version":3,"file":"AppImageTarget.js","sourceRoot":"","sources":["../../src/targets/AppImageTarget.ts"],"names":[],"mappings":"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","sourcesContent":["import BluebirdPromise from \"bluebird-lst\"\nimport { Arch, serializeToYaml, executeAppBuilder } from \"builder-util\"\nimport { UUID } from \"builder-util-runtime\"\nimport { copyOrLinkFile, unlinkIfExists } from \"builder-util/out/fs\"\nimport * as ejs from \"ejs\"\nimport { ensureDir, outputFile, readFile, symlink, writeFile } from \"fs-extra-p\"\nimport { Lazy } from \"lazy-val\"\nimport * as path from \"path\"\nimport { AppImageOptions } from \"..\"\nimport { Target } from \"../core\"\nimport { LinuxPackager } from \"../linuxPackager\"\nimport { getAppUpdatePublishConfiguration } from \"../publish/PublishManager\"\nimport { getTemplatePath } from \"../util/pathManager\"\nimport { LinuxTargetHelper } from \"./LinuxTargetHelper\"\nimport { createStageDir } from \"./targetUtil\"\n\nconst appRunTemplate = new Lazy<(data: any) => string>(async () => {\n  return ejs.compile(await readFile(path.join(getTemplatePath(\"linux\"), \"AppRun.sh\"), \"utf-8\"))\n})\n\n// https://unix.stackexchange.com/questions/375191/append-to-sub-directory-inside-squashfs-file\nexport default class AppImageTarget extends Target {\n  readonly options: AppImageOptions = {...this.packager.platformSpecificBuildOptions, ...(this.packager.config as any)[this.name]}\n  private readonly desktopEntry: Lazy<string>\n\n  constructor(ignored: string, private readonly packager: LinuxPackager, private readonly helper: LinuxTargetHelper, readonly outDir: string) {\n    super(\"appImage\")\n\n    // we add X-AppImage-BuildId to ensure that new desktop file will be installed\n    this.desktopEntry = new Lazy<string>(() => helper.computeDesktopEntry(this.options, \"AppRun\", {\n      \"X-AppImage-Version\": `${packager.appInfo.buildVersion}`,\n      \"X-AppImage-BuildId\": UUID.v1(),\n    }))\n  }\n\n  async build(appOutDir: string, arch: Arch): Promise<any> {\n    const packager = this.packager\n    // https://github.com/electron-userland/electron-builder/issues/775\n    // https://github.com/electron-userland/electron-builder/issues/1726\n    // tslint:disable-next-line:no-invalid-template-strings\n    const artifactName = packager.expandArtifactNamePattern(this.options, \"AppImage\", arch, \"${name}-${version}-${arch}.${ext}\", false)\n    const artifactPath = path.join(this.outDir, artifactName)\n    this.logBuilding(\"AppImage\", artifactPath, arch)\n\n    const stageDir = await createStageDir(this, packager, arch)\n    const resourceName = `appimagekit-${this.packager.executableName}`\n    const installIcons = await this.copyIcons(stageDir.dir, resourceName)\n\n    const finalDesktopFilename = `${this.packager.executableName}.desktop`\n    await Promise.all([\n      unlinkIfExists(artifactPath),\n      writeFile(stageDir.getTempFile(\"/AppRun\"), (await appRunTemplate.value)({\n        systemIntegration: this.options.systemIntegration || \"ask\",\n        desktopFileName: finalDesktopFilename,\n        executableName: this.packager.executableName,\n        resourceName,\n        installIcons,\n      }), {\n        mode: \"0755\",\n      }),\n      writeFile(stageDir.getTempFile(finalDesktopFilename), await this.desktopEntry.value),\n    ])\n\n    // must be after this.helper.icons call\n    if (this.helper.maxIconPath == null) {\n      throw new Error(\"Icon is not provided\")\n    }\n\n    if (this.packager.packagerOptions.effectiveOptionComputed != null && await this.packager.packagerOptions.effectiveOptionComputed({desktop: await this.desktopEntry.value})) {\n      return\n    }\n\n    const publishConfig = await getAppUpdatePublishConfiguration(packager, arch)\n    if (publishConfig != null) {\n      await outputFile(path.join(packager.getResourcesDir(stageDir.getTempFile(\"app\")), \"app-update.yml\"), serializeToYaml(publishConfig))\n    }\n\n    const args = [\"appimage\", \"--stage\", stageDir.dir, \"--arch\", Arch[arch], \"--output\", artifactPath, \"--app\", appOutDir]\n    if (packager.compression === \"maximum\") {\n      args.push(\"--compression\", \"xz\")\n    }\n\n    packager.info.dispatchArtifactCreated({\n      file: artifactPath,\n      safeArtifactName: packager.computeSafeArtifactName(artifactName, \"AppImage\", arch, false),\n      target: this,\n      arch,\n      packager,\n      isWriteUpdateInfo: true,\n      updateInfo: JSON.parse(await executeAppBuilder(args)),\n    })\n  }\n\n  private async copyIcons(stageDir: string, resourceName: string): Promise<string> {\n    const iconDirRelativePath = \"usr/share/icons/hicolor\"\n    const iconDir = path.join(stageDir, iconDirRelativePath)\n    await ensureDir(iconDir)\n\n    // https://github.com/AppImage/AppImageKit/issues/438#issuecomment-319094239\n    // expects icons in the /usr/share/icons/hicolor\n    const iconNames = await BluebirdPromise.map(this.helper.icons, async icon => {\n      const filename = `${this.packager.executableName}.png`\n      const iconSizeDir = `${icon.size}x${icon.size}/apps`\n      const dir = path.join(iconDir, iconSizeDir)\n      await ensureDir(dir)\n      const finalIconFile = path.join(dir, filename)\n      await copyOrLinkFile(icon.file, finalIconFile, null, true)\n\n      if (icon.file === this.helper.maxIconPath) {\n        await symlink(path.relative(stageDir, finalIconFile), path.join(stageDir, filename))\n      }\n      return {filename, iconSizeDir, size: icon.size}\n    })\n\n    let installIcons = \"\"\n    for (const icon of iconNames) {\n      installIcons += `xdg-icon-resource install --noupdate --context apps --size ${icon.size} \"$APPDIR/${iconDirRelativePath}/${icon.iconSizeDir}/${icon.filename}\" \"${resourceName}\"\\n`\n    }\n    return installIcons\n  }\n}"]}
