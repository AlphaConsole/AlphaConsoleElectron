{"version":3,"file":"nsisUtil.js","sourceRoot":"","sources":["../../../src/targets/nsis/nsisUtil.ts"],"names":[],"mappings":"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","sourcesContent":["import BluebirdPromise from \"bluebird-lst\"\nimport { Arch, log } from \"builder-util\"\nimport { PackageFileInfo } from \"builder-util-runtime\"\nimport { getBinFromGithub } from \"builder-util/out/binDownload\"\nimport { copyFile } from \"builder-util/out/fs\"\nimport { unlink } from \"fs-extra-p\"\nimport { Lazy } from \"lazy-val\"\nimport * as path from \"path\"\nimport { getTemplatePath } from \"../../util/pathManager\"\nimport { NsisTarget } from \"./NsisTarget\"\n\nexport const nsisTemplatesDir = getTemplatePath(\"nsis\")\n\n// noinspection SpellCheckingInspection\nexport const NSIS_PATH = new Lazy(() => getBinFromGithub(\"nsis\", \"3.0.1.13\", \"WtEinikNm5ES8WSf1ZDefuUahn7iewbtVmJrRg4xWfm4eaESSJKy9pKIMRMgszdKw5e3YooCOqObnC5qJIfTLA==\"))\n\nexport class AppPackageHelper {\n  private readonly archToFileInfo = new Map<Arch, Promise<PackageFileInfo>>()\n  private readonly infoToIsDelete = new Map<PackageFileInfo, boolean>()\n\n  /** @private */\n  refCount = 0\n\n  constructor(private readonly elevateHelper: CopyElevateHelper) {\n  }\n\n  async packArch(arch: Arch, target: NsisTarget): Promise<PackageFileInfo> {\n    let infoPromise = this.archToFileInfo.get(arch)\n    if (infoPromise == null) {\n      const appOutDir = target.archs.get(arch)!\n      infoPromise = this.elevateHelper.copy(appOutDir, target)\n        .then(() => target.buildAppPackage(appOutDir, arch))\n      this.archToFileInfo.set(arch, infoPromise)\n    }\n\n    const info = await infoPromise\n    if (target.isWebInstaller) {\n      this.infoToIsDelete.set(info, false)\n    }\n    else if (!this.infoToIsDelete.has(info)) {\n      this.infoToIsDelete.set(info, true)\n    }\n    return info\n  }\n\n  async finishBuild(): Promise<any> {\n    if (--this.refCount > 0) {\n      return\n    }\n\n    const filesToDelete: Array<string> = []\n    for (const [info, isDelete]  of this.infoToIsDelete.entries()) {\n      if (isDelete) {\n        filesToDelete.push(info.path)\n      }\n    }\n\n    await BluebirdPromise.map(filesToDelete, it => unlink(it))\n  }\n}\n\nexport class CopyElevateHelper {\n  private readonly copied = new Map<string, Promise<string>>()\n\n  copy(appOutDir: string, target: NsisTarget): Promise<any> {\n    let isPackElevateHelper = target.options.packElevateHelper\n    if (isPackElevateHelper === false && target.options.perMachine === true) {\n      isPackElevateHelper = true\n      log.warn(\"`packElevateHelper = false` is ignored, because `perMachine` is set to `true`\")\n    }\n\n    if (isPackElevateHelper === false) {\n      return BluebirdPromise.resolve()\n    }\n\n    let promise = this.copied.get(appOutDir)\n    if (promise != null) {\n      return promise\n    }\n\n    promise = NSIS_PATH.value.then(it => copyFile(path.join(it, \"elevate.exe\"), path.join(appOutDir, \"resources\", \"elevate.exe\"), false))\n    this.copied.set(appOutDir, promise)\n    return promise\n  }\n}"]}
