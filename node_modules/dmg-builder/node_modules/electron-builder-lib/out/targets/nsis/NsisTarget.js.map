{"version":3,"file":"NsisTarget.js","sourceRoot":"","sources":["../../../src/targets/nsis/NsisTarget.ts"],"names":[],"mappings":"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","sourcesContent":["import BluebirdPromise from \"bluebird-lst\"\nimport { Arch, asArray, AsyncTaskManager, execWine, getPlatformIconFileName, InvalidConfigurationError, log, spawnAndWrite, use } from \"builder-util\"\nimport { PackageFileInfo, UUID } from \"builder-util-runtime\"\nimport { getBinFromGithub } from \"builder-util/out/binDownload\"\nimport { statOrNull } from \"builder-util/out/fs\"\nimport { hashFile } from \"builder-util/out/hash\"\nimport _debug from \"debug\"\nimport { readFile, stat, unlink } from \"fs-extra-p\"\nimport { Lazy } from \"lazy-val\"\nimport * as path from \"path\"\nimport { Target } from \"../../core\"\nimport { getEffectiveOptions } from \"../../options/CommonWindowsInstallerConfiguration\"\nimport { isSafeGithubName, normalizeExt } from \"../../platformPackager\"\nimport { time } from \"../../util/timer\"\nimport { WinPackager } from \"../../winPackager\"\nimport { archive, ArchiveOptions } from \"../archive\"\nimport { appendBlockmap, configureDifferentialAwareArchiveOptions, createBlockmap, createNsisWebDifferentialUpdateInfo } from \"../differentialUpdateInfoBuilder\"\nimport { addCustomMessageFileInclude, createAddLangsMacro, LangConfigurator } from \"./nsisLang\"\nimport { computeLicensePage } from \"./nsisLicense\"\nimport { NsisOptions, PortableOptions } from \"./nsisOptions\"\nimport { NsisScriptGenerator } from \"./nsisScriptGenerator\"\nimport { AppPackageHelper, NSIS_PATH, nsisTemplatesDir } from \"./nsisUtil\"\n\nconst debug = _debug(\"electron-builder:nsis\")\n\n// noinspection SpellCheckingInspection\nconst ELECTRON_BUILDER_NS_UUID = UUID.parse(\"50e065bc-3134-11e6-9bab-38c9862bdaf3\")\n\n// noinspection SpellCheckingInspection\nconst nsisResourcePathPromise = new Lazy(() => getBinFromGithub(\"nsis-resources\", \"3.3.0\", \"4okc98BD0v9xDcSjhPVhAkBMqos+FvD/5/H72fTTIwoHTuWd2WdD7r+1j72hxd+ZXxq1y3FRW0x6Z3jR0VfpMw==\"))\n\nconst USE_NSIS_BUILT_IN_COMPRESSOR = false\n\nexport class NsisTarget extends Target {\n  readonly options: NsisOptions\n\n  /** @private */\n  readonly archs: Map<Arch, string> = new Map()\n\n  constructor(protected readonly packager: WinPackager, readonly outDir: string, targetName: string, protected readonly packageHelper: AppPackageHelper) {\n    super(targetName)\n\n    this.packageHelper.refCount++\n\n    this.options = targetName === \"portable\" ? Object.create(null) : {...this.packager.config.nsis}\n    if (targetName !== \"nsis\") {\n      Object.assign(this.options, (this.packager.config as any)[targetName === \"nsis-web\" ? \"nsisWeb\" : targetName])\n    }\n\n    const deps = packager.info.metadata.dependencies\n    if (deps != null && deps[\"electron-squirrel-startup\"] != null) {\n      log.warn('\"electron-squirrel-startup\" dependency is not required for NSIS')\n    }\n  }\n\n  async build(appOutDir: string, arch: Arch) {\n    this.archs.set(arch, appOutDir)\n  }\n\n  get isBuildDifferentialAware() {\n    return !this.isPortable && this.options.differentialPackage !== false\n  }\n\n  /** @private */\n  async buildAppPackage(appOutDir: string, arch: Arch): Promise<PackageFileInfo> {\n    const options = this.options\n    const packager = this.packager\n\n    const isBuildDifferentialAware = this.isBuildDifferentialAware\n    const format = !isBuildDifferentialAware && options.useZip ? \"zip\" : \"7z\"\n    const archiveFile = path.join(this.outDir, `${packager.appInfo.sanitizedName}-${packager.appInfo.version}-${Arch[arch]}.nsis.${format}`)\n    const archiveOptions: ArchiveOptions = {\n      withoutDir: true,\n      compression: packager.compression,\n    }\n\n    const timer = time(`nsis package, ${Arch[arch]}`)\n    await archive(format, archiveFile, appOutDir, isBuildDifferentialAware ? configureDifferentialAwareArchiveOptions(archiveOptions) : archiveOptions)\n    timer.end()\n\n    if (isBuildDifferentialAware && this.isWebInstaller) {\n      const data = await appendBlockmap(archiveFile)\n      return {\n        ...data,\n        size: data.size!!,\n        path: archiveFile,\n      }\n    }\n    else {\n      return await createPackageFileInfo(archiveFile)\n    }\n  }\n\n  async finishBuild(): Promise<any> {\n    try {\n      await this.buildInstaller()\n    }\n    finally {\n      await this.packageHelper.finishBuild()\n    }\n  }\n\n  protected get installerFilenamePattern(): string {\n    // tslint:disable:no-invalid-template-strings\n    return \"${productName} \" + (this.isPortable ? \"\" : \"Setup \") + \"${version}.${ext}\"\n  }\n\n  private get isPortable() {\n    return this.name === \"portable\"\n  }\n\n  private async buildInstaller(): Promise<any> {\n    const packager = this.packager\n    const appInfo = packager.appInfo\n    const options = this.options\n    const installerFilename = packager.expandArtifactNamePattern(options, \"exe\", null, this.installerFilenamePattern)\n    const oneClick = options.oneClick !== false\n    const installerPath = path.join(this.outDir, installerFilename)\n\n    const logFields: any = {\n      target: this.name,\n      file: log.filePath(installerPath),\n      archs: Array.from(this.archs.keys()).map(it => Arch[it]).join(\", \"),\n    }\n    if (!this.isPortable) {\n      logFields.oneClick = oneClick\n    }\n    log.info(logFields, \"building\")\n\n    const guid = options.guid || UUID.v5(appInfo.id, ELECTRON_BUILDER_NS_UUID)\n    const defines: any = {\n      APP_ID: appInfo.id,\n      APP_GUID: guid,\n      PRODUCT_NAME: appInfo.productName,\n      PRODUCT_FILENAME: appInfo.productFilename,\n      APP_FILENAME: (!oneClick || options.perMachine === true) && /^[-_+0-9a-zA-Z .]+$/.test(appInfo.productFilename) ? appInfo.productFilename : appInfo.sanitizedName,\n      APP_DESCRIPTION: appInfo.description,\n      VERSION: appInfo.version,\n\n      PROJECT_DIR: packager.projectDir,\n      BUILD_RESOURCES_DIR: packager.info.buildResourcesDir,\n    }\n\n    const commands: any = {\n      OutFile: `\"${installerPath}\"`,\n      VIProductVersion: appInfo.versionInWeirdWindowsForm,\n      VIAddVersionKey: this.computeVersionKey(),\n      Unicode: this.isUnicodeEnabled,\n    }\n\n    const isPortable = this.isPortable\n    const iconPath = (isPortable ? null : await packager.getResource(options.installerIcon, \"installerIcon.ico\")) || await packager.getIconPath()\n    if (iconPath != null) {\n      if (isPortable) {\n        commands.Icon = `\"${iconPath}\"`\n      }\n      else {\n        defines.MUI_ICON = iconPath\n        defines.MUI_UNICON = iconPath\n      }\n    }\n\n    const packageFiles: { [arch: string]: PackageFileInfo } = {}\n    if (USE_NSIS_BUILT_IN_COMPRESSOR && this.archs.size === 1) {\n      defines.APP_BUILD_DIR = this.archs.get(this.archs.keys().next().value)\n    }\n    else {\n      await BluebirdPromise.map(this.archs.keys(), async arch => {\n        const fileInfo = await this.packageHelper.packArch(arch, this)\n        const file = fileInfo.path\n        const defineKey = arch === Arch.x64 ? \"APP_64\" : \"APP_32\"\n        defines[defineKey] = file\n        defines[`${defineKey}_NAME`] = path.basename(file)\n        // nsis expect a hexadecimal string\n        defines[`${defineKey}_HASH`] = Buffer.from(fileInfo.sha512, \"base64\").toString(\"hex\").toUpperCase()\n\n        if (this.isWebInstaller) {\n          packager.dispatchArtifactCreated(file, this, arch)\n          packageFiles[Arch[arch]] = fileInfo\n        }\n      })\n    }\n\n    this.configureDefinesForAllTypeOfInstaller(defines)\n    if (isPortable) {\n      defines.REQUEST_EXECUTION_LEVEL = (options as PortableOptions).requestExecutionLevel || \"user\"\n    }\n    else {\n      await this.configureDefines(oneClick, defines)\n    }\n\n    if (packager.compression === \"store\") {\n      commands.SetCompress = \"off\"\n    }\n    else {\n      // difference - 33.540 vs 33.601, only 61 KB (but zip is faster to decompress)\n      commands.SetCompressor = \"zlib\"\n      if (!this.isWebInstaller) {\n        defines.COMPRESS = \"auto\"\n      }\n    }\n\n    debug(defines)\n    debug(commands)\n\n    if (packager.packagerOptions.effectiveOptionComputed != null && await packager.packagerOptions.effectiveOptionComputed([defines, commands])) {\n      return\n    }\n\n    const sharedHeader = await this.computeCommonInstallerScriptHeader()\n    const script = isPortable ? await readFile(path.join(nsisTemplatesDir, \"portable.nsi\"), \"utf8\") : await this.computeScriptAndSignUninstaller(defines, commands, installerPath, sharedHeader)\n    await this.executeMakensis(defines, commands, sharedHeader + await this.computeFinalScript(script, true))\n    await Promise.all<any>([packager.sign(installerPath), defines.UNINSTALLER_OUT_FILE == null ? Promise.resolve() : unlink(defines.UNINSTALLER_OUT_FILE)])\n\n    const safeArtifactName = isSafeGithubName(installerFilename) ? installerFilename : this.generateGitHubInstallerName()\n\n    let updateInfo: any\n    if (this.isWebInstaller) {\n      updateInfo = createNsisWebDifferentialUpdateInfo(installerPath, packageFiles)\n    }\n    else if (this.isBuildDifferentialAware) {\n      updateInfo = await createBlockmap(installerPath, this, packager, safeArtifactName)\n    }\n\n    packager.info.dispatchArtifactCreated({\n      file: installerPath,\n      updateInfo,\n      target: this,\n      packager,\n      arch: this.archs.size === 1 ? this.archs.keys().next().value : null,\n      safeArtifactName,\n      isWriteUpdateInfo: !this.isPortable,\n    })\n  }\n\n  protected generateGitHubInstallerName() {\n    const appInfo = this.packager.appInfo\n    const classifier = appInfo.name.toLowerCase() === appInfo.name ? \"setup-\" : \"Setup-\"\n    return `${appInfo.name}-${this.isPortable ? \"\" : classifier}${appInfo.version}.exe`\n  }\n\n  private get isUnicodeEnabled() {\n    return this.options.unicode !== false\n  }\n\n  get isWebInstaller(): boolean {\n    return false\n  }\n\n  private async computeScriptAndSignUninstaller(defines: any, commands: any, installerPath: string, sharedHeader: string) {\n    const packager = this.packager\n    const customScriptPath = await packager.getResource(this.options.script, \"installer.nsi\")\n    const script = await readFile(customScriptPath || path.join(nsisTemplatesDir, \"installer.nsi\"), \"utf8\")\n\n    if (customScriptPath != null) {\n      log.info({reason: \"custom NSIS script is used\"}, \"uninstaller is not signed by electron-builder\")\n      return script\n    }\n\n    // https://github.com/electron-userland/electron-builder/issues/2103\n    // it is more safe and reliable to write uninstaller to our out dir\n    const uninstallerPath = path.join(this.outDir, `.__uninstaller-${this.name}-${this.packager.appInfo.sanitizedName}.exe`)\n    const isWin = process.platform === \"win32\"\n    defines.BUILD_UNINSTALLER = null\n    defines.UNINSTALLER_OUT_FILE = isWin ? uninstallerPath : path.win32.join(\"Z:\", uninstallerPath)\n    await this.executeMakensis(defines, commands, sharedHeader + await this.computeFinalScript(script, false))\n    await execWine(installerPath, [])\n    await packager.sign(uninstallerPath, \"  Signing NSIS uninstaller\")\n\n    delete defines.BUILD_UNINSTALLER\n    // platform-specific path, not wine\n    defines.UNINSTALLER_OUT_FILE = uninstallerPath\n    return script\n  }\n\n  private computeVersionKey() {\n    // Error: invalid VIProductVersion format, should be X.X.X.X\n    // so, we must strip beta\n    const localeId = this.options.language || \"1033\"\n    const appInfo = this.packager.appInfo\n    const versionKey = [\n      `/LANG=${localeId} ProductName \"${appInfo.productName}\"`,\n      `/LANG=${localeId} ProductVersion \"${appInfo.version}\"`,\n      `/LANG=${localeId} LegalCopyright \"${appInfo.copyright}\"`,\n      `/LANG=${localeId} FileDescription \"${appInfo.description}\"`,\n      `/LANG=${localeId} FileVersion \"${appInfo.buildVersion}\"`,\n    ]\n    use(this.packager.platformSpecificBuildOptions.legalTrademarks, it => versionKey.push(`/LANG=${localeId} LegalTrademarks \"${it}\"`))\n    use(appInfo.companyName, it => versionKey.push(`/LANG=${localeId} CompanyName \"${it}\"`))\n    return versionKey\n  }\n\n  protected configureDefines(oneClick: boolean, defines: any): Promise<any> {\n    const packager = this.packager\n    const options = this.options\n\n    const asyncTaskManager = new AsyncTaskManager(packager.info.cancellationToken)\n\n    if (oneClick) {\n      defines.ONE_CLICK = null\n\n      if (options.runAfterFinish !== false) {\n        defines.RUN_AFTER_FINISH = null\n      }\n\n      asyncTaskManager.add(async () => {\n        const installerHeaderIcon = await packager.getResource(options.installerHeaderIcon, \"installerHeaderIcon.ico\")\n        if (installerHeaderIcon != null) {\n          defines.HEADER_ICO = installerHeaderIcon\n        }\n      })\n    }\n    else {\n      asyncTaskManager.add(async () => {\n        const installerHeader = await packager.getResource(options.installerHeader, \"installerHeader.bmp\")\n        if (installerHeader != null) {\n          defines.MUI_HEADERIMAGE = null\n          defines.MUI_HEADERIMAGE_RIGHT = null\n          defines.MUI_HEADERIMAGE_BITMAP = installerHeader\n        }\n      })\n\n      asyncTaskManager.add(async () => {\n        const bitmap = (await packager.getResource(options.installerSidebar, \"installerSidebar.bmp\")) || \"${NSISDIR}\\\\Contrib\\\\Graphics\\\\Wizard\\\\nsis3-metro.bmp\"\n        defines.MUI_WELCOMEFINISHPAGE_BITMAP = bitmap\n        defines.MUI_UNWELCOMEFINISHPAGE_BITMAP = (await packager.getResource(options.uninstallerSidebar, \"uninstallerSidebar.bmp\")) || bitmap\n      })\n\n      if (options.allowElevation !== false) {\n        defines.MULTIUSER_INSTALLMODE_ALLOW_ELEVATION = null\n      }\n    }\n\n    if (options.perMachine === true) {\n      defines.INSTALL_MODE_PER_ALL_USERS = null\n    }\n\n    if (!oneClick || options.perMachine === true) {\n      defines.INSTALL_MODE_PER_ALL_USERS_REQUIRED = null\n    }\n\n    if (options.allowToChangeInstallationDirectory) {\n      if (oneClick) {\n        throw new InvalidConfigurationError(\"allowToChangeInstallationDirectory makes sense only for assisted installer (please set oneClick to false)\")\n      }\n      defines.allowToChangeInstallationDirectory = null\n    }\n\n    const commonOptions = getEffectiveOptions(options, packager)\n\n    if (commonOptions.menuCategory != null) {\n      defines.MENU_FILENAME = commonOptions.menuCategory\n    }\n\n    defines.SHORTCUT_NAME = commonOptions.shortcutName\n\n    if (options.deleteAppDataOnUninstall) {\n      defines.DELETE_APP_DATA_ON_UNINSTALL = null\n    }\n\n    asyncTaskManager.add(async () => {\n      const uninstallerIcon = await packager.getResource(options.uninstallerIcon, \"uninstallerIcon.ico\")\n      if (uninstallerIcon != null) {\n        // we don't need to copy MUI_UNICON (defaults to app icon), so, we have 2 defines\n        defines.UNINSTALLER_ICON = uninstallerIcon\n        defines.MUI_UNICON = uninstallerIcon\n      }\n    })\n\n    defines.UNINSTALL_DISPLAY_NAME = packager.expandMacro(options.uninstallDisplayName || \"${productName} ${version}\", null, {}, false)\n    if (!commonOptions.isCreateDesktopShortcut) {\n      defines.DO_NOT_CREATE_DESKTOP_SHORTCUT = null\n    }\n    if (!commonOptions.isCreateStartMenuShortcut) {\n      defines.DO_NOT_CREATE_START_MENU_SHORTCUT = null\n    }\n\n    if (options.displayLanguageSelector === true) {\n      defines.DISPLAY_LANG_SELECTOR = null\n    }\n\n    return asyncTaskManager.awaitTasks()\n  }\n\n  private configureDefinesForAllTypeOfInstaller(defines: any) {\n    const appInfo = this.packager.appInfo\n    const companyName = appInfo.companyName\n    if (companyName != null) {\n      defines.COMPANY_NAME = companyName\n    }\n\n    // electron uses product file name as app data, define it as well to remove on uninstall\n    if (defines.APP_FILENAME !== appInfo.productFilename) {\n      defines.APP_PRODUCT_FILENAME = appInfo.productFilename\n    }\n    defines.APP_INSTALLER_STORE_FILE = `${appInfo.productFilename}\\\\installer.exe`\n\n    const options = this.options\n\n    if (!this.isWebInstaller && defines.APP_BUILD_DIR == null) {\n      if (options.useZip) {\n        defines.ZIP_COMPRESSION = null\n      }\n\n      defines.COMPRESSION_METHOD = options.useZip ? \"zip\" : \"7z\"\n    }\n  }\n\n  private async executeMakensis(defines: any, commands: any, script: string) {\n    const args: Array<string> = (this.options.warningsAsErrors === false) ? [] : [\"-WX\"]\n    for (const name of Object.keys(defines)) {\n      const value = defines[name]\n      if (value == null) {\n        args.push(`-D${name}`)\n      }\n      else {\n        args.push(`-D${name}=${value}`)\n      }\n    }\n\n    for (const name of Object.keys(commands)) {\n      const value = commands[name]\n      if (Array.isArray(value)) {\n        for (const c of value) {\n          args.push(`-X${name} ${c}`)\n        }\n      }\n      else {\n        args.push(`-X${name} ${value}`)\n      }\n    }\n\n    args.push(\"-\")\n\n    if (this.packager.debugLogger.enabled) {\n      this.packager.debugLogger.add(\"nsis.script\", script)\n    }\n\n    const nsisPath = await NSIS_PATH.value\n    const command = path.join(nsisPath, process.platform === \"darwin\" ? \"mac\" : (process.platform === \"win32\" ? \"Bin\" : \"linux\"), process.platform === \"win32\" ? \"makensis.exe\" : \"makensis\")\n    await spawnAndWrite(command, args, script, {\n      // we use NSIS_CONFIG_CONST_DATA_PATH=no to build makensis on Linux, but in any case it doesn't use stubs as MacOS/Windows version, so, we explicitly set NSISDIR\n      env: {...process.env, NSISDIR: nsisPath},\n      cwd: nsisTemplatesDir,\n    }, debug.enabled)\n  }\n\n  private async computeCommonInstallerScriptHeader() {\n    const packager = this.packager\n    const options = this.options\n    const scriptGenerator = new NsisScriptGenerator()\n    const langConfigurator = new LangConfigurator(options)\n\n    scriptGenerator.include(path.join(nsisTemplatesDir, \"include\", \"StdUtils.nsh\"))\n\n    const includeDir = path.join(nsisTemplatesDir, \"include\")\n    scriptGenerator.addIncludeDir(includeDir)\n    scriptGenerator.flags([\"updated\", \"force-run\", \"keep-shortcuts\", \"no-desktop-shortcut\", \"delete-app-data\"])\n\n    createAddLangsMacro(scriptGenerator, langConfigurator)\n\n    const taskManager = new AsyncTaskManager(packager.info.cancellationToken)\n\n    const pluginArch = this.isUnicodeEnabled ? \"x86-unicode\" : \"x86-ansi\"\n    taskManager.add(async () => {\n      scriptGenerator.addPluginDir(pluginArch, path.join(await nsisResourcePathPromise.value, \"plugins\", pluginArch))\n    })\n\n    taskManager.add(async () => {\n      const userPluginDir = path.join(packager.info.buildResourcesDir, pluginArch)\n      const stat = await statOrNull(userPluginDir)\n      if (stat != null && stat.isDirectory()) {\n        scriptGenerator.addPluginDir(pluginArch, userPluginDir)\n      }\n    })\n\n    taskManager.addTask(addCustomMessageFileInclude(\"messages.yml\", packager, scriptGenerator, langConfigurator))\n\n    if (!this.isPortable) {\n      if (options.oneClick === false) {\n        taskManager.addTask(addCustomMessageFileInclude(\"assistedMessages.yml\", packager, scriptGenerator, langConfigurator))\n      }\n\n      taskManager.add(async () => {\n        const customInclude = await packager.getResource(this.options.include, \"installer.nsh\")\n        if (customInclude != null) {\n          scriptGenerator.addIncludeDir(packager.info.buildResourcesDir)\n          scriptGenerator.include(customInclude)\n        }\n      })\n    }\n\n    await taskManager.awaitTasks()\n    return scriptGenerator.build()\n  }\n\n  private async computeFinalScript(originalScript: string, isInstaller: boolean) {\n    const packager = this.packager\n    const options = this.options\n    const langConfigurator = new LangConfigurator(options)\n\n    const scriptGenerator = new NsisScriptGenerator()\n    const taskManager = new AsyncTaskManager(packager.info.cancellationToken)\n\n    if (isInstaller) {\n      // http://stackoverflow.com/questions/997456/nsis-license-file-based-on-language-selection\n      taskManager.add(() => computeLicensePage(packager, options, scriptGenerator, langConfigurator.langs))\n    }\n\n    await taskManager.awaitTasks()\n\n    if (this.isPortable) {\n      return scriptGenerator.build() + originalScript\n    }\n\n    const fileAssociations = packager.fileAssociations\n    if (fileAssociations.length !== 0) {\n      if (options.perMachine !== true && options.oneClick !== false) {\n        // https://github.com/electron-userland/electron-builder/issues/772\n        throw new InvalidConfigurationError(`Please set perMachine to true — file associations works on Windows only if installed for all users`)\n      }\n\n      scriptGenerator.include(path.join(path.join(nsisTemplatesDir, \"include\"), \"FileAssociation.nsh\"))\n      if (isInstaller) {\n        const registerFileAssociationsScript = new NsisScriptGenerator()\n        for (const item of fileAssociations) {\n          const extensions = asArray(item.ext).map(normalizeExt)\n          for (const ext of extensions) {\n            const customIcon = await packager.getResource(getPlatformIconFileName(item.icon, false), `${extensions[0]}.ico`)\n            let installedIconPath = \"$appExe,0\"\n            if (customIcon != null) {\n              installedIconPath = `$INSTDIR\\\\resources\\\\${path.basename(customIcon)}`\n              registerFileAssociationsScript.file(installedIconPath, customIcon)\n            }\n\n            const icon = `\"${installedIconPath}\"`\n            const commandText = `\"Open with ${packager.appInfo.productName}\"`\n            const command = '\"$appExe $\\\\\"%1$\\\\\"\"'\n            registerFileAssociationsScript.insertMacro(\"APP_ASSOCIATE\", `\"${ext}\" \"${item.name || ext}\" \"${item.description || \"\"}\" ${icon} ${commandText} ${command}`)\n          }\n        }\n        scriptGenerator.macro(\"registerFileAssociations\", registerFileAssociationsScript)\n      }\n      else {\n        const unregisterFileAssociationsScript = new NsisScriptGenerator()\n        for (const item of fileAssociations) {\n          for (const ext of asArray(item.ext)) {\n            unregisterFileAssociationsScript.insertMacro(\"APP_UNASSOCIATE\", `\"${normalizeExt(ext)}\" \"${item.name || ext}\"`)\n          }\n        }\n        scriptGenerator.macro(\"unregisterFileAssociations\", unregisterFileAssociationsScript)\n      }\n    }\n\n    return scriptGenerator.build() + originalScript\n  }\n}\n\nasync function createPackageFileInfo(file: string): Promise<PackageFileInfo> {\n  return {\n    path: file,\n    size: (await stat(file)).size,\n    sha512: await hashFile(file),\n  }\n}"]}
