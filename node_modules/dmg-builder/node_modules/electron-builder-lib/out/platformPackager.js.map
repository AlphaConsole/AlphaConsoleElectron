{"version":3,"file":"platformPackager.js","sourceRoot":"","sources":["../src/platformPackager.ts"],"names":[],"mappings":"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","sourcesContent":["import BluebirdPromise from \"bluebird-lst\"\nimport { Arch, asArray, AsyncTaskManager, debug, DebugLogger, executeAppBuilder, getArchSuffix, InvalidConfigurationError, isEmptyOrSpaces, log, deepAssign } from \"builder-util\"\nimport { PackageBuilder } from \"builder-util/out/api\"\nimport { statOrNull, unlinkIfExists } from \"builder-util/out/fs\"\nimport { orIfFileNotExist } from \"builder-util/out/promise\"\nimport { readdir, rename } from \"fs-extra-p\"\nimport { Lazy } from \"lazy-val\"\nimport { Minimatch } from \"minimatch\"\nimport * as path from \"path\"\nimport { AppInfo } from \"./appInfo\"\nimport { checkFileInArchive } from \"./asar/asarFileChecker\"\nimport { AsarPackager } from \"./asar/asarUtil\"\nimport { CompressionLevel, Platform, Target, TargetSpecificOptions } from \"./core\"\nimport { copyFiles, FileMatcher, getFileMatchers, getMainFileMatchers } from \"./fileMatcher\"\nimport { createTransformer, isElectronCompileUsed } from \"./fileTransformer\"\nimport { AfterPackContext, AsarOptions, Configuration, FileAssociation, PlatformSpecificBuildOptions } from \"./index\"\nimport { Packager } from \"./packager\"\nimport { unpackElectron, unpackMuon } from \"./packager/dirPackager\"\nimport { PackagerOptions } from \"./packagerApi\"\nimport { copyAppFiles } from \"./util/appFileCopier\"\nimport { computeFileSets, ELECTRON_COMPILE_SHIM_FILENAME } from \"./util/AppFileCopierHelper\"\nimport { AsarIntegrity, computeData } from \"./asar/integrity\"\n\nexport abstract class PlatformPackager<DC extends PlatformSpecificBuildOptions> implements PackageBuilder {\n  get packagerOptions(): PackagerOptions {\n    return this.info.options\n  }\n\n  get buildResourcesDir(): string {\n    return this.info.buildResourcesDir\n  }\n\n  get projectDir(): string {\n    return this.info.projectDir\n  }\n\n  get config(): Configuration {\n    return this.info.config\n  }\n\n  readonly platformSpecificBuildOptions: DC\n\n  get resourceList(): Promise<Array<string>> {\n    return this._resourceList.value\n  }\n\n  private readonly _resourceList = new Lazy<Array<string>>(() => orIfFileNotExist(readdir(this.info.buildResourcesDir), []))\n\n  readonly appInfo: AppInfo\n\n  protected constructor(readonly info: Packager, readonly platform: Platform) {\n    this.platformSpecificBuildOptions = PlatformPackager.normalizePlatformSpecificBuildOptions((this.config as any)[platform.buildConfigurationKey])\n    this.appInfo = this.prepareAppInfo(info.appInfo)\n  }\n\n  get compression(): CompressionLevel {\n    const compression = this.platformSpecificBuildOptions.compression\n    // explicitly set to null - request to use default value instead of parent (in the config)\n    if (compression === null) {\n      return \"normal\"\n    }\n    return compression || this.config.compression || \"normal\"\n  }\n\n  get debugLogger(): DebugLogger {\n    return this.info.debugLogger\n  }\n\n  abstract get defaultTarget(): Array<string>\n\n  protected prepareAppInfo(appInfo: AppInfo) {\n    return appInfo\n  }\n\n  private static normalizePlatformSpecificBuildOptions(options: any | null | undefined): any {\n    return options == null ? Object.create(null) : options\n  }\n\n  abstract createTargets(targets: Array<string>, mapper: (name: string, factory: (outDir: string) => Target) => void): void\n\n  protected getCscPassword(): string {\n    const password = this.doGetCscPassword()\n    if (isEmptyOrSpaces(password)) {\n      log.info({reason: \"CSC_KEY_PASSWORD is not defined\"}, \"empty password will be used for code signing\")\n      return \"\"\n    }\n    else {\n      return password!.trim()\n    }\n  }\n\n  protected getCscLink(extraEnvName?: string | null): string | null | undefined {\n    // allow to specify as empty string\n    const envValue = chooseNotNull(extraEnvName == null ? null : process.env[extraEnvName], process.env.CSC_LINK)\n    return chooseNotNull(chooseNotNull(this.info.config.cscLink, this.platformSpecificBuildOptions.cscLink), envValue)\n  }\n\n  protected doGetCscPassword(): string | null | undefined {\n    // allow to specify as empty string\n    return chooseNotNull(chooseNotNull(this.info.config.cscKeyPassword, this.platformSpecificBuildOptions.cscKeyPassword), process.env.CSC_KEY_PASSWORD)\n  }\n\n  protected computeAppOutDir(outDir: string, arch: Arch): string {\n    return this.packagerOptions.prepackaged || path.join(outDir, `${this.platform.buildConfigurationKey}${getArchSuffix(arch)}${this.platform === Platform.MAC ? \"\" : \"-unpacked\"}`)\n  }\n\n  dispatchArtifactCreated(file: string, target: Target | null, arch: Arch | null, safeArtifactName?: string | null) {\n    this.info.dispatchArtifactCreated({\n      file, safeArtifactName, target, arch,\n      packager: this,\n    })\n  }\n\n  async pack(outDir: string, arch: Arch, targets: Array<Target>, taskManager: AsyncTaskManager): Promise<any> {\n    const appOutDir = this.computeAppOutDir(outDir, arch)\n    await this.doPack(outDir, appOutDir, this.platform.nodeName, arch, this.platformSpecificBuildOptions, targets)\n    this.packageInDistributableFormat(appOutDir, arch, targets, taskManager)\n  }\n\n  protected packageInDistributableFormat(appOutDir: string, arch: Arch, targets: Array<Target>, taskManager: AsyncTaskManager): void {\n    taskManager.addTask(\n      BluebirdPromise.map(targets, it => it.isAsyncSupported ? it.build(appOutDir, arch) : null)\n        .then(() => BluebirdPromise.each(targets, it => it.isAsyncSupported ? null : it.build(appOutDir, arch)))\n    )\n  }\n\n  private getExtraFileMatchers(isResources: boolean, appOutDir: string, macroExpander: (pattern: string) => string, customBuildOptions: DC): Array<FileMatcher> | null {\n    const base = isResources ? this.getResourcesDir(appOutDir) : (this.platform === Platform.MAC ? path.join(appOutDir, `${this.appInfo.productFilename}.app`, \"Contents\") : appOutDir)\n    return getFileMatchers(this.config, isResources ? \"extraResources\" : \"extraFiles\", this.projectDir, base, macroExpander, customBuildOptions)\n  }\n\n  get electronDistMacOsAppName() {\n    return this.config.muonVersion == null ? \"Electron.app\" : \"Brave.app\"\n  }\n\n  get electronDistExecutableName() {\n    return this.config.muonVersion == null ? \"electron\" : \"brave\"\n  }\n\n  get electronDistMacOsExecutableName() {\n    return this.config.muonVersion == null ? \"Electron\" : \"Brave\"\n  }\n\n  protected async doPack(outDir: string, appOutDir: string, platformName: string, arch: Arch, platformSpecificBuildOptions: DC, targets: Array<Target>) {\n    if (this.packagerOptions.prepackaged != null) {\n      return\n    }\n\n    const asarOptions = await this.computeAsarOptions(platformSpecificBuildOptions)\n    const macroExpander = (it: string) => this.expandMacro(it, arch == null ? null : Arch[arch], {\"/*\": \"{,/**/*}\"})\n\n    const resourcesPath = this.platform === Platform.MAC ? path.join(appOutDir, this.electronDistMacOsAppName, \"Contents\", \"Resources\") : path.join(appOutDir, \"resources\")\n\n    const muonVersion = this.config.muonVersion\n    const isElectron = muonVersion == null\n    const config = this.config\n    log.info({\n      platform: platformName,\n      arch: Arch[arch], [isElectron ? `electron` : `muon`]: isElectron ? config.electronVersion!! : muonVersion!!,\n      appOutDir: log.filePath(appOutDir),\n    }, `packaging`)\n\n    if (this.info.isPrepackedAppAsar) {\n      await unpackElectron(this, appOutDir, platformName, Arch[arch], config.electronVersion!)\n    }\n    else {\n      await (isElectron ? unpackElectron(this, appOutDir, platformName, Arch[arch], config.electronVersion!) : unpackMuon(this, appOutDir, platformName, Arch[arch], muonVersion!))\n    }\n\n    const excludePatterns: Array<Minimatch> = []\n\n    const computeParsedPatterns = (patterns: Array<FileMatcher> | null) => {\n      if (patterns != null) {\n        for (const pattern of patterns) {\n          pattern.computeParsedPatterns(excludePatterns, this.info.projectDir)\n        }\n      }\n    }\n\n    const extraResourceMatchers = this.getExtraFileMatchers(true, appOutDir, macroExpander, platformSpecificBuildOptions)\n    computeParsedPatterns(extraResourceMatchers)\n    const extraFileMatchers = this.getExtraFileMatchers(false, appOutDir, macroExpander, platformSpecificBuildOptions)\n    computeParsedPatterns(extraFileMatchers)\n\n    const packContext: AfterPackContext = {\n      appOutDir, outDir, arch, targets,\n      packager: this,\n      electronPlatformName: platformName,\n    }\n\n    const taskManager = new AsyncTaskManager(this.info.cancellationToken)\n\n    this.copyAppFiles(taskManager, asarOptions, resourcesPath, outDir, platformSpecificBuildOptions, excludePatterns, macroExpander)\n\n    taskManager.addTask(unlinkIfExists(path.join(resourcesPath, \"default_app.asar\")))\n    taskManager.addTask(unlinkIfExists(path.join(appOutDir, \"version\")))\n    taskManager.addTask(this.postInitApp(packContext))\n    if (this.platform !== Platform.MAC) {\n      taskManager.addTask(rename(path.join(appOutDir, \"LICENSE\"), path.join(appOutDir, \"LICENSE.electron.txt\")).catch(() => {/* ignore */}))\n    }\n\n    await taskManager.awaitTasks()\n    await this.beforeCopyExtraFiles(appOutDir, asarOptions == null ? null : await computeData(resourcesPath, asarOptions.externalAllowed ? {externalAllowed: true} : null))\n    await BluebirdPromise.each([extraResourceMatchers, extraFileMatchers], it => copyFiles(it))\n\n    if (this.info.cancellationToken.cancelled) {\n      return\n    }\n\n    await this.info.afterPack(packContext)\n    await this.sanityCheckPackage(appOutDir, asarOptions != null)\n    await this.signApp(packContext)\n    await this.info.afterSign(packContext)\n  }\n\n  protected async beforeCopyExtraFiles(appOutDir: string, asarIntegrity: AsarIntegrity | null) {\n    // empty impl\n  }\n\n  private copyAppFiles(taskManager: AsyncTaskManager, asarOptions: AsarOptions | null, resourcePath: string, outDir: string, platformSpecificBuildOptions: DC, excludePatterns: Array<Minimatch>, macroExpander: ((it: string) => string)) {\n    const appDir = this.info.appDir\n    const config = this.config\n    const isElectronCompile = asarOptions != null && isElectronCompileUsed(this.info)\n\n    const defaultDestination = path.join(resourcePath, \"app\")\n\n    const mainMatchers = getMainFileMatchers(appDir, defaultDestination, macroExpander, platformSpecificBuildOptions, this, outDir, isElectronCompile)\n    if (excludePatterns.length > 0) {\n      for (const matcher of mainMatchers) {\n        matcher.excludePatterns = excludePatterns\n      }\n    }\n    const transformer = createTransformer(appDir, config, isElectronCompile ? {\n      originalMain: this.info.metadata.main,\n      main: ELECTRON_COMPILE_SHIM_FILENAME, ...config.extraMetadata\n    } : config.extraMetadata)\n    const _computeFileSets = (matchers: Array<FileMatcher>) => {\n      return computeFileSets(matchers, transformer, this.info, isElectronCompile)\n        .then(it => it.filter(it => it.files.length > 0))\n    }\n\n    if (this.info.isPrepackedAppAsar) {\n      taskManager.addTask(BluebirdPromise.each(_computeFileSets([new FileMatcher(appDir, resourcePath, macroExpander)]), it => copyAppFiles(it, this.info)))\n    }\n    else if (asarOptions == null) {\n      taskManager.addTask(BluebirdPromise.each(_computeFileSets(mainMatchers), it => copyAppFiles(it, this.info)))\n    }\n    else {\n      const unpackPattern = getFileMatchers(config, \"asarUnpack\", appDir, defaultDestination, macroExpander, platformSpecificBuildOptions)\n      const fileMatcher = unpackPattern == null ? null : unpackPattern[0]\n      taskManager.addTask(_computeFileSets(mainMatchers)\n        .then(fileSets => new AsarPackager(appDir, resourcePath, asarOptions, fileMatcher == null ? null : fileMatcher.createFilter()).pack(fileSets, this)))\n    }\n  }\n\n  // tslint:disable-next-line:no-empty\n  protected async postInitApp(packContext: AfterPackContext): Promise<any> {\n  }\n\n  protected signApp(packContext: AfterPackContext): Promise<any> {\n    return Promise.resolve()\n  }\n\n  async getIconPath(): Promise<string | null> {\n    return null\n  }\n\n  private async computeAsarOptions(customBuildOptions: DC): Promise<AsarOptions | null> {\n    function errorMessage(name: string) {\n      return `${name} is deprecated is deprecated and not supported — please use asarUnpack`\n    }\n\n    const buildMetadata = this.config as any\n    if (buildMetadata[\"asar-unpack\"] != null) {\n      throw new Error(errorMessage(\"asar-unpack\"))\n    }\n    if (buildMetadata[\"asar-unpack-dir\"] != null) {\n      throw new Error(errorMessage(\"asar-unpack-dir\"))\n    }\n\n    const platformSpecific = customBuildOptions.asar\n    const result = platformSpecific == null ? this.config.asar : platformSpecific\n    if (result === false) {\n      const appAsarStat = await statOrNull(path.join(this.info.appDir, \"app.asar\"))\n      //noinspection ES6MissingAwait\n      if (appAsarStat == null || !appAsarStat.isFile()) {\n        log.warn({\n          solution: \"enable asar and use asarUnpack to unpack files that must be externally available\",\n        }, \"asar using is disabled — it is strongly not recommended\")\n      }\n      return null\n    }\n\n    if (result == null || result === true) {\n      return {}\n    }\n\n    for (const name of [\"unpackDir\", \"unpack\"]) {\n      if ((result as any)[name] != null) {\n        throw new Error(errorMessage(`asar.${name}`))\n      }\n    }\n    return deepAssign({}, result)\n  }\n\n  public getElectronSrcDir(dist: string): string {\n    return path.resolve(this.projectDir, dist)\n  }\n\n  public getElectronDestinationDir(appOutDir: string): string {\n    return appOutDir\n  }\n\n  public getResourcesDir(appOutDir: string): string {\n    return this.platform === Platform.MAC ? this.getMacOsResourcesDir(appOutDir) : path.join(appOutDir, \"resources\")\n  }\n\n  public getMacOsResourcesDir(appOutDir: string): string {\n    return path.join(appOutDir, `${this.appInfo.productFilename}.app`, \"Contents\", \"Resources\")\n  }\n\n  private async checkFileInPackage(resourcesDir: string, file: string, messagePrefix: string, isAsar: boolean) {\n    const relativeFile = path.relative(this.info.appDir, path.resolve(this.info.appDir, file))\n    if (isAsar) {\n      await checkFileInArchive(path.join(resourcesDir, \"app.asar\"), relativeFile, messagePrefix)\n      return\n    }\n\n    const pathParsed = path.parse(file)\n    // Even when packaging to asar is disabled, it does not imply that the main file can not be inside an .asar archive.\n    // This may occur when the packaging is done manually before processing with electron-builder.\n    if (pathParsed.dir.includes(\".asar\")) {\n      // The path needs to be split to the part with an asar archive which acts like a directory and the part with\n      // the path to main file itself. (e.g. path/arch.asar/dir/index.js -> path/arch.asar, dir/index.js)\n      const pathSplit: Array<string> = pathParsed.dir.split(path.sep)\n      let partWithAsarIndex = 0\n      pathSplit.some((pathPart: string, index: number) => {\n        partWithAsarIndex = index\n        return pathPart.endsWith(\".asar\")\n      })\n      const asarPath = path.join.apply(path, pathSplit.slice(0, partWithAsarIndex + 1))\n      let mainPath = pathSplit.length > (partWithAsarIndex + 1) ? path.join.apply(pathSplit.slice(partWithAsarIndex + 1)) : \"\"\n      mainPath += path.join(mainPath, pathParsed.base)\n      await checkFileInArchive(path.join(resourcesDir, \"app\", asarPath), mainPath, messagePrefix)\n    }\n    else {\n      const outStat = await statOrNull(path.join(resourcesDir, \"app\", relativeFile))\n      if (outStat == null) {\n        throw new Error(`${messagePrefix} \"${relativeFile}\" does not exist. Seems like a wrong configuration.`)\n      }\n      else {\n        //noinspection ES6MissingAwait\n        if (!outStat.isFile()) {\n          throw new Error(`${messagePrefix} \"${relativeFile}\" is not a file. Seems like a wrong configuration.`)\n        }\n      }\n    }\n  }\n\n  private async sanityCheckPackage(appOutDir: string, isAsar: boolean): Promise<any> {\n    const outStat = await statOrNull(appOutDir)\n    if (outStat == null) {\n      throw new Error(`Output directory \"${appOutDir}\" does not exist. Seems like a wrong configuration.`)\n    }\n    else {\n      //noinspection ES6MissingAwait\n      if (!outStat.isDirectory()) {\n        throw new Error(`Output directory \"${appOutDir}\" is not a directory. Seems like a wrong configuration.`)\n      }\n    }\n\n    const resourcesDir = this.getResourcesDir(appOutDir)\n    await this.checkFileInPackage(resourcesDir, this.info.metadata.main || \"index.js\", \"Application entry file\", isAsar)\n    await this.checkFileInPackage(resourcesDir, \"package.json\", \"Application\", isAsar)\n  }\n\n  computeSafeArtifactName(suggestedName: string | null, ext: string, arch?: Arch | null, skipArchIfX64 = true): string | null {\n    // GitHub only allows the listed characters in file names.\n    if (suggestedName != null && isSafeGithubName(suggestedName)) {\n      return null\n    }\n\n    // tslint:disable-next-line:no-invalid-template-strings\n    return this.computeArtifactName(\"${name}-${version}-${arch}.${ext}\", ext, skipArchIfX64 && arch === Arch.x64 ? null : arch)\n  }\n\n  expandArtifactNamePattern(targetSpecificOptions: TargetSpecificOptions | null | undefined, ext: string, arch?: Arch | null, defaultPattern?: string, skipArchIfX64 = true): string {\n    let pattern = targetSpecificOptions == null ? null : targetSpecificOptions.artifactName\n    if (pattern == null) {\n      // tslint:disable-next-line:no-invalid-template-strings\n      pattern = this.platformSpecificBuildOptions.artifactName || this.config.artifactName || defaultPattern || \"${productName}-${version}-${arch}.${ext}\"\n    }\n    return this.computeArtifactName(pattern, ext, skipArchIfX64 && arch === Arch.x64 ? null : arch)\n  }\n\n  private computeArtifactName(pattern: any, ext: string, arch: Arch | null | undefined) {\n    let archName: string | null = arch == null ? null : Arch[arch]\n    if (arch === Arch.x64) {\n      if (ext === \"AppImage\" || ext === \"rpm\") {\n        archName = \"x86_64\"\n      }\n      else if (ext === \"deb\") {\n        archName = \"amd64\"\n      }\n    }\n    else if (arch === Arch.ia32) {\n      if (ext === \"deb\" || ext === \"AppImage\") {\n        archName = \"i386\"\n      }\n      else if (ext === \"pacman\" || ext === \"rpm\") {\n        archName = \"i686\"\n      }\n    }\n\n    return this.expandMacro(pattern, this.platform === Platform.MAC ? null : archName, {\n      ext\n    })\n  }\n\n  expandMacro(pattern: string, arch?: string | null, extra: any = {}, isProductNameSanitized = true): string {\n    if (arch == null) {\n      pattern = pattern\n      // tslint:disable-next-line:no-invalid-template-strings\n        .replace(\"-${arch}\", \"\")\n        // tslint:disable-next-line:no-invalid-template-strings\n        .replace(\" ${arch}\", \"\")\n        // tslint:disable-next-line:no-invalid-template-strings\n        .replace(\"_${arch}\", \"\")\n        // tslint:disable-next-line:no-invalid-template-strings\n        .replace(\"/${arch}\", \"\")\n    }\n\n    const appInfo = this.appInfo\n    return pattern.replace(/\\${([_a-zA-Z./*]+)}/g, (match, p1): string => {\n      switch (p1) {\n        case \"productName\":\n          return isProductNameSanitized ? appInfo.productFilename : appInfo.productName\n\n        case \"arch\":\n          if (arch == null) {\n            // see above, we remove macro if no arch\n            return \"\"\n          }\n          return arch\n\n        case \"os\":\n          return this.platform.buildConfigurationKey\n\n        case \"platform\":\n          return process.platform\n\n        case \"channel\":\n          return appInfo.channel || \"latest\"\n\n        default:\n          if (p1 in appInfo) {\n            return (appInfo as any)[p1]\n          }\n\n          if (p1.startsWith(\"env.\")) {\n            const envName = p1.substring(\"env.\".length)\n            const envValue = process.env[envName]\n            if (envValue == null) {\n              throw new InvalidConfigurationError(`cannot expand pattern \"${pattern}\": env ${envName} is not defined`, \"ERR_ELECTRON_BUILDER_ENV_NOT_DEFINED\")\n            }\n            return envValue\n          }\n\n          const value = extra[p1]\n          if (value == null) {\n            throw new InvalidConfigurationError(`cannot expand pattern \"${pattern}\": macro ${p1} is not defined`, \"ERR_ELECTRON_BUILDER_MACRO_NOT_DEFINED\")\n          }\n          else {\n            return value\n          }\n      }\n    })\n  }\n\n  generateName(ext: string | null, arch: Arch, deployment: boolean, classifier: string | null = null): string {\n    let c: string | null = null\n    let e: string | null = null\n    if (arch === Arch.x64) {\n      if (ext === \"AppImage\") {\n        c = \"x86_64\"\n      }\n      else if (ext === \"deb\") {\n        c = \"amd64\"\n      }\n    }\n    else if (arch === Arch.ia32 && ext === \"deb\") {\n      c = \"i386\"\n    }\n    else if (ext === \"pacman\") {\n      if (arch === Arch.ia32) {\n        c = \"i686\"\n      }\n      e = \"pkg.tar.xz\"\n    }\n    else {\n      c = Arch[arch]\n    }\n\n    if (c == null) {\n      c = classifier\n    }\n    else if (classifier != null) {\n      c += `-${classifier}`\n    }\n    if (e == null) {\n      e = ext\n    }\n    return this.generateName2(e, c, deployment)\n  }\n\n  generateName2(ext: string | null, classifier: string | null | undefined, deployment: boolean): string {\n    const dotExt = ext == null ? \"\" : `.${ext}`\n    const separator = ext === \"deb\" ? \"_\" : \"-\"\n    return `${deployment ? this.appInfo.name : this.appInfo.productFilename}${separator}${this.appInfo.version}${classifier == null ? \"\" : `${separator}${classifier}`}${dotExt}`\n  }\n\n  getTempFile(suffix: string): Promise<string> {\n    return this.info.tempDirManager.getTempFile({suffix})\n  }\n\n  get fileAssociations(): Array<FileAssociation> {\n    return asArray(this.config.fileAssociations).concat(asArray(this.platformSpecificBuildOptions.fileAssociations))\n  }\n\n  async getResource(custom: string | null | undefined, ...names: Array<string>): Promise<string | null> {\n    const resourcesDir = this.info.buildResourcesDir\n    if (custom === undefined) {\n      const resourceList = await this.resourceList\n      for (const name of names) {\n        if (resourceList.includes(name)) {\n          return path.join(resourcesDir, name)\n        }\n      }\n    }\n    else if (custom != null && !isEmptyOrSpaces(custom)) {\n      const resourceList = await this.resourceList\n      if (resourceList.includes(custom)) {\n        return path.join(resourcesDir, custom)\n      }\n\n      let p = path.resolve(resourcesDir, custom)\n      if (await statOrNull(p) == null) {\n        p = path.resolve(this.projectDir, custom)\n        if (await statOrNull(p) == null) {\n          throw new InvalidConfigurationError(`cannot find specified resource \"${custom}\", nor relative to \"${resourcesDir}\", neither relative to project dir (\"${this.projectDir}\")`)\n        }\n      }\n      return p\n    }\n    return null\n  }\n\n  get forceCodeSigning(): boolean {\n    const forceCodeSigningPlatform = this.platformSpecificBuildOptions.forceCodeSigning\n    return (forceCodeSigningPlatform == null ? this.config.forceCodeSigning : forceCodeSigningPlatform) || false\n  }\n\n  protected async getOrConvertIcon(format: IconFormat): Promise<string | null> {\n    const iconPath = this.platformSpecificBuildOptions.icon || this.config.icon\n    if (iconPath != null) {\n      const iconInfos = await this.resolveIcon([iconPath], format)\n      return (iconInfos)[0].file\n    }\n\n    const resourceList = await this.resourceList\n    const resourcesDir = this.info.buildResourcesDir\n    const sourceNames = [`icon.${format === \"set\" ? \"png\" : format}`, \"icon.png\", \"icons\"]\n    if (format === \"ico\") {\n      sourceNames.push(\"icon.icns\")\n    }\n    for (const fileName of sourceNames) {\n      if (resourceList.includes(fileName)) {\n        return (await this.resolveIcon([path.join(resourcesDir, fileName)], format))[0].file\n      }\n    }\n\n    log.warn({reason: \"application icon is not set\"}, \"default Electron icon is used\")\n    return null\n  }\n\n  // convert if need, validate size (it is a reason why tool is called even if file has target extension (already specified as foo.icns for example))\n  async resolveIcon(sources: Array<string>, outputFormat: IconFormat): Promise<Array<IconInfo>> {\n    const args = [\n      \"icon\",\n      \"--format\", outputFormat,\n      \"--root\", this.buildResourcesDir,\n      \"--root\", this.projectDir,\n      \"--out\", path.resolve(this.projectDir, this.config.directories!!.output!!, `.icon-${outputFormat}`),\n    ]\n    for (const source of sources) {\n      args.push(\"--input\", source)\n    }\n\n    const rawResult = await executeAppBuilder(args)\n    let result: IconConvertResult\n    try {\n      result = JSON.parse(rawResult)\n    }\n    catch (e) {\n      throw new Error(`Cannot parse result: ${e.message}: ${rawResult}`)\n    }\n\n    const errorMessage = result.error\n    if (errorMessage != null) {\n      throw new InvalidConfigurationError(errorMessage, result.errorCode)\n    }\n    return result.icons!!\n  }\n}\n\nexport interface IconInfo {\n  file: string\n  size: number\n}\n\ninterface IconConvertResult {\n  icons?: Array<IconInfo>\n\n  error?: string\n  errorCode?: string\n}\n\nexport type IconFormat = \"icns\" | \"ico\" | \"set\"\n\nexport function isSafeGithubName(name: string) {\n  return /^[0-9A-Za-z._-]+$/.test(name)\n}\n\n// remove leading dot\nexport function normalizeExt(ext: string) {\n  return ext.startsWith(\".\") ? ext.substring(1) : ext\n}\n\nexport function resolveFunction<T>(executor: T | string): T {\n  if (typeof executor !== \"string\") {\n    return executor\n  }\n\n  let p = executor as string\n  if (p.startsWith(\".\")) {\n    p = path.resolve(p)\n  }\n  try {\n    p = require.resolve(p)\n  }\n  catch (e) {\n    debug(e)\n    p = path.resolve(p)\n  }\n\n  const m = require(p)\n  return m.default || m\n}\n\nexport function chooseNotNull(v1: string | null | undefined, v2: string | null | undefined): string | null | undefined {\n  return v1 == null ? v2 : v1\n}"]}
