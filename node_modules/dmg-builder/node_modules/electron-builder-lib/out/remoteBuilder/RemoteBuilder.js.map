{"version":3,"file":"RemoteBuilder.js","sourceRoot":"","sources":["../../src/remoteBuilder/RemoteBuilder.ts"],"names":[],"mappings":"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","sourcesContent":["import BluebirdPromise from \"bluebird-lst\"\nimport { Arch, isEnvTrue, log } from \"builder-util\"\nimport { connect, constants } from \"http2\"\nimport * as path from \"path\"\nimport { promisify } from \"util\"\nimport { Target } from \"../core\"\nimport { PlatformPackager } from \"../platformPackager\"\nimport { ProjectInfoManager } from \"./ProjectInfoManager\"\nimport { checkStatus, getConnectOptions, RemoteBuildManager } from \"./RemoteBuildManager\"\n\ninterface TargetInfo {\n  name: string\n  arch: string\n  unpackedDirectory: string\n  outDir: string\n}\n\nconst errorCodes = new Set([\"ECONNREFUSED\", \"ECONNRESET\"])\n\nexport class RemoteBuilder {\n  private readonly toBuild = new Map<Arch, Array<TargetInfo>>()\n  private buildStarted = false\n\n  constructor(readonly packager: PlatformPackager<any>) {\n  }\n\n  scheduleBuild(target: Target, arch: Arch, unpackedDirectory: string) {\n    if (!isEnvTrue(process.env._REMOTE_BUILD) && this.packager.config.remoteBuild === false) {\n      throw new Error(\"Target is not supported on your OS and using of Electron Build Service is disabled (\\\"remoteBuild\\\" option)\")\n    }\n\n    let list = this.toBuild.get(arch)\n    if (list == null) {\n      list = []\n      this.toBuild.set(arch, list)\n    }\n\n    list.push({\n      name: target.name,\n      arch: Arch[arch],\n      unpackedDirectory,\n      outDir: target.outDir,\n    })\n  }\n\n  build(): Promise<any> {\n    if (this.buildStarted) {\n      return BluebirdPromise.resolve()\n    }\n\n    this.buildStarted = true\n\n    return BluebirdPromise.mapSeries(Array.from(this.toBuild.keys()), (arch: Arch) => {\n      return this._build(this.toBuild.get(arch)!!, this.packager)\n    })\n  }\n\n  // noinspection JSMethodCanBeStatic\n  private async _build(targets: Array<TargetInfo>, packager: PlatformPackager<any>): Promise<any> {\n    if (log.isDebugEnabled) {\n      log.debug({remoteTargets: JSON.stringify(targets, null, 2)}, \"remote building\")\n    }\n\n    const projectInfoManager = new ProjectInfoManager(packager.info)\n\n    let result: RemoteBuilderResponse | null = null\n    for (let attempt = 0; true; attempt++) {\n      const endpoint = await findBuildAgent()\n      // for now assume that all targets has the same outDir (correct for Linux)\n      const buildManager = new RemoteBuildManager(endpoint, projectInfoManager, targets[0].unpackedDirectory, targets[0].outDir, packager)\n      const setTimeoutPromise = promisify(setTimeout)\n      try {\n        result = await buildManager.build({\n          \"x-targets\": JSON.stringify(targets.map(it => {\n            return {\n              name: it.name,\n              arch: it.arch,\n              unpackedDirName: path.basename(it.unpackedDirectory),\n            }\n          })),\n          \"x-platform\": packager.platform.buildConfigurationKey,\n        })\n        break\n      }\n      catch (e) {\n        const errorCode: string = e.code\n        if (!errorCodes.has(errorCode) || attempt > 3) {\n          if (errorCode === \"ECONNREFUSED\") {\n            const error = new Error(`Cannot connect to electron build service ${endpoint}: ${e.message}`)\n            e.code = errorCode\n            throw error\n          }\n          else {\n            throw e\n          }\n        }\n\n        const waitTime = 4000 * (attempt + 1)\n        console.warn(`Attempt ${attempt + 1}: ${e.message}\\nWaiting ${waitTime / 1000}s...`)\n        await setTimeoutPromise(waitTime, \"wait\")\n      }\n    }\n\n    if (result != null && result.error != null) {\n      throw new Error(`Remote builder error (if you think that it is not your application misconfiguration issue, please file issue to https://github.com/electron-userland/electron-builder/issues):\\n\\n${result.error}`)\n    }\n  }\n}\n\nasync function findBuildAgent(): Promise<string> {\n  const result = process.env.ELECTRON_BUILD_SERVICE_ENDPOINT\n  if (result != null) {\n    log.debug({endpoint: result}, `endpoint is set explicitly`)\n    return result.startsWith(\"http\") ? result : `https://${result}`\n  }\n\n  const rawUrl = process.env.ELECTRON_BUILD_SERVICE_ROUTER_HOST || \"service.electron.build\"\n  // add random query param to prevent caching\n  const routerUrl = rawUrl.startsWith(\"http\") ? rawUrl : `https://${rawUrl}`\n  log.debug({routerUrl}, \"\")\n  const client = connect(routerUrl, getConnectOptions())\n  return await new BluebirdPromise<string>((resolve, reject) => {\n    client.on(\"socketError\", reject)\n    client.on(\"error\", reject)\n    client.setTimeout(10 * 1000, () => {\n      reject(new Error(\"Timeout\"))\n    })\n\n    const stream = client.request({\n      [constants.HTTP2_HEADER_PATH]: `/find-build-agent?c=${Date.now().toString(32)}`,\n      [constants.HTTP2_HEADER_METHOD]: constants.HTTP2_METHOD_GET,\n    })\n    stream.on(\"error\", reject)\n\n    stream.on(\"response\", headers => {\n      if (!checkStatus(headers[constants.HTTP2_HEADER_STATUS] as any, reject)) {\n        return\n      }\n\n      stream.setEncoding(\"utf8\")\n      let data = \"\"\n      stream.on(\"end\", () => {\n        try {\n          if (log.isDebugEnabled) {\n            log.debug({data}, \"remote build response\")\n          }\n          resolve(JSON.parse(data).endpoint)\n        }\n        catch (e) {\n          throw new Error(`Cannot parse response: ${data}`)\n        }\n      })\n      stream.on(\"data\", (chunk: string) => {\n        data += chunk\n      })\n    })\n  })\n    .finally(() => {\n      client.destroy()\n    })\n}\n\nexport interface RemoteBuilderResponse {\n  error?: string\n}"]}
