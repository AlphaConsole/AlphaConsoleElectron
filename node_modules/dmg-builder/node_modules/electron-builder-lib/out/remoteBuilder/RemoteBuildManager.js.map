{"version":3,"file":"RemoteBuildManager.js","sourceRoot":"","sources":["../../src/remoteBuilder/RemoteBuildManager.ts"],"names":[],"mappings":"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","sourcesContent":["import { path7za } from \"7zip-bin\"\nimport BluebirdPromise from \"bluebird-lst\"\nimport { Arch, isEnvTrue, log, spawn as _spawn } from \"builder-util\"\nimport { HttpError } from \"builder-util-runtime\"\nimport { spawn } from \"child_process\"\nimport { UploadTask } from \"electron-publish\"\nimport { outputFile } from \"fs-extra-p\"\nimport { ClientHttp2Session, ClientHttp2Stream, connect, constants, OutgoingHttpHeaders, SecureClientSessionOptions } from \"http2\"\nimport * as path from \"path\"\nimport { URL } from \"url\"\nimport { Target, TargetSpecificOptions } from \"../core\"\nimport { ArtifactCreated } from \"../packagerApi\"\nimport { PlatformPackager } from \"../platformPackager\"\nimport { getAria, getZstd } from \"../targets/tools\"\nimport { JsonStreamParser } from \"../util/JsonStreamParser\"\nimport { getTemplatePath } from \"../util/pathManager\"\nimport { DevTimer } from \"../util/timer\"\nimport { ProjectInfoManager } from \"./ProjectInfoManager\"\nimport { ELECTRON_BUILD_SERVICE_CA_CERT, ELECTRON_BUILD_SERVICE_LOCAL_CA_CERT } from \"./remote-builder-certs\"\nimport { RemoteBuilderResponse } from \"./RemoteBuilder\"\n\nconst {\n  HTTP2_HEADER_PATH,\n  HTTP2_METHOD_POST,\n  HTTP2_METHOD_GET,\n  HTTP2_HEADER_METHOD,\n  HTTP2_HEADER_CONTENT_TYPE,\n  HTTP2_HEADER_STATUS,\n  HTTP_STATUS_OK,\n  HTTP_STATUS_BAD_REQUEST\n} = constants\n\nconst isUseLocalCert = isEnvTrue(process.env.USE_ELECTRON_BUILD_SERVICE_LOCAL_CA)\n\nexport function getConnectOptions(): SecureClientSessionOptions {\n  const options: SecureClientSessionOptions = {}\n  const caCert = process.env.ELECTRON_BUILD_SERVICE_CA_CERT\n  if (caCert !== \"false\") {\n    if (isUseLocalCert) {\n      log.debug(null, \"local certificate authority is used\")\n    }\n    options.ca = caCert || (isUseLocalCert ? ELECTRON_BUILD_SERVICE_LOCAL_CA_CERT : ELECTRON_BUILD_SERVICE_CA_CERT)\n    // we cannot issue cert per IP because build agent can be started on demand (and for security reasons certificate authority is offline).\n    // Since own certificate authority is used, it is ok to skip server name verification.\n    options.checkServerIdentity = () => undefined\n  }\n  return options\n}\n\nexport class RemoteBuildManager {\n  private readonly client: ClientHttp2Session\n\n  private files: Array<ArtifactInfo> | null = null\n  private finishedStreamCount = 0\n\n  constructor(private readonly buildServiceEndpoint: string,\n              private readonly projectInfoManager: ProjectInfoManager,\n              private readonly unpackedDirectory: string,\n              private readonly outDir: string,\n              private readonly packager: PlatformPackager<any>) {\n    log.debug({endpoint: buildServiceEndpoint}, \"connect to remote build service\")\n    this.client = connect(buildServiceEndpoint, getConnectOptions())\n  }\n\n  build(customHeaders: OutgoingHttpHeaders): Promise<RemoteBuilderResponse | null> {\n    return new BluebirdPromise<RemoteBuilderResponse | null>((resolve, reject) => {\n      const client = this.client\n      client.on(\"socketError\", reject)\n      client.on(\"error\", reject)\n\n      let handled = false\n      client.once(\"close\", () => {\n        if (!handled) {\n          reject(new Error(\"Closed unexpectedly\"))\n        }\n      })\n      client.once(\"timeout\", () => {\n        reject(new Error(\"Timeout\"))\n      })\n\n      this.doBuild(customHeaders)\n        .then(result => {\n          handled = true\n          resolve(result)\n        })\n        .catch(reject)\n    })\n      .finally(() => {\n        this.client.destroy()\n      })\n  }\n\n  private async doBuild(customHeaders: OutgoingHttpHeaders): Promise<RemoteBuilderResponse | null> {\n    const id = await this.upload(customHeaders)\n    const result = await this.listenEvents(id)\n    await new BluebirdPromise((resolve, reject) => {\n      const stream = this.client.request({\n        [HTTP2_HEADER_PATH]: `/v1/complete/${id}`,\n        [HTTP2_HEADER_METHOD]: HTTP2_METHOD_GET,\n      })\n      stream.on(\"error\", reject)\n      stream.on(\"response\", headers => {\n        try {\n          const status = headers[HTTP2_HEADER_STATUS] as any\n          if (!checkStatus(status, reject)) {\n            log.warn(`Not critical server error: ${status}`)\n          }\n        }\n        finally {\n          resolve()\n        }\n      })\n    })\n\n    return result\n  }\n\n  private upload(customHeaders: OutgoingHttpHeaders): Promise<string> {\n    return new BluebirdPromise((resolve, reject) => {\n      const zstdCompressionLevel = getZstdCompressionLevel(this.buildServiceEndpoint)\n\n      const stream = this.client.request({\n        [HTTP2_HEADER_PATH]: \"/v1/upload\",\n        [HTTP2_HEADER_METHOD]: HTTP2_METHOD_POST,\n        [HTTP2_HEADER_CONTENT_TYPE]: \"application/octet-stream\",\n        ...customHeaders,\n        // only for stats purpose, not required for build\n        \"x-zstd-compression-level\": zstdCompressionLevel,\n      })\n      stream.on(\"error\", reject)\n      // this.handleStreamEvent(resolve, reject)\n      this.uploadUnpackedAppArchive(stream, zstdCompressionLevel, reject)\n\n      stream.on(\"response\", headers => {\n        const status: number = headers[HTTP2_HEADER_STATUS] as any\n        if (status !== HTTP_STATUS_OK && status !== HTTP_STATUS_BAD_REQUEST) {\n          reject(new HttpError(status))\n          return\n        }\n\n        let data = \"\"\n        stream.setEncoding(\"utf8\")\n        stream.on(\"data\", (chunk: string) => {\n          data += chunk\n        })\n        stream.on(\"end\", () => {\n          const result = data.length === 0 ? {} : JSON.parse(data)\n          log.debug({result: JSON.stringify(result, null, 2)}, `remote builder result`)\n\n          if (status === HTTP_STATUS_BAD_REQUEST) {\n            reject(new HttpError(status, JSON.stringify(result, null, 2)))\n            return\n          }\n\n          const id = result.id\n          if (id == null) {\n            reject(new Error(\"Server didn't return id\"))\n            return\n          }\n\n          // cannot connect immediately because channel status is not yet created\n          resolve(id)\n        })\n      })\n    })\n  }\n\n  private listenEvents(id: string): Promise<RemoteBuilderResponse | null> {\n    return new BluebirdPromise((resolve, reject) => {\n      const stream = this.client.request({\n        [HTTP2_HEADER_PATH]: `/v1/status/${id}`,\n        [HTTP2_HEADER_METHOD]: HTTP2_METHOD_GET,\n      })\n      stream.on(\"error\", reject)\n      stream.on(\"response\", headers => {\n        if (!checkStatus(headers[HTTP2_HEADER_STATUS] as any, reject)) {\n          return\n        }\n\n        stream.setEncoding(\"utf8\")\n        const eventSource = new JsonStreamParser(data => {\n          if (log.isDebugEnabled) {\n            log.debug({event: JSON.stringify(data, null, 2)}, \"remote builder event\")\n          }\n\n          const error = data.error\n          if (error != null) {\n            stream.destroy()\n            resolve(data)\n            return\n          }\n\n          if (data.state != null) {\n            let message = data.state\n            switch (data.state) {\n              case \"added\":\n                message = \"job added to build queue\"\n                break\n\n              case \"started\":\n                message = \"job started\"\n                break\n            }\n            log.info({status: message}, \"remote building\")\n            return\n          }\n\n          if (!(\"files\" in data)) {\n            log.warn(`Unknown builder event: ${JSON.stringify(data)}`)\n            return\n          }\n\n          // close, no more events are expected\n          stream.destroy()\n\n          this.files = data.files\n          for (const artifact of this.files!!) {\n            log.info({file: artifact.file}, `downloading remote build artifact`)\n            this.downloadFile(id, artifact, resolve, reject)\n          }\n        })\n        stream.on(\"data\", (chunk: string) => eventSource.parseIncoming(chunk))\n      })\n    })\n  }\n\n  private downloadFile(id: string, artifact: ArtifactInfo, resolve: (result: RemoteBuilderResponse | null) => void, reject: (error: Error) => void) {\n    const downloadTimer = new DevTimer(\"compress and upload\")\n    const localFile = path.join(this.outDir, artifact.file)\n    const artifactCreatedEvent = this.artifactInfoToArtifactCreatedEvent(artifact, localFile)\n    // use URL to encode path properly (critical for filenames with unicode symbols, e.g. \"boo-Test App ßW\")\n    const fileUrlPath = `/v1/download${new URL(`f:/${id}/${artifact.file}`).pathname}`\n\n    const fileWritten = () => {\n      this.finishedStreamCount++\n      log.info({time: downloadTimer.endAndGet(), file: artifact.file}, \"downloaded remote build artifact\")\n      log.debug({file: localFile}, \"saved remote build artifact\")\n\n      // PublishManager uses outDir and options, real (the same as for local build) values must be used\n      this.projectInfoManager.packager.dispatchArtifactCreated(artifactCreatedEvent)\n\n      if (this.files != null && this.finishedStreamCount >= this.files.length) {\n        resolve(null)\n      }\n    }\n\n    const isShort = artifact.file.endsWith(\".yml\") || artifact.file.endsWith(\".json\")\n    if (!isShort) {\n      // --ca-certificate This option is only available when aria2 was compiled against GnuTLS or OpenSSL. WinTLS and AppleTLS will always use the system certificate store. Instead of `--ca-certificate install the certificate in that store.\n      // so, we have to use --check-certificate false\n      getAria()\n        .then(aria2c => {\n          return _spawn(aria2c, [\n            \"--max-connection-per-server=4\",\n            \"--min-split-size=5M\",\n            \"--retry-wait=3\",\n            `--ca-certificate=${getTemplatePath(isUseLocalCert ? \"local-ca.crt\" : \"ca.crt\")}`,\n            \"--check-certificate=false\",\n            \"--min-tls-version=TLSv1.2\",\n            \"--console-log-level=warn\",\n            \"--download-result=full\",\n            `--dir=${this.outDir}`,\n            `${this.buildServiceEndpoint}${fileUrlPath}`,\n          ], {\n            cwd: this.outDir,\n            stdio: [\"ignore\", \"inherit\", \"inherit\"],\n          })\n        })\n        .then(fileWritten)\n        .catch(reject)\n      return\n    }\n\n    const stream = this.client.request({\n      [HTTP2_HEADER_PATH]: fileUrlPath,\n      [HTTP2_HEADER_METHOD]: HTTP2_METHOD_GET,\n    })\n    stream.on(\"error\", reject)\n\n    stream.on(\"response\", headers => {\n      if (!checkStatus(headers[HTTP2_HEADER_STATUS] as any, reject)) {\n        return\n      }\n\n      const buffers: Array<Buffer> = []\n      stream.on(\"end\", () => {\n        const fileContent = buffers.length === 1 ? buffers[0] : Buffer.concat(buffers)\n        artifactCreatedEvent.fileContent = fileContent\n        outputFile(localFile, fileContent)\n          .then(fileWritten)\n          .catch(reject)\n      })\n      stream.on(\"data\", (chunk: Buffer) => {\n        buffers.push(chunk)\n      })\n    })\n  }\n\n  private artifactInfoToArtifactCreatedEvent(artifact: ArtifactInfo, localFile: string): ArtifactCreated {\n    const target = artifact.target\n    // noinspection SpellCheckingInspection\n    return {\n      ...artifact,\n      file: localFile,\n      target: target == null ? null : new FakeTarget(target, this.outDir, (this.packager.config as any)[target]),\n      packager: this.packager,\n    }\n  }\n\n  // compress and upload in the same time, directly to remote without intermediate local file\n  private uploadUnpackedAppArchive(stream: ClientHttp2Stream, zstdCompressionLevel: string, reject: (error: Error) => void) {\n    const packager = this.projectInfoManager.packager\n    const buildResourcesDir = packager.buildResourcesDir\n    if (buildResourcesDir === packager.projectDir) {\n      reject(new Error(`Build resources dir equals to project dir and so, not sent to remote build agent. It will lead to incorrect results.\\nPlease set \"directories.buildResources\" to separate dir or leave default (\"build\" directory in the project root)`))\n      return\n    }\n\n    BluebirdPromise.all([this.projectInfoManager.infoFile.value, getZstd()])\n      .then(results => {\n        const infoFile = results[0]\n        log.info(\"compressing and uploading to remote builder\")\n        const compressAndUploadTimer = new DevTimer(\"compress and upload\")\n        // noinspection SpellCheckingInspection\n        const tarProcess = spawn(path7za, [\n          \"a\", \"dummy\", \"-ttar\", \"-so\",\n          this.unpackedDirectory,\n          infoFile,\n          buildResourcesDir,\n        ], {\n          stdio: [\"pipe\", \"pipe\", process.stderr],\n        })\n        tarProcess.stdout.on(\"error\", reject)\n\n        const zstdProcess = spawn(results[1], [`-${zstdCompressionLevel}`, \"--long\"], {\n          stdio: [\"pipe\", \"pipe\", process.stderr],\n        })\n        zstdProcess.on(\"error\", reject)\n        tarProcess.stdout.pipe(zstdProcess.stdin)\n        zstdProcess.stdout.pipe(stream)\n\n        zstdProcess.stdout.on(\"end\", () => {\n          log.info({time: compressAndUploadTimer.endAndGet()}, \"uploaded to remote builder\")\n        })\n      })\n      .catch(reject)\n  }\n}\n\nfunction getZstdCompressionLevel(endpoint: string): string {\n  const result = process.env.ELECTRON_BUILD_SERVICE_ZSTD_COMPRESSION\n  if (result != null) {\n    return result\n  }\n  // 18 - 40s\n  // 17 - 30s\n  // 16 - 20s\n  return endpoint.startsWith(\"https://127.0.0.1:\") || endpoint.startsWith(\"https://localhost:\") || endpoint.startsWith(\"[::1]:\") ? \"3\" : \"16\"\n}\n\nexport function checkStatus(status: number, reject: (error: Error) => void) {\n  if (status === HTTP_STATUS_OK) {\n    return true\n  }\n  else {\n    reject(new HttpError(status))\n    return false\n  }\n}\n\nclass FakeTarget extends Target {\n  constructor(name: string, readonly outDir: string, readonly options: TargetSpecificOptions | null | undefined) {\n    super(name)\n  }\n\n  async build(appOutDir: string, arch: Arch) {\n    // no build\n  }\n}\n\nexport interface ArtifactInfo extends UploadTask {\n  target: string | null\n\n  readonly isWriteUpdateInfo?: boolean\n  readonly updateInfo?: any\n}"]}
