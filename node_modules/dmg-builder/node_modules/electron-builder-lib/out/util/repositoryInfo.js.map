{"version":3,"file":"repositoryInfo.js","sourceRoot":"","sources":["../../src/util/repositoryInfo.ts"],"names":[],"mappings":"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","sourcesContent":["import { orNullIfFileNotExist } from \"builder-util/out/promise\"\nimport { readFile } from \"fs-extra-p\"\nimport { fromUrl, Info } from \"hosted-git-info\"\nimport * as path from \"path\"\nimport { SourceRepositoryInfo } from \"../core\"\nimport { Metadata, RepositoryInfo } from \"..\"\n\nexport function getRepositoryInfo(projectDir: string, metadata?: Metadata, devMetadata?: Metadata | null): Promise<SourceRepositoryInfo | null> {\n  return _getInfo(projectDir, (devMetadata == null ? null : devMetadata.repository) || (metadata == null ? null : metadata.repository))\n}\n\nasync function getGitUrlFromGitConfig(projectDir: string): Promise<string | null> {\n  const data = await orNullIfFileNotExist(readFile(path.join(projectDir, \".git\", \"config\"), \"utf8\"))\n  if (data == null) {\n    return null\n  }\n\n  const conf = data.split(/\\r?\\n/)\n  const i = conf.indexOf('[remote \"origin\"]')\n  if (i !== -1) {\n    let u = conf[i + 1]\n    if (!u.match(/^\\s*url =/)) {\n      u = conf[i + 2]\n    }\n\n    if (u.match(/^\\s*url =/)) {\n      return u.replace(/^\\s*url = /, \"\")\n    }\n  }\n  return null\n}\n\nasync function _getInfo(projectDir: string, repo?: RepositoryInfo | string | null): Promise<SourceRepositoryInfo | null> {\n  if (repo != null) {\n    return parseRepositoryUrl(typeof repo === \"string\" ? repo : repo.url)\n  }\n\n  const slug = process.env.TRAVIS_REPO_SLUG || process.env.APPVEYOR_REPO_NAME\n  if (slug != null) {\n    const splitted = slug.split(\"/\")\n    return {\n      user: splitted[0],\n      project: splitted[1],\n    }\n  }\n\n  const user = process.env.CIRCLE_PROJECT_USERNAME\n  const project = process.env.CIRCLE_PROJECT_REPONAME\n  if (user != null && project != null) {\n    return {\n      user,\n      project,\n    }\n  }\n\n  const url = await getGitUrlFromGitConfig(projectDir)\n  return url == null ? null : parseRepositoryUrl(url)\n}\n\nfunction parseRepositoryUrl(url: string): Info {\n  const info: any = fromUrl(url)\n  if (info != null) {\n    delete info.protocols\n    delete info.treepath\n    delete info.filetemplate\n    delete info.bugstemplate\n    delete info.gittemplate\n    delete info.tarballtemplate\n    delete info.sshtemplate\n    delete info.sshurltemplate\n    delete info.browsetemplate\n    delete info.docstemplate\n    delete info.httpstemplate\n    delete info.shortcuttemplate\n    delete info.pathtemplate\n    delete info.pathmatch\n    delete info.protocols_re\n    delete info.committish\n    delete info.default\n    delete info.opts\n  }\n  return info\n}"]}
