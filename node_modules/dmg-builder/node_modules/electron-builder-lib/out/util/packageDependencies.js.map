{"version":3,"file":"packageDependencies.js","sourceRoot":"","sources":["../../src/util/packageDependencies.ts"],"names":[],"mappings":"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","sourcesContent":["import BluebirdPromise from \"bluebird-lst\"\nimport { isEnvTrue, log } from \"builder-util\"\nimport { CONCURRENCY, statOrNull } from \"builder-util/out/fs\"\nimport { orNullIfFileNotExist } from \"builder-util/out/promise\"\nimport { lstat, readdir, readFile, realpath, Stats } from \"fs-extra-p\"\nimport { Lazy } from \"lazy-val\"\nimport * as path from \"path\"\n\nexport interface Dependency {\n  name: string\n  version: string\n  path: string\n  extraneous: boolean\n  optional: boolean\n\n  dependencies: Map<string, Dependency> | null\n  directDependencyNames: Array<string> | null\n  peerDependencies: { [key: string]: any } | null\n  optionalDependencies: { [key: string]: any } | null\n\n  realName: string\n  link?: string\n\n  parent?: Dependency\n\n  // only if link\n  stat?: Stats\n}\n\nconst knownAlwaysIgnoredDevDeps = new Set([\n  \"electron-builder-tslint-config\", \"electron-download\",\n  \"electron-forge\", \"electron-packager\", \"electron-compilers\",\n  \"prebuild-install\", \"nan\",\n  \"electron-webpack\", \"electron-webpack-ts\", \"electron-webpack-vue\",\n  \"@types\",\n])\n\nexport function createLazyProductionDeps(projectDir: string) {\n  return new Lazy(() => getProductionDependencies(projectDir))\n}\n\n/** @internal */\nexport async function getProductionDependencies(folder: string): Promise<Array<Dependency>> {\n  const sorted: Array<Dependency> = []\n  computeSortedPaths(await computeDependencies(folder), sorted, false)\n  return sorted\n}\n\nfunction computeDependencies(folder: string): Promise<Dependency> {\n  return new Collector().collect(folder)\n}\n\nconst ignoredProperties = new Set([\"description\", \"author\", \"bugs\", \"engines\", \"repository\", \"build\", \"main\", \"license\", \"homepage\", \"scripts\", \"maintainers\", \"contributors\", \"keywords\", \"devDependencies\", \"files\", \"typings\", \"types\"])\n\nfunction readJson(file: string) {\n  return readFile(file, \"utf-8\")\n    .then(it => JSON.parse(it, (key, value) => ignoredProperties.has(key) ? undefined : value))\n}\n\nfunction computeSortedPaths(parent: Dependency, result: Array<Dependency>, isExtraneous: boolean) {\n  const dependencies = parent.dependencies\n  if (dependencies == null) {\n    return\n  }\n\n  for (const dep of dependencies.values()) {\n    if (dep.extraneous === isExtraneous) {\n      result.push(dep)\n      computeSortedPaths(dep, result, isExtraneous)\n    }\n  }\n}\n\nclass Collector {\n  readonly pathToMetadata = new Map<string, Dependency>()\n  private unresolved = new Map<string, boolean>()\n\n  async collect(dir: string) {\n    const rootDependency: Dependency = await readJson(path.join(dir, \"package.json\"))\n    await this.readInstalled(path.join(dir, \"node_modules\"), rootDependency, rootDependency.name)\n    this.unmarkExtraneous(rootDependency)\n\n    if (this.unresolved.size > 0) {\n      log.debug({unresolved: Array.from(this.unresolved.keys()).join(\", \")}, \"Unresolved dependencies after first round\")\n      await this.resolveUnresolvedHoisted(rootDependency, dir)\n    }\n    return rootDependency\n  }\n\n  private async resolveUnresolvedHoisted(rootDependency: Dependency, dir: string) {\n    let nameToMetadata = rootDependency.dependencies\n    if (nameToMetadata == null) {\n      rootDependency.dependencies = new Map<string, Dependency>()\n      nameToMetadata = rootDependency.dependencies\n    }\n\n    let parentDir = dir\n    do {\n      parentDir = path.dirname(parentDir)\n      if (parentDir === \"\" || parentDir.endsWith(\"/\") || parentDir.endsWith(\"\\\\\")) {\n        // https://github.com/electron-userland/electron-builder/issues/2220\n        const list = Array.from(this.unresolved.keys()).filter(it => !this.unresolved.get(it))\n        if (list.length !== 0) {\n          const message = `Unresolved node modules: ${list.join(\", \")}`\n          if (isEnvTrue(process.env.ELECTRON_BUILDER_ALLOW_UNRESOLVED_DEPENDENCIES)) {\n            log.warn(message)\n          }\n          else {\n            throw new Error(message)\n          }\n        }\n        break\n      }\n\n      const parentNodeModulesDir = parentDir + path.sep + \"node_modules\"\n      const dirStat = await statOrNull(parentNodeModulesDir)\n      if (dirStat == null || !dirStat.isDirectory()) {\n        continue\n      }\n\n      const unresolved = Array.from(this.unresolved.keys())\n      this.unresolved.clear()\n\n      const resolved = await BluebirdPromise.map(unresolved, it => {\n        return this.readChildPackage(it, parentNodeModulesDir, rootDependency)\n          .catch(e => {\n            if ((e as any).code === \"ENOENT\") {\n              return null\n            }\n            else {\n              throw e\n            }\n          })\n      }, CONCURRENCY)\n      for (const dep of resolved) {\n        if (dep != null) {\n          nameToMetadata.set(dep.realName, dep)\n        }\n      }\n\n      this.unmarkExtraneous(rootDependency)\n    }\n    while (this.unresolved.size > 0)\n  }\n\n  private async readInstalled(nodeModulesDir: string, dependency: Dependency, name: string): Promise<void> {\n    dependency.realName = name\n    dependency.directDependencyNames = dependency.dependencies == null ? null : Object.keys(dependency.dependencies)\n\n    // mark as extraneous at this point.\n    // this will be un-marked in unmarkExtraneous, where we mark as not-extraneous everything that is required in some way from the root object.\n    dependency.extraneous = true\n    dependency.optional = true\n\n    if (dependency.dependencies == null && dependency.optionalDependencies == null) {\n      // package has only dev or peer dependencies - no need to check child node_module\n      dependency.dependencies = null\n      return\n    }\n\n    const childModules = await readNodeModulesDir(nodeModulesDir)\n    if (childModules == null) {\n      dependency.dependencies = null\n      return\n    }\n\n    const deps = await BluebirdPromise.map(childModules, it => this.readChildPackage(it, nodeModulesDir, dependency), CONCURRENCY)\n    if (deps.length === 0) {\n      dependency.dependencies = null\n      return\n    }\n\n    const nameToMetadata = new Map<string, Dependency>()\n    for (const dep of deps) {\n      if (dep != null) {\n        nameToMetadata.set(dep.realName, dep)\n      }\n    }\n    dependency.dependencies = nameToMetadata\n  }\n\n  private async readChildPackage(name: string, nodeModulesDir: string, parent: Dependency): Promise<Dependency | null> {\n    const rawDir = path.join(nodeModulesDir, name)\n    let dir: string | null = rawDir\n    const stat = await lstat(dir)\n    const isSymbolicLink = stat.isSymbolicLink()\n    if (isSymbolicLink) {\n      dir = await orNullIfFileNotExist(realpath(dir))\n      if (dir == null) {\n        log.debug({path: rawDir}, \"broken symlink\")\n        return null\n      }\n    }\n\n    const processed = this.pathToMetadata.get(dir)\n    if (processed != null) {\n      return processed\n    }\n\n    const metadata: Dependency = await orNullIfFileNotExist(readJson(path.join(dir, \"package.json\")))\n    if (metadata == null) {\n      return null\n    }\n\n    if (isSymbolicLink) {\n      metadata.link = dir\n      metadata.stat = stat\n    }\n    else {\n      metadata.parent = parent\n    }\n\n    metadata.path = rawDir\n\n    // do not add root project to result\n    this.pathToMetadata.set(dir, metadata)\n\n    await this.readInstalled(dir + path.sep + \"node_modules\", metadata, name)\n    return metadata\n  }\n\n  private unmark(deps: Iterable<string>, obj: Dependency, unsetOptional: boolean, isOptional: boolean) {\n    for (const name of deps) {\n      const dep = this.findDep(obj, name, isOptional)\n      if (dep != null) {\n        if (unsetOptional) {\n          dep.optional = false\n        }\n        if (dep.extraneous) {\n          this.unmarkExtraneous(dep)\n        }\n      }\n    }\n  }\n\n  private unmarkExtraneous(obj: Dependency) {\n    // Mark all non-required deps as extraneous.\n    // start from the root object and mark as non-extraneous all modules\n    // that haven't been previously flagged as extraneous then propagate to all their dependencies\n\n    obj.extraneous = false\n\n    if (obj.directDependencyNames != null) {\n      this.unmark(obj.directDependencyNames, obj, true, false)\n    }\n\n    if (obj.peerDependencies != null) {\n      this.unmark(Object.keys(obj.peerDependencies), obj, true, false)\n    }\n\n    if (obj.optionalDependencies != null) {\n      this.unmark(Object.keys(obj.optionalDependencies), obj, false, true)\n    }\n  }\n\n  // find the one that will actually be loaded by require() so we can make sure it's valid\n  private findDep(obj: Dependency, name: string, isOptional: boolean) {\n    if (isIgnoredDep(name)) {\n      return null\n    }\n\n    let r: Dependency | null | undefined = obj\n    let found = null\n    while (r != null && found == null) {\n      // if r is a valid choice, then use that.\n      // kinda weird if a pkg depends on itself, but after the first iteration of this loop, it indicates a dep cycle.\n      found = r.dependencies == null ? null : r.dependencies.get(name)\n      if (found == null && r.realName === name) {\n        found = r\n      }\n      r = r.link == null ? r.parent : null\n    }\n\n    if (found == null) {\n      this.unresolved.set(name, isOptional)\n    }\n    return found\n  }\n}\n\nfunction isIgnoredDep(name: string) {\n  return knownAlwaysIgnoredDevDeps.has(name) || name.startsWith(\"@types/\")\n}\n\nasync function readNodeModulesDir(dir: string): Promise<Array<string> | null> {\n  let files: Array<string>\n  try {\n    files = (await readdir(dir)).filter(it => !it.startsWith(\".\") && !knownAlwaysIgnoredDevDeps.has(it))\n  }\n  catch (e) {\n    // error indicates that nothing is installed here\n    return null\n  }\n\n  files.sort()\n\n  const scopes = files.filter(it => it.startsWith(\"@\"))\n  if (scopes.length === 0) {\n    return files\n  }\n\n  const result = files.filter(it => !it.startsWith(\"@\"))\n  const scopeFileList = await BluebirdPromise.map(scopes, it => readdir(path.join(dir, it)))\n  for (let i = 0; i < scopes.length; i++) {\n    const list = scopeFileList[i]\n    list.sort()\n    for (const file of list) {\n      if (!file.startsWith(\".\")) {\n        result.push(`${scopes[i]}/${file}`)\n      }\n    }\n  }\n\n  return result\n}\n"]}
