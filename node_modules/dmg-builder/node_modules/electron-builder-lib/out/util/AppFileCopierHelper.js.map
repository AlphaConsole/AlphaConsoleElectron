{"version":3,"file":"AppFileCopierHelper.js","sourceRoot":"","sources":["../../src/util/AppFileCopierHelper.ts"],"names":[],"mappings":"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","sourcesContent":["import BluebirdPromise from \"bluebird-lst\"\nimport { log } from \"builder-util\"\nimport { CONCURRENCY, FileTransformer, statOrNull, walk } from \"builder-util/out/fs\"\nimport { ensureDir, Stats } from \"fs-extra-p\"\nimport * as path from \"path\"\nimport { FileMatcher } from \"../fileMatcher\"\nimport { createElectronCompilerHost } from \"../fileTransformer\"\nimport { Packager } from \"../packager\"\nimport { AppFileWalker } from \"./AppFileWalker\"\nimport { NodeModuleCopyHelper } from \"./NodeModuleCopyHelper\"\nimport { Dependency } from \"./packageDependencies\"\n\n/** @internal */\nexport const NODE_MODULES_PATTERN = `${path.sep}node_modules${path.sep}`\n\n// os path separator is used\nexport interface ResolvedFileSet {\n  src: string\n  destination: string\n\n  files: Array<string>\n  metadata: Map<string, Stats>\n  transformedFiles?: Map<number, string | Buffer> | null\n}\n\nexport async function computeFileSets(matchers: Array<FileMatcher>, transformer: FileTransformer, packager: Packager, isElectronCompile: boolean): Promise<Array<ResolvedFileSet>> {\n  const fileSets: Array<ResolvedFileSet> = []\n  let hoistedNodeModuleFileSets: Array<ResolvedFileSet> | null = null\n  let isHoistedNodeModuleChecked = false\n  for (const matcher of matchers) {\n    const fileWalker = new AppFileWalker(matcher, packager)\n\n    const fromStat = await statOrNull(matcher.from)\n    if (fromStat == null) {\n      log.debug({directory: matcher.from, reason: \"doesn't exist\"}, `skipped copying`)\n      continue\n    }\n\n    const files = await walk(matcher.from, fileWalker.filter, fileWalker)\n    const metadata = fileWalker.metadata\n\n    // https://github.com/electron-userland/electron-builder/issues/2205 Support for hoisted node_modules (lerna + yarn workspaces)\n    // if no node_modules in the app dir, it means that probably dependencies are hoisted\n    // check that main node_modules doesn't exist in addition to isNodeModulesHandled because isNodeModulesHandled will be false if node_modules dir is ignored by filter\n    // here isNodeModulesHandled is required only because of performance reasons (avoid stat call)\n    if (!isHoistedNodeModuleChecked && matcher.from === packager.appDir && !fileWalker.isNodeModulesHandled) {\n      isHoistedNodeModuleChecked = true\n      if ((await statOrNull(path.join(packager.appDir, \"node_modules\"))) == null) {\n        // in the prepacked mode no package.json\n        const packageJsonStat = await statOrNull(path.join(packager.appDir, \"package.json\"))\n        if (packageJsonStat != null && packageJsonStat.isFile()) {\n          hoistedNodeModuleFileSets = await copyHoistedNodeModules(packager, matcher)\n        }\n      }\n    }\n\n    const transformedFiles = new Map<number, string | Buffer>()\n    await BluebirdPromise.filter(files, (it, index) => {\n      const fileStat = metadata.get(it)\n      if (fileStat == null || !fileStat.isFile()) {\n        return false\n      }\n\n      const transformedValue = transformer(it)\n      if (transformedValue == null) {\n        return false\n      }\n\n      if (typeof transformedValue === \"object\" && \"then\" in transformedValue) {\n        return (transformedValue as BluebirdPromise<any>)\n          .then(it => {\n            if (it != null) {\n              transformedFiles.set(index, it)\n            }\n            return false\n          })\n      }\n      transformedFiles.set(index, transformedValue as string | Buffer)\n      return false\n    }, CONCURRENCY)\n\n    fileSets.push({src: matcher.from, files, metadata, transformedFiles, destination: matcher.to})\n  }\n\n  if (isElectronCompile) {\n    // cache files should be first (better IO)\n    fileSets.unshift(await compileUsingElectronCompile(fileSets[0], packager))\n  }\n  if (hoistedNodeModuleFileSets != null) {\n    return fileSets.concat(hoistedNodeModuleFileSets)\n  }\n  return fileSets\n}\n\nasync function copyHoistedNodeModules(packager: Packager, mainMatcher: FileMatcher): Promise<Array<ResolvedFileSet>> {\n  const productionDeps = await packager.productionDeps.value\n  const rootPathToCopier = new Map<string, Array<Dependency>>()\n  for (const dep of productionDeps) {\n    const root = dep.path.substring(0, dep.path.indexOf(NODE_MODULES_PATTERN))\n    let list = rootPathToCopier.get(root)\n    if (list == null) {\n      list = []\n      rootPathToCopier.set(root, list)\n    }\n    list.push(dep)\n  }\n\n  // mapSeries instead of map because copyNodeModules is concurrent and so, no need to increase queue/pressure\n  return await BluebirdPromise.mapSeries(rootPathToCopier.keys(), async source => {\n    // use main matcher patterns, so, user can exclude some files in such hoisted node modules\n    const matcher = new FileMatcher(source, mainMatcher.to, mainMatcher.macroExpander, mainMatcher.patterns)\n    const copier = new NodeModuleCopyHelper(matcher, packager)\n    const files = await copier.collectNodeModules(rootPathToCopier.get(source)!!)\n    return {src: matcher.from, destination: matcher.to, files, metadata: copier.metadata}\n  })\n}\n\nconst BOWER_COMPONENTS_PATTERN = `${path.sep}bower_components${path.sep}`\n/** @internal */\nexport const ELECTRON_COMPILE_SHIM_FILENAME = \"__shim.js\"\n\nasync function compileUsingElectronCompile(mainFileSet: ResolvedFileSet, packager: Packager): Promise<ResolvedFileSet> {\n  log.info(\"compiling using electron-compile\")\n\n  const electronCompileCache = await packager.tempDirManager.getTempDir({prefix: \"electron-compile-cache\"})\n  const cacheDir = path.join(electronCompileCache, \".cache\")\n  // clear and create cache dir\n  await ensureDir(cacheDir)\n  const compilerHost = await createElectronCompilerHost(mainFileSet.src, cacheDir)\n  const nextSlashIndex = mainFileSet.src.length + 1\n  // pre-compute electron-compile to cache dir - we need to process only subdirectories, not direct files of app dir\n  await BluebirdPromise.map(mainFileSet.files, file => {\n    if (file.includes(NODE_MODULES_PATTERN) || file.includes(BOWER_COMPONENTS_PATTERN)\n      || !file.includes(path.sep, nextSlashIndex) // ignore not root files\n      || !mainFileSet.metadata.get(file)!.isFile()) {\n      return null\n    }\n    return compilerHost.compile(file)\n      .then(() => null)\n  }, CONCURRENCY)\n\n  await compilerHost.saveConfiguration()\n\n  const metadata = new Map<string, Stats>()\n  const cacheFiles = await walk(cacheDir, file => !file.startsWith(\".\"), {\n    consume: (file, fileStat) => {\n      if (fileStat.isFile()) {\n        metadata.set(file, fileStat)\n      }\n      return null\n    }\n  })\n\n  // add shim\n  const shimPath = `${mainFileSet.src}${path.sep}${ELECTRON_COMPILE_SHIM_FILENAME}`\n  mainFileSet.files.push(shimPath)\n  mainFileSet.metadata.set(shimPath, {isFile: () => true, isDirectory: () => false, isSymbolicLink: () => false} as any)\n  if (mainFileSet.transformedFiles == null) {\n    mainFileSet.transformedFiles = new Map()\n  }\n  mainFileSet.transformedFiles.set(mainFileSet.files.length - 1, `\n'use strict';\nrequire('electron-compile').init(__dirname, require('path').resolve(__dirname, '${packager.metadata.main || \"index\"}'), true);\n`)\n  return {src: electronCompileCache, files: cacheFiles, metadata, destination: mainFileSet.destination}\n}\n\n// sometimes, destination may not contain path separator in the end (path to folder), but the src does. So let's ensure paths have path separators in the end\nexport function ensureEndSlash(s: string) {\n  return s === \"\" || s.endsWith(path.sep) ? s : (s + path.sep)\n}\n"]}
