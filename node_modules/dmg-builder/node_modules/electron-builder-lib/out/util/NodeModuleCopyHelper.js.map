{"version":3,"file":"NodeModuleCopyHelper.js","sourceRoot":"","sources":["../../src/util/NodeModuleCopyHelper.ts"],"names":[],"mappings":"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","sourcesContent":["import BluebirdPromise from \"bluebird-lst\"\nimport { CONCURRENCY, Filter } from \"builder-util/out/fs\"\nimport { lstat, readdir, readlink, stat, Stats } from \"fs-extra-p\"\nimport * as path from \"path\"\nimport { excludedNames, FileMatcher } from \"../fileMatcher\"\nimport { Packager } from \"../packager\"\nimport { Dependency } from \"./packageDependencies\"\n\nconst excludedFiles = new Set([\".DS_Store\", \"node_modules\" /* already in the queue */, \"CHANGELOG.md\", \"ChangeLog\", \"changelog.md\", \"binding.gyp\", \".npmignore\"].concat(excludedNames.split(\",\")))\nconst topLevelExcludedFiles = new Set([\"karma.conf.js\", \".coveralls.yml\", \"README.md\", \"readme.markdown\", \"README\", \"readme.md\", \"readme\", \"test\", \"__tests__\", \"tests\", \"powered-test\", \"example\", \"examples\"])\n\n/** @internal */\nexport class NodeModuleCopyHelper {\n  readonly metadata = new Map<string, Stats>()\n  readonly filter: Filter\n\n  constructor(private readonly matcher: FileMatcher, protected readonly packager: Packager) {\n    this.filter = matcher.createFilter()\n  }\n\n  protected handleFile(file: string, fileStat: Stats): Promise<Stats | null> | null {\n    if (!fileStat.isSymbolicLink()) {\n      return null\n    }\n\n    return readlink(file)\n      .then((linkTarget): any => {\n        // http://unix.stackexchange.com/questions/105637/is-symlinks-target-relative-to-the-destinations-parent-directory-and-if-so-wh\n        return this.handleSymlink(fileStat, file, path.resolve(path.dirname(file), linkTarget))\n      })\n  }\n\n  protected handleSymlink(fileStat: Stats, file: string, linkTarget: string): Promise<Stats> | null {\n    const link = path.relative(this.matcher.from, linkTarget)\n    if (link.startsWith(\"..\")) {\n      // outside of project, linked module (https://github.com/electron-userland/electron-builder/issues/675)\n      return stat(linkTarget)\n        .then(targetFileStat => {\n          this.metadata.set(file, targetFileStat)\n          return targetFileStat\n        })\n    }\n    else {\n      (fileStat as any).relativeLink = link\n    }\n    return null\n  }\n\n  async collectNodeModules(list: Array<Dependency>): Promise<Array<string>> {\n    const filter = this.filter\n    const metadata = this.metadata\n\n    const isIncludePdb = this.packager.config.includePdb === true\n\n    const result: Array<string> = []\n    const queue: Array<string> = []\n    for (const dep of list) {\n      queue.length = 1\n      queue[0] = dep.path\n\n      if (dep.link != null) {\n        this.metadata.set(dep.path, dep.stat!)\n        const r = this.handleSymlink(dep.stat!, dep.path, dep.link!)\n        if (r != null) {\n          await r\n        }\n      }\n\n      while (queue.length > 0) {\n        const dirPath = queue.pop()!\n\n        const childNames = await readdir(dirPath)\n        childNames.sort()\n\n        const isTopLevel = dirPath === dep.path\n        const dirs: Array<string> = []\n        // our handler is async, but we should add sorted files, so, we add file to result not in the mapper, but after map\n        const sortedFilePaths = await BluebirdPromise.map(childNames, name => {\n          if (excludedFiles.has(name) || name.endsWith(\".h\") || name.endsWith(\".o\") || name.endsWith(\".obj\") || name.endsWith(\".cc\") || (!isIncludePdb && name.endsWith(\".pdb\")) || name.endsWith(\".d.ts\") ||\n            name.endsWith(\".suo\") || name.endsWith(\".sln\") || name.endsWith(\".xproj\") || name.endsWith(\".csproj\")) {\n            return null\n          }\n\n          if (isTopLevel && topLevelExcludedFiles.has(name)) {\n            return null\n          }\n\n          if (dirPath.endsWith(\"build\")) {\n            if (name === \"gyp-mac-tool\" || name === \"Makefile\" || name.endsWith(\".mk\") || name.endsWith(\".gypi\") || name.endsWith(\".Makefile\")) {\n              return null\n            }\n          }\n          else if (dirPath.endsWith(\"Release\") && (name === \".deps\" || name === \"obj.target\")) {\n            return null\n          }\n          else if (name === \"src\" && (dirPath.endsWith(\"keytar\") || dirPath.endsWith(\"keytar-prebuild\"))) {\n            return null\n          }\n          else if (dirPath.endsWith(\"lzma-native\") && (name === \"build\" || name === \"deps\")) {\n            return null\n          }\n\n          const filePath = dirPath + path.sep + name\n          return lstat(filePath)\n            .then(stat => {\n              if (filter != null && !filter(filePath, stat)) {\n                return null\n              }\n\n              if (!stat.isDirectory()) {\n                metadata.set(filePath, stat)\n              }\n              const consumerResult = this.handleFile(filePath, stat)\n              if (consumerResult == null) {\n                if (stat.isDirectory()) {\n                  dirs.push(name)\n                  return null\n                }\n                else {\n                  return filePath\n                }\n              }\n              else {\n                return consumerResult\n                  .then(it => {\n                    // asarUtil can return modified stat (symlink handling)\n                    if ((it == null ? stat : it).isDirectory()) {\n                      dirs.push(name)\n                      return null\n                    }\n                    else {\n                      return filePath\n                    }\n                  })\n              }\n            })\n        }, CONCURRENCY)\n\n        for (const child of sortedFilePaths) {\n          if (child != null) {\n            result.push(child)\n          }\n        }\n\n        dirs.sort()\n        for (const child of dirs) {\n          queue.push(dirPath + path.sep + child)\n        }\n      }\n    }\n    return result\n  }\n}"]}
