{"version":3,"file":"cacheManager.js","sourceRoot":"","sources":["../../src/util/cacheManager.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;oEA6EO,AAAK,WAAiB,AAAU,MAAE,AAAoB;AAC3D,AAA+H;AAC/H,AAAG,AAAC,aAAC,MAAM,AAAO,WAAI,sDAAsB,AAAG,IAAC,AAAK;AAAE,AAAE,AAAC,AAAE,mBAAC,AAAQ,8CAAC,AAAE,AAAC,AAAC,AAAC;SAA/C,AAAe,GAAiC,AAAC;AAC3E,AAAI,iBAAC,AAAM,OAAC,AAAO,AAAC,AACtB;AAAC;AAED,AAAI,aAAC,AAAM,OAAC,AAAiB,kBAAC,AAAO,AAAC;AACtC,AAAM,eAAC,AAAI,KAAC,AAAM,OAAC,AAAQ,AAAC,AAC9B;AAAC;;;;;;;;;;;AApFD,AAAO,AAAE,AAAI,AAAE,AAAG,AAAE,AAAM,AAAc;;;;;;AACxC,AAAO,AAAE,AAAQ,AAAE,AAAM,AAAqB;;;;;;AAC9C,AAAO,AAAE,AAAoB,AAAE,AAAM,AAA0B;;;;;;AAE/D,AAAO,AAAE,AAAS,AAAE,AAAQ,AAAE,AAAQ,AAAE,AAAS,AAAE,AAAM,AAAY;;;;AACrE,AAAO,AAAK,AAAI,AAAM,AAAM,AAM5B,AAAM;;;;;;;AAWJ,gBAAY,AAAc,QAAmB,AAAsB,gBAAE,AAAU;AAAlC,aAAc,iBAAd,AAAc,AAAQ;AAJnE,aAAS,YAA0B,AAAI;AAE/B,aAAS,YAAkB,AAAI;AAGrC,AAAI,aAAC,AAAQ,WAAG,AAAI,MAAC,AAAI,KAAC,AAAM,QAAE,AAAQ,UAAE,AAAI,2CAAC,AAAI,AAAC,AAAC;AACvD,AAAI,aAAC,AAAS,YAAG,AAAI,MAAC,AAAI,KAAC,AAAI,KAAC,AAAQ,UAAE,AAAS,AAAC;AACpD,AAAI,aAAC,AAAa,gBAAG,AAAI,MAAC,AAAI,KAAC,AAAI,KAAC,AAAQ,UAAE,AAAW,AAAC,AAC5D;AAAC;AAEK,AAAW,eAAjB,AAAK,CAAa,AAAc;;;;AAC9B,AAAI,kBAAC,AAAS,YAAG,AAAM;AAEvB,AAAI,kBAAC,AAAS,YAAG,MAAM,AAAoB,wDAAC,AAAQ,8CAAC,AAAI,MAAC,AAAa,AAAC,AAAC;AACzE,kBAAM,AAAS,YAAG,AAAI,MAAC,AAAS,aAAI,AAAI,AAAC,AAAC,OAAC,AAAI,AAAC,AAAC,OAAC,AAAI,MAAC,AAAS,UAAC,AAAgB;AACjF,AAAE,AAAC,gBAAC,AAAS,cAAK,AAAM,AAAC,QAAC,AAAC;AACzB,AAAG,0DAAC,AAAK,MAAC,EAAC,AAAS,WAAE,AAAS,WAAE,AAAM,AAAC,UAAE,AAAkC,AAAC;AAC7E,AAAM,uBAAC,AAAK,AACd;AAAC;AAED,AAAG,sDAAC,AAAK,MAAC,EAAC,AAAS,WAAE,AAAI,MAAC,AAAS,WAAE,AAAI,MAAE,AAAI,MAAC,AAAc,AAAC,AAAE,kBAA2B,AAAC;AAC9F,gBAAI,AAAC;AACH,sBAAM,AAAQ,kCAAC,AAAI,MAAC,AAAS,WAAE,AAAI,MAAC,AAAc,gBAAE,AAAK,AAAC;AAC1D,AAAM,uBAAC,AAAI,AACb;AAAC,cACD,AAAK,AAAC,OAAC,AAAC,AAAC,GAAC,AAAC;AACT,AAAE,AAAC,oBAAC,AAAC,EAAC,AAAI,SAAK,AAAQ,YAAI,AAAC,EAAC,AAAI,SAAK,AAAS,AAAC,WAAC,AAAC;AAChD,AAAG,8DAAC,AAAK,MAAC,EAAC,AAAK,OAAE,AAAC,EAAC,AAAI,AAAC,QAAE,AAA+B,AAAC,AAC7D;AAAC,AACD,AAAI,uBAAC,AAAC;AACJ,AAAG,8DAAC,AAAI,KAAC,EAAC,AAAK,OAAE,AAAC,EAAC,AAAK,SAAI,AAAC,AAAC,AAAE,KAA+B,AAAC,AAClE;AAAC,AACH;AAAC;AACD,AAAM,mBAAC,AAAK,AACd;;AAAC;AAEK,AAAI,QAAV,AAAK;;;;AACH,AAAE,AAAC,gBAAC,AAAI,OAAC,AAAS,aAAI,AAAI,AAAC,MAAC,AAAC;AAC3B,sBAAM,IAAI,AAAK,MAAC,AAAyB,AAAC,AAC5C;AAAC;AAED,AAAE,AAAC,gBAAC,AAAI,OAAC,AAAS,aAAI,AAAI,AAAC,MAAC,AAAC;AAC3B,AAAI,uBAAC,AAAS,YAAG,EAAC,AAAgB,kBAAE,AAAI,OAAC,AAAS,AAAC,AACrD;AAAC,AACD,AAAI,mBAAC,AAAC;AACJ,AAAI,uBAAC,AAAS,UAAC,AAAgB,mBAAG,AAAI,OAAC,AAAS,AAClD;AAAC;AAED,gBAAI,AAAC;AACH,sBAAM,AAAS,+CAAC,AAAI,OAAC,AAAQ,AAAC;AAC9B,sBAAM,AAAe,gDAAC,AAAG,IAAC,CAAC,AAAS,+CAAC,AAAI,OAAC,AAAa,eAAE,AAAI,OAAC,AAAS,AAAC,YAAE,AAAQ,kCAAC,AAAI,OAAC,AAAc,gBAAE,AAAI,OAAC,AAAS,WAAE,AAAK,AAAC,AAAC,AAAC,AAClI;AAAC,cACD,AAAK,AAAC,OAAC,AAAC,AAAC,GAAC,AAAC;AACT,AAAG,0DAAC,AAAI,KAAC,EAAC,AAAK,OAAE,AAAC,EAAC,AAAK,SAAI,AAAC,AAAC,AAAE,KAAyB,AAAC,AAC5D;AAAC,AACH;;AAAC;;;AA7DM,kBAAO,UAAW,AAAG,AAgE9B,AAAM","sourcesContent":["import BluebirdPromise from \"bluebird-lst\"\nimport { Arch, log } from \"builder-util\"\nimport { copyFile } from \"builder-util/out/fs\"\nimport { orNullIfFileNotExist } from \"builder-util/out/promise\"\nimport { Hash } from \"crypto\"\nimport { ensureDir, readFile, readJson, writeJson } from \"fs-extra-p\"\nimport * as path from \"path\"\n\nexport interface BuildCacheInfo {\n  executableDigest: string\n}\n\nexport class BuildCacheManager {\n  static VERSION: string = \"0\"\n\n  readonly cacheDir: string\n  readonly cacheInfoFile: string\n  readonly cacheFile: string\n\n  cacheInfo: BuildCacheInfo | null = null\n\n  private newDigest: string | null = null\n\n  constructor(outDir: string, private readonly executableFile: string, arch: Arch) {\n    this.cacheDir = path.join(outDir, \".cache\", Arch[arch])\n    this.cacheFile = path.join(this.cacheDir, \"app.exe\")\n    this.cacheInfoFile = path.join(this.cacheDir, \"info.json\")\n  }\n\n  async copyIfValid(digest: string): Promise<boolean> {\n    this.newDigest = digest\n\n    this.cacheInfo = await orNullIfFileNotExist(readJson(this.cacheInfoFile))\n    const oldDigest = this.cacheInfo == null ? null : this.cacheInfo.executableDigest\n    if (oldDigest !== digest) {\n      log.debug({oldDigest, newDigest: digest}, \"no valid cached executable found\")\n      return false\n    }\n\n    log.debug({cacheFile: this.cacheFile, file: this.executableFile}, `copying cached executable`)\n    try {\n      await copyFile(this.cacheFile, this.executableFile, false)\n      return true\n    }\n    catch (e) {\n      if (e.code === \"ENOENT\" || e.code === \"ENOTDIR\") {\n        log.debug({error: e.code}, \"copy cached executable failed\")\n      }\n      else {\n        log.warn({error: e.stack || e}, `cannot copy cached executable`)\n      }\n    }\n    return false\n  }\n\n  async save() {\n    if (this.newDigest == null) {\n      throw new Error(\"call copyIfValid before\")\n    }\n\n    if (this.cacheInfo == null) {\n      this.cacheInfo = {executableDigest: this.newDigest}\n    }\n    else {\n      this.cacheInfo.executableDigest = this.newDigest\n    }\n\n    try {\n      await ensureDir(this.cacheDir)\n      await BluebirdPromise.all([writeJson(this.cacheInfoFile, this.cacheInfo), copyFile(this.executableFile, this.cacheFile, false)])\n    }\n    catch (e) {\n      log.warn({error: e.stack || e}, `cannot save build cache`)\n    }\n  }\n}\n\nexport async function digest(hash: Hash, files: Array<string>) {\n  // do not use pipe - better do bulk file read (https://github.com/yarnpkg/yarn/commit/7a63e0d23c46a4564bc06645caf8a59690f04d01)\n  for (const content of await BluebirdPromise.map(files, it => readFile(it))) {\n    hash.update(content)\n  }\n\n  hash.update(BuildCacheManager.VERSION)\n  return hash.digest(\"base64\")\n}"]}
