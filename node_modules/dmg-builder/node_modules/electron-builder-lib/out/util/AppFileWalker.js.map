{"version":3,"file":"AppFileWalker.js","sourceRoot":"","sources":["../../src/util/AppFileWalker.ts"],"names":[],"mappings":";;;;;;;AAEA,AAAO,AAAK,AAAI,AAAM,AAAM;;;;AAG5B,AAAO,AAAE,AAAoB,AAAE,AAAM,AAAwB;;;;;;AAC7D,AAAO,AAAE,AAAyB,AAAE,AAAM,AAAuB;;;;;;AAEjE,MAAM,AAAgC,AAAG,sCAAG,AAAI,MAAC,AAAG,GAAc;AAElE,6BAA6B,AAAoB;AAC/C,AAAE,AAAC,QAAC,CAAC,AAAO,QAAC,AAAuB,AAAI,4BAAC,AAAO,QAAC,AAAO,AAAE,aAAI,AAAO,QAAC,AAAkB,AAAE,AAAC,AAAC,uBAAC,AAAC;AAC5F,AAAO,gBAAC,AAAc,eAAC,AAAM,AAAC,AAChC;AAAC;AACD,AAAM,WAAC,AAAO,AAChB;AAAC;AAED,AAAgB,AAChB,AAAM;MAAqB,AAAQ,AAAoB;AAGrD,gBAAY,AAAoB,SAAE,AAAkB;AAClD,AAAK,cAAC,AAAmB,oBAAC,AAAO,AAAC,UAAE,AAAQ,AAAC;AAH/C,aAAoB,uBAAG,AAAK,AAI5B;AAAC;AAED,AAAqC;AACrC,AAAO,YAAC,AAAY,MAAE,AAAe,UAAE,AAAc,QAAE,AAA2B;AAChF,AAAE,AAAC,YAAC,AAAQ,SAAC,AAAW,AAAE,AAAC,eAAC,AAAC;AAC3B,AAAoE;AACpE,AAAkD;AAClD,AAAE,AAAC,gBAAC,AAAI,KAAC,AAAQ,SAAC,AAAgC,AAAC,qCAAI,CAAC,AAAM,OAAC,AAAQ,SAAC,AAAc,AAAC,mBAAI,AAAY,aAAC,AAAQ,SAAC,AAAc,AAAC,AAAC,iBAAC,AAAC;AACjI,AAAM,uBAAC,AAAI,KAAC,AAAoB,qBAAC,AAAI,MAAE,AAAM,AAAC,AAChD;AAAC,AACH;AAAC,AACD,AAAI,eAAC,AAAC;AACJ,AAAoD;AACpD,AAAI,iBAAC,AAAQ,SAAC,AAAG,IAAC,AAAI,MAAE,AAAQ,AAAC,AACnC;AAAC;AAED,AAAM,eAAC,AAAI,KAAC,AAAU,WAAC,AAAI,MAAE,AAAQ,AAAC,AACxC;AAAC;AAEO,AAAoB,yBAAC,AAAsB,gBAAE,AAAc;AACjE,cAAM,AAAQ,WAAG,AAAI,KAAC,AAAQ;AAC9B,cAAM,AAAiB,oBAAG,AAAM,WAAK,AAAQ,SAAC,AAAM;AACpD,AAAE,AAAC,YAAC,AAAiB,AAAC,mBAAC,AAAC;AACtB,AAAI,iBAAC,AAAoB,uBAAG,AAAI,AAClC;AAAC;AACD,AAAM,gBAAE,AAAiB,AAAC,AAAC,oBAAC,AAAQ,SAAC,AAAc,eAAC,AAAK,AAAC,AAAC,QAAC,AAAyB,qFAAC,AAAM,AAAC,AAAC,SAC3F,AAAI,KAAC,AAAE,AAAC,AAAE;AACT,AAAE,AAAC,gBAAC,AAAQ,SAAC,AAAW,YAAC,AAAO,AAAC,SAAC,AAAC;AACjC,AAAQ,yBAAC,AAAW,YAAC,AAAG,AAAC,8BAA0B,AAAM,MAAE,IAAE,AAAE,GAAC,AAAM,OAAC,AAAE,AAAC,AAAE,MAAC,AAAE,GAAC,AAAI,KAAC,AAAU,WAAC,AAAc,AAAC,AAAC,iBAAC,AAAG,IAAC,AAAE,AAAC,AAAE,MAAC,AAAI,MAAC,AAAQ,SAAC,AAAc,gBAAE,AAAE,GAAC,AAAI,AAAC,AAAC,AAAC,AACrK;AAAC;AACD,AAAM,mBAAC,AAAI,KAAC,AAAkB,mBAAC,AAAE,AAAC,AACpC;AAAC,AAAC,AACN,SAPS;AAOR,AACF","sourcesContent":["import { FileConsumer } from \"builder-util/out/fs\"\nimport { Stats } from \"fs-extra-p\"\nimport * as path from \"path\"\nimport { FileMatcher } from \"../fileMatcher\"\nimport { Packager } from \"../packager\"\nimport { NodeModuleCopyHelper } from \"./NodeModuleCopyHelper\"\nimport { getProductionDependencies } from \"./packageDependencies\"\n\nconst nodeModulesSystemDependentSuffix = `${path.sep}node_modules`\n\nfunction addAllPatternIfNeed(matcher: FileMatcher) {\n  if (!matcher.isSpecifiedAsEmptyArray && (matcher.isEmpty() || matcher.containsOnlyIgnore())) {\n    matcher.prependPattern(\"**/*\")\n  }\n  return matcher\n}\n\n/** @internal */\nexport class AppFileWalker extends NodeModuleCopyHelper implements FileConsumer {\n  isNodeModulesHandled = false\n\n  constructor(matcher: FileMatcher, packager: Packager) {\n    super(addAllPatternIfNeed(matcher), packager)\n  }\n\n  // noinspection JSUnusedGlobalSymbols\n  consume(file: string, fileStat: Stats, parent: string, siblingNames: Array<string>): any {\n    if (fileStat.isDirectory()) {\n      // https://github.com/electron-userland/electron-builder/issues/1539\n      // but do not filter if we inside node_modules dir\n      if (file.endsWith(nodeModulesSystemDependentSuffix) && !parent.includes(\"node_modules\") && siblingNames.includes(\"package.json\")) {\n        return this.handleNodeModulesDir(file, parent)\n      }\n    }\n    else {\n      // save memory - no need to store stat for directory\n      this.metadata.set(file, fileStat)\n    }\n\n    return this.handleFile(file, fileStat)\n  }\n\n  private handleNodeModulesDir(nodeModulesDir: string, parent: string) {\n    const packager = this.packager\n    const isMainNodeModules = parent === packager.appDir\n    if (isMainNodeModules) {\n      this.isNodeModulesHandled = true\n    }\n    return (isMainNodeModules ? packager.productionDeps.value : getProductionDependencies(parent))\n      .then(it => {\n        if (packager.debugLogger.enabled) {\n          packager.debugLogger.add(`productionDependencies.${parent}`, it.filter(it => it.path.startsWith(nodeModulesDir)).map(it => path.relative(nodeModulesDir, it.path)))\n        }\n        return this.collectNodeModules(it)\n      })\n  }\n}"]}
