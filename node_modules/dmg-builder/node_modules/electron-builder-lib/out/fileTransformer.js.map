{"version":3,"file":"fileTransformer.js","sourceRoot":"","sources":["../src/fileTransformer.ts"],"names":[],"mappings":"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","sourcesContent":["import { debug, log, deepAssign } from \"builder-util\"\nimport { FileTransformer } from \"builder-util/out/fs\"\nimport { readFile } from \"fs-extra-p\"\nimport * as path from \"path\"\nimport { Configuration } from \"./configuration\"\nimport { Packager } from \"./packager\"\n\n/** @internal */\nexport function isElectronCompileUsed(info: Packager): boolean {\n  if (info.config.electronCompile != null) {\n    return info.config.electronCompile\n  }\n\n  // if in devDependencies - it means that babel is used for precompilation or for some reason user decided to not use electron-compile for production\n  return hasDep(\"electron-compile\", info)\n}\n\n/** @internal */\nexport function hasDep(name: string, info: Packager) {\n  const deps = info.metadata.dependencies\n  return deps != null && name in deps\n}\n\n/** @internal */\nexport function createTransformer(srcDir: string, configuration: Configuration, extraMetadata: any): FileTransformer {\n  const mainPackageJson = path.join(srcDir, \"package.json\")\n  const isRemovePackageScripts = configuration.removePackageScripts !== false\n  return file => {\n    if (file === mainPackageJson) {\n      return modifyMainPackageJson(file, extraMetadata, isRemovePackageScripts)\n    }\n    else if (file.endsWith(\"/package.json\") && file.includes(\"/node_modules/\")) {\n      return readFile(file, \"utf-8\")\n        .then(it => cleanupPackageJson(JSON.parse(it), {\n          isMain: false,\n          isRemovePackageScripts,\n        }))\n        .catch(e => log.warn(e))\n    }\n    else {\n      return null\n    }\n  }\n}\n\n/** @internal */\nexport interface CompilerHost {\n  compile(file: string): any\n\n  saveConfiguration(): Promise<any>\n}\n\n/** @internal */\nexport function createElectronCompilerHost(projectDir: string, cacheDir: string): Promise<CompilerHost> {\n  const electronCompilePath = path.join(projectDir, \"node_modules\", \"electron-compile\", \"lib\")\n  return require(path.join(electronCompilePath, \"config-parser\")).createCompilerHostFromProjectRoot(projectDir, cacheDir)\n}\n\nconst ignoredPackageMetadataProperties = new Set([\"dist\", \"gitHead\", \"keywords\", \"build\", \"jspm\", \"ava\", \"xo\", \"nyc\", \"eslintConfig\", \"contributors\", \"bundleDependencies\", \"tags\"])\n\ninterface CleanupPackageFileOptions {\n  readonly isRemovePackageScripts: boolean\n  readonly isMain: boolean\n}\n\nfunction cleanupPackageJson(data: any, options: CleanupPackageFileOptions): any {\n  const deps = data.dependencies\n  // https://github.com/electron-userland/electron-builder/issues/507#issuecomment-312772099\n  const isRemoveBabel = deps != null && typeof deps === \"object\" && !Object.getOwnPropertyNames(deps).some(it => it.startsWith(\"babel\"))\n  try {\n    let changed = false\n    for (const prop of Object.getOwnPropertyNames(data)) {\n      // removing devDependencies from package.json breaks levelup in electron, so, remove it only from main package.json\n      if (prop[0] === \"_\" ||\n        ignoredPackageMetadataProperties.has(prop) ||\n        (options.isRemovePackageScripts && prop === \"scripts\") ||\n        (options.isMain && prop === \"devDependencies\") ||\n        (!options.isMain && prop === \"bugs\") ||\n        (isRemoveBabel && prop === \"babel\")) {\n        delete data[prop]\n        changed = true\n      }\n    }\n\n    if (changed) {\n      return JSON.stringify(data, null, 2)\n    }\n  }\n  catch (e) {\n    debug(e)\n  }\n\n  return null\n}\n\nasync function modifyMainPackageJson(file: string, extraMetadata: any, isRemovePackageScripts: boolean) {\n  const mainPackageData = JSON.parse(await readFile(file, \"utf-8\"))\n  if (extraMetadata != null) {\n    deepAssign(mainPackageData, extraMetadata)\n  }\n\n  // https://github.com/electron-userland/electron-builder/issues/1212\n  const serializedDataIfChanged = cleanupPackageJson(mainPackageData, {\n    isMain: true,\n    isRemovePackageScripts,\n  })\n  if (serializedDataIfChanged != null) {\n    return serializedDataIfChanged\n  }\n  else if (extraMetadata != null) {\n    return JSON.stringify(mainPackageData, null, 2)\n  }\n  return null\n}"]}
