{"version":3,"file":"asar.js","sourceRoot":"","sources":["../../src/asar/asar.ts"],"names":[],"mappings":"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","sourcesContent":["import { createFromBuffer } from \"chromium-pickle-js\"\nimport { close, open, read, readFile, Stats } from \"fs-extra-p\"\nimport * as path from \"path\"\n\n/** @internal */\nexport class Node {\n  // we don't use Map because later it will be stringified\n  files?: { [key: string]: Node }\n\n  unpacked?: boolean\n\n  size?: number\n  // electron expects string\n  offset?: string\n\n  executable?: boolean\n\n  link?: string\n}\n\n/** @internal */\nexport class AsarFilesystem {\n  private offset = 0\n\n  constructor(readonly src: string, readonly header = new Node(), readonly headerSize: number = -1) {\n    if (this.header.files == null) {\n      this.header.files = {}\n    }\n  }\n\n  searchNodeFromDirectory(p: string, isCreate: boolean): Node | null {\n    let node = this.header\n    for (const dir of p.split(path.sep)) {\n      if (dir !== \".\") {\n        let child = node.files![dir]\n        if (child == null) {\n          if (!isCreate) {\n            return null\n          }\n          child = new Node()\n          child.files = {}\n          node.files![dir] = child\n        }\n        node = child\n      }\n    }\n    return node\n  }\n\n  getOrCreateNode(p: string): Node {\n    if (p == null || p.length === 0) {\n      return this.header\n    }\n\n    const name = path.basename(p)\n    const dirNode = this.searchNodeFromDirectory(path.dirname(p), true)!\n    if (dirNode.files == null) {\n      dirNode.files = {}\n    }\n\n    let result = dirNode.files[name]\n    if (result == null) {\n      result = new Node()\n      dirNode.files[name] = result\n    }\n    return result\n  }\n\n  addFileNode(file: string, dirNode: Node, size: number, unpacked: boolean, stat: Stats): Node {\n    if (size > 4294967295) {\n      throw new Error(`${file}: file size cannot be larger than 4.2GB`)\n    }\n\n    const node = new Node()\n    node.size = size\n    if (unpacked) {\n      node.unpacked = true\n    }\n    else {\n      // electron expects string\n      node.offset = this.offset.toString()\n      if (process.platform !== \"win32\" && (stat.mode & 0o100)) {\n        node.executable = true\n      }\n      this.offset += node.size\n    }\n\n    let children = dirNode.files\n    if (children == null) {\n      children = {}\n      dirNode.files = children\n    }\n    children[path.basename(file)] = node\n\n    return node\n  }\n\n  getNode(p: string) {\n    const node = this.searchNodeFromDirectory(path.dirname(p), false)!\n    return node.files![path.basename(p)]\n  }\n\n  getFile(p: string, followLinks: boolean = true): Node {\n    const info = this.getNode(p)!\n    // if followLinks is false we don't resolve symlinks\n    return followLinks && info.link != null ? this.getFile(info.link) : info\n  }\n\n  async readJson(file: string): Promise<any> {\n    return JSON.parse((await this.readFile(file)).toString())\n  }\n\n  async readFile(file: string): Promise<Buffer> {\n    return await readFileFromAsar(this, file, this.getFile(file))\n  }\n}\n\nexport async function readAsar(archive: string): Promise<AsarFilesystem> {\n  const fd = await open(archive, \"r\")\n  let size\n  let headerBuf\n  try {\n    const sizeBuf = Buffer.allocUnsafe(8)\n    if (await read(fd, sizeBuf, 0, 8, null as any) !== 8) {\n      throw new Error(\"Unable to read header size\")\n    }\n\n    const sizePickle = createFromBuffer(sizeBuf)\n    size = sizePickle.createIterator().readUInt32()\n    headerBuf = Buffer.allocUnsafe(size)\n    if (await read(fd, headerBuf, 0, size, null as any) !== size) {\n      throw new Error(\"Unable to read header\")\n    }\n  }\n  finally {\n    await close(fd)\n  }\n\n  const headerPickle = createFromBuffer(headerBuf!)\n  const header = headerPickle.createIterator().readString()\n  return new AsarFilesystem(archive, JSON.parse(header), size)\n}\n\nexport async function readAsarJson(archive: string, file: string): Promise<any> {\n  const fs = await readAsar(archive)\n  return await fs.readJson(file)\n}\n\nasync function readFileFromAsar(filesystem: AsarFilesystem, filename: string, info: Node): Promise<Buffer> {\n  const size = info.size!!\n  const buffer = Buffer.allocUnsafe(size)\n  if (size <= 0) {\n    return buffer\n  }\n\n  if (info.unpacked) {\n    return await readFile(path.join(`${filesystem.src}.unpacked`, filename))\n  }\n\n  const fd = await open(filesystem.src, \"r\")\n  try {\n    const offset = 8 + filesystem.headerSize + parseInt(info.offset!!, 10)\n    await read(fd, buffer, 0, size, offset)\n  }\n  finally {\n    await close(fd)\n  }\n  return buffer\n}\n"]}
