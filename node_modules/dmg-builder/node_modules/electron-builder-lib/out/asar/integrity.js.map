{"version":3,"file":"integrity.js","sourceRoot":"","sources":["../../src/asar/integrity.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;oEAmBO,AAAK,WAAsB,AAAqB,eAAE,AAAqC;AAC5F,AAAkC;AAClC,cAAM,AAAK,SAAI,MAAM,AAAO,6CAAC,AAAa,AAAC,AAAC,gBAAC,AAAM;AAAC,AAAE,AAAC,AAAE,mBAAC,AAAE,GAAC,AAAQ,SAAC,AAAO,AAAC,AAAC;SAAjE,EAAkE,AAAI,AAAE;AACtF,cAAM,AAAS,YAAG,sDAAsB,AAAG,IAAC,AAAK;AAAE,AAAE,AAAC,AAAE,mBAAC,AAAQ,SAAC,AAAI,MAAC,AAAI,KAAC,AAAa,eAAE,AAAE,AAAC,AAAC,AAAC;SAAxE,AAAe;AAEvC,cAAM,AAAM,SAA+B,AAAE;AAC7C,AAAG,AAAC,aAAC,IAAI,AAAC,IAAG,AAAC,GAAE,AAAC,IAAG,AAAK,MAAC,AAAM,QAAE,AAAC,AAAE,KAAE,AAAC;AACtC,AAAM,mBAAC,AAAK,MAAC,AAAC,AAAC,AAAC,MAAG,AAAS,UAAC,AAAC,AAAC,AACjC;AAAC;AACD,AAAM,+BAAE,AAAS,WAAE,AAAM,UAAK,AAAO,AAAC,AACxC;AAAC;;;;;;;;;AA5BD,AAAO,AAAE,AAAU,AAAE,AAAM,AAAQ;;;;;;AACnC,AAAO,AAAE,AAAgB,AAAE,AAAM,AAAI;;;;;;AACrC,AAAO,AAAE,AAAO,AAAE,AAAM,AAAY;;;;AACpC,AAAO,AAAK,AAAI,AAAM,AAAM,AAe5B,AAAM;;;;;;AAYN,kBAAkB,AAAY,MAAE,YAAoB,AAAQ,UAAE,WAAwC,AAAQ;AAC5G,AAAM,+DAA6B,CAAC,AAAO,SAAE,AAAM,AAAE,AAAE;AACrD,cAAM,AAAI,OAAG,AAAU,4CAAC,AAAS,AAAC;AAClC,AAAI,aACD,AAAE,GAAC,AAAO,SAAE,AAAM,AAAC,QACnB,AAAW,YAAC,AAAQ,AAAC;AAExB,AAAgB,kDAAC,AAAI,AAAC,MACnB,AAAE,GAAC,AAAO,SAAE,AAAM,AAAC,QACnB,AAAE,GAAC,AAAK,OAAE,AAAG,AAAE;AACd,AAAI,iBAAC,AAAG,AAAE;AACV,AAAO,oBAAC,AAAI,KAAC,AAAI,AAAY,AAAC,AAChC;AAAC,AAAC,WACD,AAAI,KAAC,AAAI,MAAE,EAAC,AAAG,KAAE,AAAK,AAAC,AAAC,AAC7B;AAAC,AAAC,AACJ,KAdS,AAAI,AAAe;AAc3B","sourcesContent":["import BluebirdPromise from \"bluebird-lst\"\nimport { createHash } from \"crypto\"\nimport { createReadStream } from \"fs\"\nimport { readdir } from \"fs-extra-p\"\nimport * as path from \"path\"\n\nexport interface AsarIntegrityOptions {\n  /**\n   * Allows external asar files.\n   *\n   * @default false\n   */\n  readonly externalAllowed?: boolean\n}\n\nexport interface AsarIntegrity extends AsarIntegrityOptions {\n  checksums: { [key: string]: string; }\n}\n\nexport async function computeData(resourcesPath: string, options?: AsarIntegrityOptions | null): Promise<AsarIntegrity> {\n  // sort to produce constant result\n  const names = (await readdir(resourcesPath)).filter(it => it.endsWith(\".asar\")).sort()\n  const checksums = await BluebirdPromise.map(names, it => hashFile(path.join(resourcesPath, it)))\n\n  const result: { [key: string]: string; } = {}\n  for (let i = 0; i < names.length; i++) {\n    result[names[i]] = checksums[i]\n  }\n  return {checksums: result, ...options}\n}\n\nfunction hashFile(file: string, algorithm: string = \"sha512\", encoding: \"hex\" | \"base64\" | \"latin1\" = \"base64\") {\n  return new BluebirdPromise<string>((resolve, reject) => {\n    const hash = createHash(algorithm)\n    hash\n      .on(\"error\", reject)\n      .setEncoding(encoding)\n\n    createReadStream(file)\n      .on(\"error\", reject)\n      .on(\"end\", () => {\n        hash.end()\n        resolve(hash.read() as string)\n      })\n      .pipe(hash, {end: false})\n  })\n}"]}
