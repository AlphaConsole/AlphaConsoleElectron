{"version":3,"file":"create-self-signed-cert.js","sourceRoot":"","sources":["../../src/cli/create-self-signed-cert.ts"],"names":[],"mappings":";;;;;;;;;;;;;AAQA,AAAgB,AAChB,AAAM;;oEAAC,AAAK,WAA+B,AAAiB;AAC1D,cAAM,AAAM,SAAG,AAAI,AAAM,iDAAC,AAAyB,AAAC;AACpD,cAAM,AAAS,YAAG,AAAO,QAAC,AAAG,AAAE;AAC/B,cAAM,AAAU,aAAG,AAAI,MAAC,AAAI,MAAC,MAAM,AAAM,OAAC,AAAU,WAAC,EAAC,AAAM,QAAE,AAA0B,AAAC,AAAC,gCAAE,AAAgB,6DAAC,AAAS,AAAC,AAAC;AACxH,cAAM,AAAG,AAAG,SAAG,AAAU,UAAM;AAC/B,cAAM,AAAG,AAAG,SAAG,AAAU,UAAM;AAE/B,AAAG,kDAAC,AAAI,KAAC,AAAK,kCAAC,AAAI,KAAC,AAAuF,AAAC,AAAC;AAE7G,YAAI,AAAC;AACH,kBAAM,AAAS,+CAAC,AAAI,MAAC,AAAO,QAAC,AAAU,AAAC,AAAC;AACzC,kBAAM,AAAU,aAAG,AAAI,MAAC,AAAI,MAAC,MAAM,AAAiB,AAAE,yEAAE,AAAY,cAAE,AAAO,QAAC,AAAI,AAAC;AACnF,kBAAM,AAAI,gDAAC,AAAI,MAAC,AAAI,KAAC,AAAU,YAAE,AAAc,AAAC,iBAC9C,CAAC,AAAI,MAAE,AAAI,MAAE,AAAG,KAAE,AAAI,AAAE,YAAM,AAAW,YAAC,AAAS,AAAC,UAAE,IAAE,AAAM,QAAE,AAAmB,qBAAE,AAAK,OAAE,AAAK,OAAE,AAAG,KAAE,AAAG,AAAC,AAAC;AAE/G,kBAAM,AAAG,MAAG,AAAI,MAAC,AAAI,KAAC,AAAS,AAAE,cAAG,AAAgB,6DAAC,AAAS,AAAC,UAAM,AAAC;AACtE,kBAAM,AAAc,wCAAC,AAAG,AAAC;AACzB,kBAAM,AAAI,gDAAC,AAAI,MAAC,AAAI,KAAC,AAAU,YAAE,AAAa,AAAC,gBAAE,CAAC,AAAM,QAAE,AAAG,KAAE,AAAM,QAAE,AAAG,KAAE,AAAM,QAAE,AAAG,AAAC,AAAC;AACzF,AAAG,sDAAC,AAAI,KAAC,EAAC,AAAI,MAAE,AAAG,AAAC,AAAE,OAAgF,AAAC;AAEvG,kBAAM,AAAY,eAAG,AAAoC;AACzD,AAAG,sDAAC,AAAI,KAAC,EAAC,AAAI,MAAE,AAAG,KAAE,AAAY,AAAC,AAAE,gBAAgG,AAAC;AACrI,kBAAM,AAAK,iDAAC,AAAgB,kBAAE,CAAC,AAAY,cAAE,AAAiB,mBAAE,AAAU,YAAE,AAAuB,yBAAE,AAAW,AAAE,iBAAI,AAAG,GAAG,KAAE,AAAoB,sBAAE,AAAE,AAAC,AAAC,AAC1J;AAAC,kBACO,AAAC;AACP,kBAAM,AAAM,OAAC,AAAO,AAAE,AACxB;AAAC,AACH;AAAC;;;;;;;;;AApCD,AAAO,AAAE,AAAI,AAAE,AAAG,AAAE,AAAK,AAAE,AAAM,AAAE,AAAM,AAAc;;;;;;AACvD,AAAO,AAAE,AAAc,AAAE,AAAM,AAAqB;;;;;;AACpD,AAAO,AAAK,AAAM,AAAO;;;;;;AACzB,AAAO,AAAE,AAAiB,AAAE,AAAM,AAA0C;;;;;;AAC5E,AAAO,AAAE,AAAS,AAAE,AAAM,AAAY;;;;AACtC,AAAO,AAAK,AAAI,AAAM,AAAM;;;;AAC5B,AAAO,AAAgB,AAAM,AAAmB;;;;;;;;AAgChD,qBAAqB,AAAS;AAC5B,AAAE,AAAC,QAAC,CAAC,AAAC,EAAC,AAAQ,SAAC,AAAG,AAAC,QAAI,CAAC,AAAC,EAAC,AAAQ,SAAC,AAAG,AAAC,AAAC,MAAC,AAAC;AACzC,AAAM,eAAC,AAAC,AACV;AAAC;AAED,AAAM,AAAC,eAAI,AAAC,EAAC,AAAO,QAAC,AAAI,MAAE,AAAK,AAAC,MAAG,AACtC;AAAC","sourcesContent":["import { exec, log, spawn, TmpDir } from \"builder-util\"\nimport { unlinkIfExists } from \"builder-util/out/fs\"\nimport chalk from \"chalk\"\nimport { getSignVendorPath } from \"electron-builder-lib/out/windowsCodeSign\"\nimport { ensureDir } from \"fs-extra-p\"\nimport * as path from \"path\"\nimport sanitizeFileName from \"sanitize-filename\"\n\n/** @internal */\nexport async function createSelfSignedCert(publisher: string) {\n  const tmpDir = new TmpDir(\"create-self-signed-cert\")\n  const targetDir = process.cwd()\n  const tempPrefix = path.join(await tmpDir.getTempDir({prefix: \"self-signed-cert-creator\"}), sanitizeFileName(publisher))\n  const cer = `${tempPrefix}.cer`\n  const pvk = `${tempPrefix}.pvk`\n\n  log.info(chalk.bold('When asked to enter a password (\"Create Private Key Password\"), please select \"None\".'))\n\n  try {\n    await ensureDir(path.dirname(tempPrefix))\n    const vendorPath = path.join(await getSignVendorPath(), \"windows-10\", process.arch)\n    await exec(path.join(vendorPath, \"makecert.exe\"),\n      [\"-r\", \"-h\", \"0\", \"-n\", `CN=${quoteString(publisher)}`, \"-eku\", \"1.3.6.1.5.5.7.3.3\", \"-pe\", \"-sv\", pvk, cer])\n\n    const pfx = path.join(targetDir, `${sanitizeFileName(publisher)}.pfx`)\n    await unlinkIfExists(pfx)\n    await exec(path.join(vendorPath, \"pvk2pfx.exe\"), [\"-pvk\", pvk, \"-spc\", cer, \"-pfx\", pfx])\n    log.info({file: pfx}, `created. Please see https://electron.build/code-signing how to use it to sign.`)\n\n    const certLocation = \"Cert:\\\\LocalMachine\\\\TrustedPeople\"\n    log.info({file: pfx, certLocation}, `importing. Operation will be succeed only if runned from root. Otherwise import file manually.`)\n    await spawn(\"powershell.exe\", [\"-NoProfile\", \"-NonInteractive\", \"-Command\", \"Import-PfxCertificate\", \"-FilePath\", `\"${pfx}\"`, \"-CertStoreLocation\", \"\"])\n  }\n  finally {\n    await tmpDir.cleanup()\n  }\n}\n\nfunction quoteString(s: string): string {\n  if (!s.includes(\",\") && !s.includes('\"')) {\n    return s\n  }\n\n  return `\"${s.replace(/\"/g, '\\\\\"')}\"`\n}"]}
