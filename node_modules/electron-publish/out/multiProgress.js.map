{"version":3,"file":"multiProgress.js","sourceRoot":"","sources":["../src/multiProgress.ts"],"names":[],"mappings":"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","sourcesContent":["import { setPrinter } from \"builder-util/out/log\"\nimport { ProgressBar } from \"./progress\"\n\nexport class MultiProgress {\n  private readonly stream = process.stdout as any\n  private cursor = 0\n\n  private totalLines = 0\n\n  private isLogListenerAdded = false\n\n  private barCount = 0\n\n  createBar(format: string, options: any): ProgressBar {\n    options.stream = this.stream\n\n    // tslint:disable:no-this-assignment\n    const manager = this\n    class MultiProgressBar extends ProgressBar {\n      private index = -1\n\n      constructor(format: string, options: any) {\n        super(format, options)\n      }\n\n      render() {\n        if (this.index === -1) {\n          this.index = manager.totalLines\n          manager.allocateLines(1)\n        }\n        else {\n          manager.moveCursor(this.index)\n        }\n\n        super.render()\n\n        if (!manager.isLogListenerAdded) {\n          manager.isLogListenerAdded = true\n          setPrinter(message => {\n            let newLineCount = 0\n            let newLineIndex = message.indexOf(\"\\n\")\n            while (newLineIndex > -1) {\n              newLineCount++\n              newLineIndex = message.indexOf(\"\\n\", ++newLineIndex)\n            }\n\n            manager.allocateLines(newLineCount + 1)\n            manager.stream.write(message)\n          })\n        }\n      }\n\n      terminate() {\n        manager.barCount--\n        if (manager.barCount === 0 && manager.totalLines > 0) {\n          manager.allocateLines(1)\n          manager.totalLines = 0\n          manager.cursor = 0\n          setPrinter(null)\n          manager.isLogListenerAdded = false\n        }\n      }\n    }\n\n    const bar = new MultiProgressBar(format, options)\n    this.barCount++\n    return bar\n  }\n\n  private allocateLines(count: number) {\n    this.stream.moveCursor(0, this.totalLines - 1)\n    // if cursor pointed to previous line where \\n is already printed, another \\n is ignored, so, we can simply print it\n    this.stream.write(\"\\n\")\n    this.totalLines += count\n    this.cursor = this.totalLines - 1\n  }\n\n  private moveCursor(index: number) {\n    this.stream.moveCursor(0, index - this.cursor)\n    this.cursor = index\n  }\n\n  terminate() {\n    this.moveCursor(this.totalLines)\n    this.stream.clearLine()\n    this.stream.cursorTo(0)\n  }\n}"]}
