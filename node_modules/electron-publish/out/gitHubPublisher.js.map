{"version":3,"file":"gitHubPublisher.js","sourceRoot":"","sources":["../src/gitHubPublisher.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;AAAA,AAAO,AAAQ,AAAyB,AAAE,AAAe,AAAE,AAAS,AAAE,AAAgB,AAAE,AAAG,AAAE,AAAM,AAAc;;;;;;AACjH,AAAO,AAAE,AAAuB,AAAiB,AAAS,AAAE,AAAS,AAAE,AAAM,AAAsB;;;;;;AAEnG,AAAO,AAAE,AAAY,AAAE,AAAM,AAAmC;;;;;;AAEhE,AAAO,AAAE,AAAI,AAAE,AAAM,AAAU;;;;;;AAC/B,AAAO,AAAI,AAAM,AAAM;;;;;;AACvB,AAAO,AAAE,AAAK,AAAI,AAAQ,AAAE,AAAM,AAAK;;;;;;AACvC,AAAO,AAAE,AAAQ,AAAE,AAAa,AAAkC,AAAM,AAAa,AAmBrF,AAAM;;;;;;MAAuB,AAAQ,AAAa;AAYhD,gBAAY,AAAuB,SAAmB,AAAmB,MAAmB,AAAe,SAAmB,UAA0B,AAAE;AACxJ,AAAK,cAAC,AAAO,SAAE,AAAI,AAAC;AADgC,aAAI,OAAJ,AAAI,AAAe;AAAmB,aAAO,UAAP,AAAO,AAAQ;AAAmB,aAAO,UAAP,AAAO,AAAqB;AAVjJ,aAAQ,WAAG,AAAI,AAAI,uCAAC,AAAG,AAAE,MAAC,AAAI,KAAC,AAAK,UAAK,AAAU,AAAC,AAAC,aAAC,AAAO,QAAC,AAAO,QAAC,AAAW,AAAC,AAAC,AAAC,QAAC,AAAI,KAAC,AAAkB,AAAE,AAAC;AAI/G,aAAY,eAAG,AAAQ;AAIxB,aAAgB,mBAAkB,AAAI;AAK5C,YAAI,AAAK,QAAG,AAAI,KAAC,AAAK;AACtB,AAAE,AAAC,YAAC,AAAe,2DAAC,AAAK,AAAC,AAAC,QAAC,AAAC;AAC3B,AAAK,oBAAG,AAAO,QAAC,AAAG,IAAC,AAAQ,YAAI,AAAO,QAAC,AAAG,IAAC,AAAY;AACxD,AAAE,AAAC,gBAAC,AAAe,2DAAC,AAAK,AAAC,AAAC,QAAC,AAAC;AAC3B,sBAAM,AAAI,AAAyB,AAAC,oEAA6F,AAAC,AACpI;AAAC;AAED,AAAK,oBAAG,AAAK,MAAC,AAAI,AAAE;AAEpB,AAAE,AAAC,gBAAC,CAAC,AAAgB,4DAAC,AAAK,AAAC,AAAC,QAAC,AAAC;AAC7B,sBAAM,AAAI,AAAyB,AAAC,qGAAiC,AAAI,KAAC,AAAS,UAAC,AAAK,AAAC,MAA4D,AAAC,AACzJ;AAAC,AACH;AAAC;AAED,AAAI,aAAC,AAAK,QAAG,AAAM;AAEnB,AAAE,AAAC,YAAC,AAAO,QAAC,AAAU,WAAC,AAAG,AAAC,AAAC,MAAC,AAAC;AAC5B,kBAAM,AAAI,AAAyB,AAAC,yGAAqC,AAAO,OAAE,AAAC,AACrF;AAAC;AAED,AAAI,aAAC,AAAG,MAAG,AAAI,KAAC,AAAgB,qBAAK,AAAK,AAAC,AAAC,QAAC,AAAO,AAAC,AAAC,AAAC,cAAI,AAAO,OAAE;AAEpE,AAAE,AAAC,YAAC,AAAS,qDAAC,AAAO,QAAC,AAAG,IAAC,AAAQ,AAAC,AAAC,WAAC,AAAC;AACpC,AAAI,iBAAC,AAAW,cAAG,AAAO;AAC1B,AAAG,sDAAC,AAAI,KAAC,EAAC,AAAM,QAAE,AAA6B,AAAC,iCAAE,AAA8C,AAAC,AACnG;AAAC,AACD,AAAI,mBAAK,AAAS,qDAAC,AAAO,QAAC,AAAG,IAAC,AAAW,AAAC,AAAC,cAAC,AAAC;AAC5C,AAAI,iBAAC,AAAW,cAAG,AAAY;AAC/B,AAAG,sDAAC,AAAI,KAAC,EAAC,AAAM,QAAE,AAAgC,AAAC,oCAAE,AAAmD,AAAC,AAC3G;AAAC,AACD,AAAI,SAJC,AAAE,AAAC,UAIC,AAAI,KAAC,AAAW,eAAI,AAAI,AAAC,MAAC,AAAC;AAClC,AAAI,iBAAC,AAAW,cAAG,AAAI,KAAC,AAAW,AACrC;AAAC,AACD,AAAI,SAHC,AAAE,AAAC,UAGE,AAAe,QAAC,AAAU,AAAC,YAAC,AAAC;AACrC,AAAI,iBAAC,AAAW,cAAG,AAAY,AACjC;AAAC,AACD,AAAI,SAHC,AAAE,AAAC,MAGH,AAAC;AACJ,AAAI,iBAAC,AAAW,cAAI,AAAe,QAAC,AAAK,UAAK,AAAK,AAAC,AAAC,QAAC,AAAS,AAAC,AAAC,YAAC,AAAO,AAC3E;AAAC,AACH;AAAC;AAEa,AAAkB,sBAAxB,AAAK;;;;AACX,kBAAM,AAAS;AACb,AAAG,qBAAE,AAAI,MAAC,AAAG;AACb,AAAO,yBAAE,AAAI,MAAC,AAAO,AACtB;AAHiB;AAKlB,AAAoI;AACpI,kBAAM,AAAQ,WAAG,MAAM,AAAI,MAAC,AAAa,AAAiB,wBAAU,AAAI,MAAC,AAAI,KAAC,AAAK,SAAI,AAAI,MAAC,AAAI,KAAC,AAAI,IAAW,aAAE,AAAI,MAAC,AAAK,AAAC;AAC7H,AAAG,AAAC,iBAAC,MAAM,AAAO,WAAI,AAAQ,AAAC,UAAC,AAAC;AAC/B,AAAE,AAAC,oBAAC,AAAC,EAAC,AAAO,QAAC,AAAQ,aAAK,AAAI,MAAC,AAAG,OAAI,AAAO,QAAC,AAAQ,aAAK,AAAI,MAAC,AAAO,AAAC,AAAC,UAAC,AAAC;AAC1E,AAAQ,AACV;AAAC;AAED,AAAE,AAAC,oBAAC,AAAO,QAAC,AAAK,AAAC,OAAC,AAAC;AAClB,AAAM,2BAAC,AAAO,AAChB;AAAC;AAED,AAAoE;AACpE,AAAwE;AACxE,AAAoE;AACpE,AAAE,AAAC,oBAAC,AAAI,MAAC,AAAW,gBAAK,AAAO,AAAC,SAAC,AAAC;AACjC,AAAI,0BAAC,AAAgB,mCACnB,AAAM,QAAE,AAAmD,uDACxD,AAAS,aACZ,AAAY,cAAE,AAAO,QAAC,AAAU,AAAC,AAAC,aAAC,AAAa,AAAC,AAAC,gBAAC,AAAS,WAC5D,AAAc,gBAAE,AAAI,MAAC,AAAW,AACjC;AACD,AAAG,8DAAC,AAAI,KAAC,AAAI,MAAC,AAAgB,kBAAE,AAA4B,AAAC;AAC7D,AAAM,2BAAC,AAAI,AACb;AAAC;AAED,AAAoE;AACpE,AAAoE;AACpE,AAAiD;AACjD,sBAAM,AAAW,cAAG,AAAO,QAAC,AAAY,gBAAI,AAAI,AAAC,AAAC,OAAC,AAAI,AAAC,AAAC,OAAC,AAAI,KAAC,AAAK,MAAC,AAAO,QAAC,AAAY,AAAC;AAC1F,AAAE,AAAC,oBAAC,AAAW,eAAI,AAAI,QAAK,AAAI,KAAC,AAAG,AAAE,QAAG,AAAW,AAAC,AAAG,WAA7B,GAA8B,AAAC,IAAG,AAAI,OAAG,AAAI,AAAC,AAAC,MAAC,AAAC;AAC1E,AAA2F;AAC3F,AAAI,0BAAC,AAAgB,mCACnB,AAAM,QAAE,AAAkD,sDACvD,AAAS,aACZ,AAAI,MAAE,IAAI,AAAI,KAAC,AAAW,AAAC,aAAC,AAAQ,AAAE,AACvC;AACD,AAAG,8DAAC,AAAI,KAAC,AAAI,MAAC,AAAgB,kBAAE,AAA4B,AAAC;AAC7D,AAAM,2BAAC,AAAI,AACb;AAAC;AACD,AAAM,uBAAC,AAAO,AAChB;AAAC;AAED,AAAoE;AACpE,AAAE,AAAC,gBAAC,AAAI,MAAC,AAAO,QAAC,AAAO,YAAK,AAAQ,YAAI,AAAQ,AAAE,qDAAI,AAAI,AAAC,MAAC,AAAC;AAC5D,AAAG,0DAAC,AAAI,qBACN,AAAM,QAAE,AAAuB,2BAC5B,AAAS,AACX,YAAyB,AAAC;AAC7B,AAAM,uBAAC,AAAI,MAAC,AAAa,AAAE,AAC7B;AAAC;AAED,AAAI,kBAAC,AAAgB,mCACnB,AAAM,QAAE,AAAqG,yGAC1G,AAAS,AACb;AACD,AAAM,mBAAC,AAAI,AACb;;AAAC;AAEa,AAAiB,qBAAvB,AAAK,CAAmB,AAAgB,UAAE,AAAgB;;;;AAChE,AAAoC;AACpC,AAAG,sDAAC,AAAM,OAAC,EAAC,AAAI,MAAE,AAAQ,UAAE,AAAM,QAAE,AAA0B,AAAC,8BAAE,AAA0B,AAAC;AAE5F,kBAAM,AAAM,SAAG,MAAM,AAAI,OAAC,AAAa,AAAe,wBAAU,AAAI,OAAC,AAAI,KAAC,AAAK,SAAI,AAAI,OAAC,AAAI,KAAC,AAAI,iBAAa,AAAO,QAAC,AAAE,EAAS,WAAE,AAAI,OAAC,AAAK,OAAE,AAAI,AAAC;AACpJ,AAAG,AAAC,iBAAC,MAAM,AAAK,SAAI,AAAM,AAAC,QAAC,AAAC;AAC3B,AAAE,AAAC,oBAAC,AAAM,MAAC,AAAI,SAAK,AAAQ,AAAC,UAAC,AAAC;AAC7B,0BAAM,AAAI,OAAC,AAAa,AAAO,wBAAU,AAAI,OAAC,AAAI,KAAC,AAAK,SAAI,AAAI,OAAC,AAAI,KAAC,AAAI,wBAAoB,AAAM,MAAC,AAAE,EAAE,IAAE,AAAI,OAAC,AAAK,OAAE,AAAI,MAAE,AAAQ,AAAC;AACtI,AAAM,AACR;AAAC,AACH;AAAC;AAED,AAAG,sDAAC,AAAK,MAAC,EAAC,AAAI,MAAE,AAAQ,UAAE,AAAM,QAAE,AAAqB,AAAC,yBAAE,AAAwB,AAAC,AACtF;;AAAC;AAEe,AAAQ,YAAd,AAAK,CAAU,AAAgB,UAAE,AAAU,MAAE,AAAkB,YAAE,AAAkF;;;;AAC3J,kBAAM,AAAO,UAAG,MAAM,AAAI,OAAC,AAAQ,SAAC,AAAK;AACzC,AAAE,AAAC,gBAAC,AAAO,WAAI,AAAI,AAAC,MAAC,AAAC;AACpB,AAAG,0DAAC,AAAI,qBAAE,AAAI,MAAE,AAAQ,YAAK,AAAI,OAAC,AAAgB,mBAAG,AAAoB,AAAC;AAC1E,AAAM,AACR;AAAC;AAED,kBAAM,AAAS,YAAG,AAAQ,iCAAC,AAAO,QAAC,AAAU,WAAC,AAAS,UAAC,AAAC,GAAE,AAAO,QAAC,AAAU,WAAC,AAAO,QAAC,AAAG,AAAC,AAAC,QAAG,AAAQ,WAAG,AAAQ,AAAC;AAClH,gBAAI,AAAa,gBAAG,AAAC;AACrB,AAAG,AAAC,iBAAC,IAAI,AAAC,IAAG,AAAC,GAAE,AAAC,IAAG,AAAC,GAAE,AAAC,AAAE,KAAE,AAAC;AAC3B,oBAAI,AAAC;AACH,AAAM,2BAAC,MAAM,AAAY,6DAAC,AAAY;AACpC,AAAQ,kCAAE,AAAS,UAAC,AAAQ;AAC5B,AAAI,8BAAE,AAAS,UAAC,AAAI;AACpB,AAAM,gCAAE,AAAM;AACd,AAAO;AACL,AAAM,oCAAE,AAAgC;AACxC,AAAc,4CAAE,AAAI,gCAAC,AAAO,QAAC,AAAQ,AAAC,aAAI,AAA0B;AACpE,AAAgB,8CAAE,AAAU,AAC7B,AACF;AALU;AAJoD,qBAAxB,AAAuB,EAS3D,AAAI,OAAC,AAAK,AAAC,QAAE,AAAI,OAAC,AAAO,QAAC,AAAiB,mBAAE,AAAgB,AAAC,AACnE;AAAC,kBACD,AAAK,AAAC,OAAC,AAAC,AAAC,GAAC,AAAC;AACT,AAAE,AAAC,wBAAC,AAAC,AAAY,AAAS,8EAAI,AAAC,EAAC,AAAU,eAAK,AAAG,OAAI,AAAC,EAAC,AAAW,eAAI,AAAI,QAAI,AAAC,EAAC,AAAW,YAAC,AAAM,UAAI,AAAI,QAAI,AAAC,EAAC,AAAW,YAAC,AAAM,OAAC,AAAC,AAAC,GAAC,AAAI,SAAK,AAAgB,AAAC,kBAAC,AAAC;AACjK,8BAAM,AAAI,OAAC,AAAiB,kBAAC,AAAQ,UAAE,AAAO,AAAC;AAC/C,AAAQ,AACV;AAAC;AAED,AAAE,AAAC,wBAAC,AAAC,EAAC,AAAa,AAAE,kBAAG,AAAC,AAAI,MAAC,AAAC,AAAY,AAAS,AAAI,8EAAC,AAAC,EAAC,AAAI,SAAK,AAAO,WAAI,AAAC,EAAC,AAAI,SAAK,AAAY,AAAC,AAAC,AAAC,AAAC,gBAAC,AAAC;AAC1G,8BAAM,AAAC,AACT;AAAC,AACH;AAAC,AACH;AAAC,AACH;;AAAC;AAEO,AAAa;AACnB,AAAM,oBAAM,AAAa,AAAU,wBAAU,AAAI,KAAC,AAAI,KAAC,AAAK,SAAI,AAAI,KAAC,AAAI,KAAC,AAAI,IAAW,aAAE,AAAI,KAAC,AAAK;AACnG,AAAQ,sBAAE,AAAI,KAAC,AAAG;AAClB,AAAI,kBAAE,AAAI,KAAC,AAAO;AAClB,AAAK,mBAAE,AAAI,KAAC,AAAW,gBAAK,AAAO;AACnC,AAAU,wBAAE,AAAI,KAAC,AAAW,gBAAK,AAAY,AAC9C,AAAC,AACJ;AANyG,SAAhG,AAAI;AAMZ;AAED,AAAY;AACZ,AAAoC;AAC9B,AAAU,cAAhB,AAAK;;;;AACH,AAAM,mBAAC,AAAI,OAAC,AAAa,AAAU,wBAAU,AAAI,OAAC,AAAI,KAAC,AAAK,SAAI,AAAI,OAAC,AAAI,KAAC,AAAI,iBAAa,CAAC,MAAM,AAAI,OAAC,AAAQ,SAAC,AAAK,AAAE,OAAC,AAAE,EAAE,IAAE,AAAI,OAAC,AAAK,AAAC,AAC3I;;AAAC;AAED,AAAoC;AAC9B,AAAa,iBAAnB,AAAK;;;;AACH,AAAE,AAAC,gBAAC,CAAC,AAAI,OAAC,AAAQ,SAAC,AAAQ,AAAC,UAAC,AAAC;AAC5B,AAAM,AACR;AAAC;AAED,kBAAM,AAAO,UAAG,MAAM,AAAI,OAAC,AAAQ,SAAC,AAAK;AACzC,AAAG,AAAC,iBAAC,IAAI,AAAC,IAAG,AAAC,GAAE,AAAC,IAAG,AAAC,GAAE,AAAC,AAAE,KAAE,AAAC;AAC3B,oBAAI,AAAC;AACH,AAAM,2BAAC,MAAM,AAAI,OAAC,AAAa,AAAC,wBAAU,AAAI,OAAC,AAAI,KAAC,AAAK,SAAI,AAAI,OAAC,AAAI,KAAC,AAAI,iBAAa,AAAO,QAAC,AAAE,EAAE,IAAE,AAAI,OAAC,AAAK,OAAE,AAAI,MAAE,AAAQ,AAAC,AACnI;AAAC,kBACD,AAAK,AAAC,OAAC,AAAC,AAAC,GAAC,AAAC;AACT,AAAE,AAAC,wBAAC,AAAC,AAAY,AAAS,AAAC,4EAAC,AAAC;AAC3B,AAAE,AAAC,4BAAC,AAAC,EAAC,AAAU,eAAK,AAAG,AAAC,KAAC,AAAC;AACzB,AAAG,sEAAC,AAAI,KAAC,EAAC,AAAS,WAAE,AAAO,QAAC,AAAE,IAAE,AAAM,QAAE,AAAe,AAAC,mBAAE,AAAuB,AAAC;AACnF,AAAM,AACR;AAAC,AACD,AAAI,+BAAC,AAAE,AAAC,IAAC,AAAC,EAAC,AAAU,eAAK,AAAG,OAAI,AAAC,EAAC,AAAU,eAAK,AAAG,AAAC,KAAC,AAAC;AACtD,AAAQ,AACV;AAAC,AACH;AAAC;AAED,0BAAM,AAAC,AACT;AAAC,AACH;AAAC;AAED,AAAG,sDAAC,AAAI,KAAC,EAAC,AAAS,WAAE,AAAO,QAAC,AAAE,AAAC,MAAE,AAAuB,AAAC,AAC5D;;AAAC;AAEO,AAAa,kBAAI,AAAY,MAAE,AAAoB,OAAE,OAAuC,AAAI,MAAE,AAAiC;AACzI,AAAyE;AACzE,cAAM,AAAO,UAAG,AAAQ,AAAC,4CAAW,AAAI,KAAC,AAAI,KAAC,AAAI,QAAI,AAAgB,gBAAE,AAAC;AACzE,AAAM,eAAC,AAAS,gIAAc,AAAO;AACnC,AAAQ,sBAAE,AAAO,QAAC,AAAQ;AAC1B,AAAI,kBAAE,AAAO,QAAC,AAAW;AACzB,AAAI,kBAAG,AAAI,KAAC,AAAI,KAAC,AAAI,QAAI,AAAI,QAAI,AAAI,KAAC,AAAI,KAAC,AAAI,SAAK,AAAY,AAAC,AAAC,AAAC,AAAC,YAA9D,aAAwE,AAAI,KAAC,AAAU,WAAC,AAAG,AAAC,AAAC,AAAC,OAAC,AAAI,AAAC,AAAC,AAAC,WAAI,AAAI,IAAE,EAAE,AAAC,AAAC,KAAC,AAAI;AAC/H,AAAO,qBAAE,EAAC,AAAM,QAAE,AAAgC,AAAC,AACpD;AAL6D,SAAxB,AAAuB,EAK1D,AAAK,OAAE,AAAM,AAAC,OALA,AAAY,EAKV,AAAI,KAAC,AAAO,QAAC,AAAiB,mBAAE,AAAI,AAAC,AAAC,AAC3D;AAAC;AAED,AAAQ;AACN,AAAM,AAAC,iCAAkB,AAAI,KAAC,AAAI,KAAC,AAAK,mBAAc,AAAI,KAAC,AAAI,KAAC,AAAI,kBAAc,AAAI,KAAC,AAAO,OAAG,AACnG;AAAC,AACF","sourcesContent":["import { Arch, InvalidConfigurationError, isEmptyOrSpaces, isEnvTrue, isTokenCharValid, log } from \"builder-util\"\nimport { configureRequestOptions, GithubOptions, HttpError, parseJson } from \"builder-util-runtime\"\nimport { Fields } from \"builder-util/out/log\"\nimport { httpExecutor } from \"builder-util/out/nodeHttpExecutor\"\nimport { ClientRequest } from \"http\"\nimport { Lazy } from \"lazy-val\"\nimport mime from \"mime\"\nimport { parse as parseUrl } from \"url\"\nimport { getCiTag, HttpPublisher, PublishContext, PublishOptions } from \"./publisher\"\n\nexport interface Release {\n  id: number\n  tag_name: string\n\n  draft: boolean\n  prerelease: boolean\n\n  published_at: string\n\n  upload_url: string\n}\n\ninterface Asset {\n  id: number\n  name: string\n}\n\nexport class GitHubPublisher extends HttpPublisher {\n  private readonly tag: string\n  readonly _release = new Lazy(() => this.token === \"__test__\" ? Promise.resolve(null as any) : this.getOrCreateRelease())\n\n  private readonly token: string\n\n  readonly providerName = \"GitHub\"\n\n  private readonly releaseType: \"draft\" | \"prerelease\" | \"release\"\n\n  private releaseLogFields: Fields | null = null\n\n  constructor(context: PublishContext, private readonly info: GithubOptions, private readonly version: string, private readonly options: PublishOptions = {}) {\n    super(context, true)\n\n    let token = info.token\n    if (isEmptyOrSpaces(token)) {\n      token = process.env.GH_TOKEN || process.env.GITHUB_TOKEN\n      if (isEmptyOrSpaces(token)) {\n        throw new InvalidConfigurationError(`GitHub Personal Access Token is not set, neither programmatically, nor using env \"GH_TOKEN\"`)\n      }\n\n      token = token.trim()\n\n      if (!isTokenCharValid(token)) {\n        throw new InvalidConfigurationError(`GitHub Personal Access Token (${JSON.stringify(token)}) contains invalid characters, please check env \"GH_TOKEN\"`)\n      }\n    }\n\n    this.token = token!\n\n    if (version.startsWith(\"v\")) {\n      throw new InvalidConfigurationError(`Version must not starts with \"v\": ${version}`)\n    }\n\n    this.tag = info.vPrefixedTagName === false ? version : `v${version}`\n\n    if (isEnvTrue(process.env.EP_DRAFT)) {\n      this.releaseType = \"draft\"\n      log.info({reason: \"env EP_DRAFT is set to true\"}, \"GitHub provider release type is set to draft\")\n    }\n    else if (isEnvTrue(process.env.EP_PRELEASE)) {\n      this.releaseType = \"prerelease\"\n      log.info({reason: \"env EP_PRELEASE is set to true\"}, \"GitHub provider release type is set to prerelease\")\n    }\n    else if (info.releaseType != null) {\n      this.releaseType = info.releaseType\n    }\n    else if ((options as any).prerelease) {\n      this.releaseType = \"prerelease\"\n    }\n    else {\n      this.releaseType = (options as any).draft === false ? \"release\" : \"draft\"\n    }\n  }\n\n  private async getOrCreateRelease(): Promise<Release | null> {\n    const logFields = {\n      tag: this.tag,\n      version: this.version,\n    }\n\n    // we don't use \"Get a release by tag name\" because \"tag name\" means existing git tag, but we draft release and don't create git tag\n    const releases = await this.githubRequest<Array<Release>>(`/repos/${this.info.owner}/${this.info.repo}/releases`, this.token)\n    for (const release of releases) {\n      if (!(release.tag_name === this.tag || release.tag_name === this.version)) {\n        continue\n      }\n\n      if (release.draft) {\n        return release\n      }\n\n      // https://github.com/electron-userland/electron-builder/issues/1197\n      // https://electron-builder.slack.com/archives/general/p1485961449000202\n      // https://github.com/electron-userland/electron-builder/issues/2072\n      if (this.releaseType === \"draft\") {\n        this.releaseLogFields = {\n          reason: \"existing type not compatible with publishing type\",\n          ...logFields,\n          existingType: release.prerelease ? \"pre-release\" : \"release\",\n          publishingType: this.releaseType,\n        }\n        log.warn(this.releaseLogFields, \"GitHub release not created\")\n        return null\n      }\n\n      // https://github.com/electron-userland/electron-builder/issues/1133\n      // https://github.com/electron-userland/electron-builder/issues/2074\n      // if release created < 2 hours — allow to upload\n      const publishedAt = release.published_at == null ? null : Date.parse(release.published_at)\n      if (publishedAt != null && (Date.now() - publishedAt) > (2 * 3600 * 1000)) {\n        // https://github.com/electron-userland/electron-builder/issues/1183#issuecomment-275867187\n        this.releaseLogFields = {\n          reason: \"existing release published more than 2 hours ago\",\n          ...logFields,\n          date: new Date(publishedAt).toString(),\n        }\n        log.warn(this.releaseLogFields, \"GitHub release not created\")\n        return null\n      }\n      return release\n    }\n\n    // https://github.com/electron-userland/electron-builder/issues/1835\n    if (this.options.publish === \"always\" || getCiTag() != null) {\n      log.info({\n        reason: \"release doesn't exist\",\n        ...logFields,\n      }, `creating GitHub release`)\n      return this.createRelease()\n    }\n\n    this.releaseLogFields = {\n      reason: \"release doesn't exist and not created because \\\"publish\\\" is not \\\"always\\\" and build is not on tag\",\n      ...logFields,\n    }\n    return null\n  }\n\n  private async overwriteArtifact(fileName: string, release: Release) {\n    // delete old artifact and re-upload\n    log.notice({file: fileName, reason: \"already exists on GitHub\"}, \"overwrite published file\")\n\n    const assets = await this.githubRequest<Array<Asset>>(`/repos/${this.info.owner}/${this.info.repo}/releases/${release.id}/assets`, this.token, null)\n    for (const asset of assets) {\n      if (asset!.name === fileName) {\n        await this.githubRequest<void>(`/repos/${this.info.owner}/${this.info.repo}/releases/assets/${asset!.id}`, this.token, null, \"DELETE\")\n        return\n      }\n    }\n\n    log.debug({file: fileName, reason: \"not found on GitHub\"}, \"trying to upload again\")\n  }\n\n  protected async doUpload(fileName: string, arch: Arch, dataLength: number, requestProcessor: (request: ClientRequest, reject: (error: Error) => void) => void): Promise<any> {\n    const release = await this._release.value\n    if (release == null) {\n      log.warn({file: fileName, ...this.releaseLogFields}, \"skipped publishing\")\n      return\n    }\n\n    const parsedUrl = parseUrl(release.upload_url.substring(0, release.upload_url.indexOf(\"{\")) + \"?name=\" + fileName)\n    let attemptNumber = 0\n    for (let i = 0; i < 3; i++) {\n      try {\n        return await httpExecutor.doApiRequest(configureRequestOptions({\n          hostname: parsedUrl.hostname,\n          path: parsedUrl.path,\n          method: \"POST\",\n          headers: {\n            Accept: \"application/vnd.github.v3+json\",\n            \"Content-Type\": mime.getType(fileName) || \"application/octet-stream\",\n            \"Content-Length\": dataLength\n          }\n        }, this.token), this.context.cancellationToken, requestProcessor)\n      }\n      catch (e) {\n        if (e instanceof HttpError && e.statusCode === 422 && e.description != null && e.description.errors != null && e.description.errors[0].code === \"already_exists\") {\n          await this.overwriteArtifact(fileName, release)\n          continue\n        }\n\n        if (!(attemptNumber++ < 3 && (e instanceof HttpError || (e.code === \"EPIPE\" || e.code === \"ECONNRESET\")))) {\n          throw e\n        }\n      }\n    }\n  }\n\n  private createRelease() {\n    return this.githubRequest<Release>(`/repos/${this.info.owner}/${this.info.repo}/releases`, this.token, {\n      tag_name: this.tag,\n      name: this.version,\n      draft: this.releaseType === \"draft\",\n      prerelease: this.releaseType === \"prerelease\",\n    })\n  }\n\n  // test only\n  //noinspection JSUnusedGlobalSymbols\n  async getRelease(): Promise<any> {\n    return this.githubRequest<Release>(`/repos/${this.info.owner}/${this.info.repo}/releases/${(await this._release.value)!.id}`, this.token)\n  }\n\n  //noinspection JSUnusedGlobalSymbols\n  async deleteRelease(): Promise<any> {\n    if (!this._release.hasValue) {\n      return\n    }\n\n    const release = await this._release.value\n    for (let i = 0; i < 3; i++) {\n      try {\n        return await this.githubRequest(`/repos/${this.info.owner}/${this.info.repo}/releases/${release.id}`, this.token, null, \"DELETE\")\n      }\n      catch (e) {\n        if (e instanceof HttpError) {\n          if (e.statusCode === 404) {\n            log.warn({releaseId: release.id, reason: \"doesn't exist\"}, \"cannot delete release\")\n            return\n          }\n          else if (e.statusCode === 405 || e.statusCode === 502) {\n            continue\n          }\n        }\n\n        throw e\n      }\n    }\n\n    log.warn({releaseId: release.id}, \"cannot delete release\")\n  }\n\n  private githubRequest<T>(path: string, token: string | null, data: {[name: string]: any; } | null = null, method?: \"GET\" | \"DELETE\" | \"PUT\"): Promise<T> {\n    // host can contains port, but node http doesn't support host as url does\n    const baseUrl = parseUrl(`https://${this.info.host || \"api.github.com\"}`)\n    return parseJson(httpExecutor.request(configureRequestOptions({\n      hostname: baseUrl.hostname,\n      port: baseUrl.port as any,\n      path: (this.info.host != null && this.info.host !== \"github.com\") ? `/api/v3${path.startsWith(\"/\") ? path : `/${path}`}` : path,\n      headers: {Accept: \"application/vnd.github.v3+json\"}\n    }, token, method), this.context.cancellationToken, data))\n  }\n\n  toString() {\n    return `Github (owner: ${this.info.owner}, project: ${this.info.repo}, version: ${this.version})`\n  }\n}\n"]}
