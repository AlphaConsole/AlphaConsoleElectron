{"version":3,"file":"BintrayPublisher.js","sourceRoot":"","sources":["../src/BintrayPublisher.ts"],"names":[],"mappings":"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","sourcesContent":["import { Arch, InvalidConfigurationError, isEmptyOrSpaces, isTokenCharValid, log, toLinuxArchString } from \"builder-util\"\nimport { BintrayOptions, configureRequestOptions, HttpError } from \"builder-util-runtime\"\nimport { BintrayClient, Version } from \"builder-util-runtime/out/bintray\"\nimport { httpExecutor } from \"builder-util/out/nodeHttpExecutor\"\nimport { ClientRequest, RequestOptions } from \"http\"\nimport { Lazy } from \"lazy-val\"\nimport { HttpPublisher, PublishContext, PublishOptions } from \"./publisher\"\n\nexport class BintrayPublisher extends HttpPublisher {\n  private readonly _versionPromise = new Lazy(() => this.init())\n\n  private readonly client: BintrayClient\n\n  readonly providerName = \"Bintray\"\n\n  constructor(context: PublishContext, info: BintrayOptions, private readonly version: string, private readonly options: PublishOptions = {}) {\n    super(context)\n\n    let token = info.token\n    if (isEmptyOrSpaces(token)) {\n      token = process.env.BT_TOKEN\n      if (isEmptyOrSpaces(token)) {\n        throw new InvalidConfigurationError(`Bintray token is not set, neither programmatically, nor using env \"BT_TOKEN\" (see https://www.electron.build/configuration/publish#bintrayoptions)`)\n      }\n\n      token = token.trim()\n\n      if (!isTokenCharValid(token)) {\n        throw new InvalidConfigurationError(`Bintray token (${JSON.stringify(token)}) contains invalid characters, please check env \"BT_TOKEN\"`)\n      }\n    }\n\n    this.client = new BintrayClient(info, httpExecutor, this.context.cancellationToken, token)\n  }\n\n  private async init(): Promise<Version | null> {\n    try {\n      return await this.client.getVersion(this.version)\n    }\n    catch (e) {\n      if (e instanceof HttpError && e.statusCode === 404) {\n        if (this.options.publish !== \"onTagOrDraft\") {\n          log.info({version: this.version}, \"version doesn't exist, creating one\")\n          return this.client.createVersion(this.version)\n        }\n        else {\n          log.notice({reason: \"version doesn't exist\", version: this.version}, \"skipped publishing\")\n        }\n      }\n\n      throw e\n    }\n  }\n\n  protected async doUpload(fileName: string, arch: Arch, dataLength: number, requestProcessor: (request: ClientRequest, reject: (error: Error) => void) => void) {\n    const version = await this._versionPromise.value\n    if (version == null) {\n      log.notice({file: fileName, reason: \"version doesn't exist and is not created\", version: this.version}, \"skipped publishing\")\n      return\n    }\n\n    const options: RequestOptions = {\n      hostname: \"api.bintray.com\",\n      path: `/content/${this.client.owner}/${this.client.repo}/${this.client.packageName}/${encodeURI(`${version.name}/${fileName}`)}`,\n      method: \"PUT\",\n      headers: {\n        \"Content-Length\": dataLength,\n        \"X-Bintray-Override\": \"1\",\n        \"X-Bintray-Publish\": \"1\",\n        \"X-Bintray-Debian-Architecture\": toLinuxArchString(arch)\n      }\n    }\n\n    if (this.client.distribution) {\n      options.headers = options.headers || {}\n      options.headers[\"X-Bintray-Debian-Distribution\"] = this.client.distribution\n    }\n\n    if (this.client.component) {\n      options.headers = options.headers || {}\n      options.headers[\"X-Bintray-Debian-Component\"] = this.client.component\n    }\n\n    for (let attemptNumber = 0; ; attemptNumber++) {\n      try {\n        return await httpExecutor.doApiRequest(configureRequestOptions(options, this.client.auth), this.context.cancellationToken, requestProcessor)\n      }\n      catch (e) {\n        if (attemptNumber < 3 && ((e instanceof HttpError && e.statusCode === 502) || e.code === \"EPIPE\")) {\n          continue\n        }\n\n        throw e\n      }\n    }\n  }\n\n  //noinspection JSUnusedGlobalSymbols\n  async deleteRelease(): Promise<void> {\n    if (!this._versionPromise.hasValue) {\n      return\n    }\n\n    const version = (await this._versionPromise.value)\n    if (version != null) {\n      await this.client.deleteVersion(version.name)\n    }\n  }\n\n  toString() {\n    return `Bintray (user: ${this.client.user || this.client.owner}, owner: ${this.client.owner},  package: ${this.client.packageName}, repository: ${this.client.repo}, version: ${this.version})`\n  }\n}"]}
