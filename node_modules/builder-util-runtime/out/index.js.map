{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;iEAAS,AAAiB;;;;;;iEAAE,AAAiB,AAAE,AAAM,AAAqB,AAC1E,AAAO;;;;;;;;;;;;;uDAAE,AAAS;;;;;;uDAAE,AAAe;;;;;;uDAAE,AAAY;;;;;;uDAAmB,AAAe;;;;;;uDAAkB,AAAa;;;;;;uDAAE,AAAuB;;;;;;uDAAE,AAA8B;;;;;;uDAAE,AAAiB;;;;;;uDAAE,AAAS,AAAE,AAAM,AAAgB,AACjO,AAAO;;;;;;;;;;;;;2DAAsH,AAAwB;;;;;;2DAAW,AAAS,AAAsC,AAAM,AAAkB,AAEvO,AAAO;;;;;;;;;;;;;yDAAE,AAAO,AAAE,AAAM,AAAiB,AACzC,AAAO;;;;;;;;;;;;;uCAAE,AAAI,AAAE,AAAM,AAAQ,AAC7B,AAAO;;;;;;;;;;;;;iFAAE,AAAyB,AAAgB,AAAM,AAA6B,AACrF,AAAO;;;;;;;;;;;;;qCAAE,AAAQ;;;;;;qCAAE,AAAQ,AAAE,AAAM,AAAO,AAE1C,AAAM;;;;;iBAAqB,AAAkC;AAC3D,AAAE,AAAC,QAAC,AAAC,KAAI,AAAI,AAAC,MAAC,AAAC;AACd,AAAM,eAAC,AAAE,AACX;AAAC,AACD,AAAI,eAAK,AAAK,MAAC,AAAO,QAAC,AAAC,AAAC,AAAC,IAAC,AAAC;AAC1B,AAAM,eAAC,AAAC,AACV;AAAC,AACD,AAAI,KAHC,AAAE,AAAC,MAGH,AAAC;AACJ,AAAM,eAAC,CAAC,AAAC,AAAC,AACZ;AAAC,AACH;AAAC,AAED,AAAM;kBAAmB,AAAe,SAAE,AAAY;AACpD,UAAM,AAAK,QAAG,IAAI,AAAK,MAAC,AAAO,AAAC,AAAC;AAChC,AAAa,UAAC,AAAI,OAAG,AAAI;AAC1B,AAAM,WAAC,AAAK,AACd;AAAC","sourcesContent":["export { CancellationToken, CancellationError } from \"./CancellationToken\"\nexport { HttpError, createHttpError, HttpExecutor, DownloadOptions, DigestTransform, RequestHeaders, safeGetHeader, configureRequestOptions, configureRequestOptionsFromUrl, safeStringifyJson, parseJson } from \"./httpExecutor\"\nexport { BintrayOptions, GenericServerOptions, GithubOptions, PublishConfiguration, S3Options, SpacesOptions, BaseS3Options, getS3LikeProviderBaseUrl, Publish, githubUrl, PublishProvider, AllPublishOptions } from \"./publishOptions\"\nexport { UpdateInfo, UpdateFileInfo, WindowsUpdateInfo, BlockMapDataHolder, PackageFileInfo, ReleaseNoteInfo } from \"./updateInfo\"\nexport { parseDn } from \"./rfc2253Parser\"\nexport { UUID } from \"./uuid\"\nexport { ProgressCallbackTransform, ProgressInfo } from \"./ProgressCallbackTransform\"\nexport { parseXml, XElement } from \"./xml\"\n\nexport function asArray<T>(v: null | undefined | T | Array<T>): Array<T> {\n  if (v == null) {\n    return []\n  }\n  else if (Array.isArray(v)) {\n    return v\n  }\n  else {\n    return [v]\n  }\n}\n\nexport function newError(message: string, code: string) {\n  const error = new Error(message);\n  (error as any).code = code\n  return error\n}"]}
