{"version":3,"file":"blockMapApi.js","sourceRoot":"","sources":["../src/blockMapApi.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;oEAoBO,AAAK,WAAmC,AAAY;AACzD,cAAM,AAAE,KAAG,MAAM,AAAI,0CAAC,AAAI,MAAE,AAAG,AAAC;AAChC,YAAI,AAAC;AACH,kBAAM,AAAQ,WAAG,CAAC,MAAM,AAAK,2CAAC,AAAE,AAAC,AAAC,KAAC,AAAI;AACvC,kBAAM,AAAU,aAAG,AAAM,OAAC,AAAW,YAAC,AAAC,AAAC;AACxC,kBAAM,AAAI,0CAAC,AAAE,IAAE,AAAU,YAAE,AAAC,GAAE,AAAU,WAAC,AAAM,QAAE,AAAQ,WAAG,AAAU,WAAC,AAAM,AAAC;AAE9E,kBAAM,AAAU,aAAG,AAAM,OAAC,AAAW,YAAC,AAAU,WAAC,AAAY,aAAC,AAAC,AAAC,AAAC;AACjE,kBAAM,AAAI,0CAAC,AAAE,IAAE,AAAU,YAAE,AAAC,GAAE,AAAU,WAAC,AAAM,QAAE,AAAQ,WAAG,AAAU,WAAC,AAAM,SAAG,AAAU,WAAC,AAAM,AAAC;AAClG,kBAAM,AAAK,2CAAC,AAAE,AAAC;AAEf,kBAAM,AAAU,aAAQ,AAAe,gDAAC,AAAS,UAAC,AAAO,QAAC,AAAM,AAAC,QAAC,AAAU,AAAC;AAC7E,AAAM,mBAAC,CAAC,MAAM,AAAU,WAAC,AAAU,AAAC,AAAC,aAAC,AAAQ,AAAE,AAClD;AAAC,UACD,AAAK,AAAC,OAAC,AAAC,AAAC,GAAC,AAAC;AACT,kBAAM,AAAK,2CAAC,AAAE,AAAC;AACf,kBAAM,AAAC,AACT;AAAC,AACH;AAAC;;;;;;;;;;;AArCD,AAAO,AAAE,AAAK,AAAE,AAAK,AAAE,AAAI,AAAE,AAAI,AAAE,AAAM,AAAY,AAErD,AAAM;;;;;;AAAC,MAAM,AAAmB,oDAAG,AAAoB,AAiBvD,AAAM","sourcesContent":["import BluebirdPromise from \"bluebird-lst\"\nimport { close, fstat, open, read } from \"fs-extra-p\"\n\nexport const BLOCK_MAP_FILE_NAME = \"_blockMap.blockmap\"\n\nexport interface FileChunks {\n  checksums: Array<string>\n  sizes: Array<number>\n}\n\nexport interface BlockMap {\n  version: \"1\" | \"2\"\n  files: Array<BlockMapFile>\n}\n\nexport interface BlockMapFile extends FileChunks {\n  name: string\n  offset: number\n}\n\nexport async function readEmbeddedBlockMapData(file: string) {\n  const fd = await open(file, \"r\")\n  try {\n    const fileSize = (await fstat(fd)).size\n    const sizeBuffer = Buffer.allocUnsafe(4)\n    await read(fd, sizeBuffer, 0, sizeBuffer.length, fileSize - sizeBuffer.length)\n\n    const dataBuffer = Buffer.allocUnsafe(sizeBuffer.readUInt32BE(0))\n    await read(fd, dataBuffer, 0, dataBuffer.length, fileSize - sizeBuffer.length - dataBuffer.length)\n    await close(fd)\n\n    const inflateRaw: any = BluebirdPromise.promisify(require(\"zlib\").inflateRaw)\n    return (await inflateRaw(dataBuffer)).toString()\n  }\n  catch (e) {\n    await close(fd)\n    throw e\n  }\n}"]}
