{"version":3,"file":"hash.js","sourceRoot":"","sources":["../src/hash.ts"],"names":[],"mappings":";;;;;;;;;AAAA,AAAO,AAAE,AAAU,AAAE,AAAM,AAAQ;;;;;;AACnC,AAAO,AAAE,AAAgB,AAAE,AAAM,AAAI,AAErC,AAAM;;;;kBAAmB,AAAY,MAAE,YAAoB,AAAQ,UAAE,WAA6B,AAAQ,UAAE,AAAa;AACvH,AAAM,eAAK,AAAO,QAAS,CAAC,AAAO,SAAE,AAAM,AAAE,AAAE;AAC7C,cAAM,AAAI,OAAG,AAAU,4CAAC,AAAS,AAAC;AAClC,AAAI,aACD,AAAE,GAAC,AAAO,SAAE,AAAM,AAAC,QACnB,AAAW,YAAC,AAAQ,AAAC;AAExB,AAAgB,kDAAC,AAAI,wBAAM,AAAO,WAAE,AAAa,eAAE,AAAI,OAAG,AAAI,KAAC,AAA+C,AAAE,oDAC7G,AAAE,GAAC,AAAO,SAAE,AAAM,AAAC,QACnB,AAAE,GAAC,AAAK,OAAE,AAAG,AAAE;AACd,AAAI,iBAAC,AAAG,AAAE;AACV,AAAO,oBAAC,AAAI,KAAC,AAAI,AAAY,AAAC,AAChC;AAAC,AAAC,WACD,AAAI,KAAC,AAAI,MAAE,EAAC,AAAG,KAAE,AAAK,AAAC,AAAC,AAC7B;AAAC,AAAC,AACJ,KAdS;AAcR","sourcesContent":["import { createHash } from \"crypto\"\nimport { createReadStream } from \"fs\"\n\nexport function hashFile(file: string, algorithm: string = \"sha512\", encoding: \"base64\" | \"hex\" = \"base64\", options?: any) {\n  return new Promise<string>((resolve, reject) => {\n    const hash = createHash(algorithm)\n    hash\n      .on(\"error\", reject)\n      .setEncoding(encoding)\n\n    createReadStream(file, {...options, highWaterMark: 1024 * 1024 /* better to use more memory but hash faster */})\n      .on(\"error\", reject)\n      .on(\"end\", () => {\n        hash.end()\n        resolve(hash.read() as string)\n      })\n      .pipe(hash, {end: false})\n  })\n}"]}
