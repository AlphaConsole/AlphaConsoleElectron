"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.httpExecutor = exports.NodeHttpExecutor = undefined;

var _builderUtilRuntime;

function _load_builderUtilRuntime() {
    return _builderUtilRuntime = require("builder-util-runtime");
}

var _binDownload;

function _load_binDownload() {
    return _binDownload = require("./binDownload");
}

var _http;

function _load_http() {
    return _http = require("http");
}

var _https;

function _load_https() {
    return _https = _interopRequireWildcard(require("https"));
}

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

class NodeHttpExecutor extends (_builderUtilRuntime || _load_builderUtilRuntime()).HttpExecutor {
    // used only in tests of electron-updater
    download(url, destination, options) {
        return (0, (_binDownload || _load_binDownload()).download)(url, destination, options == null ? null : options.sha512).then(() => destination);
    }
    // noinspection JSMethodCanBeStatic
    // noinspection JSUnusedGlobalSymbols
    doRequest(options, callback) {
        return (options.protocol === "http:" ? (_http || _load_http()).request : (_https || _load_https()).request)(options, callback);
    }
}
exports.NodeHttpExecutor = NodeHttpExecutor;
const httpExecutor = exports.httpExecutor = new NodeHttpExecutor();
//# sourceMappingURL=nodeHttpExecutor.js.map