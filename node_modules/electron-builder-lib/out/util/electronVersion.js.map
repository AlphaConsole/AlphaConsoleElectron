{"version":3,"file":"electronVersion.js","sourceRoot":"","sources":["../../src/util/electronVersion.ts"],"names":[],"mappings":"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","sourcesContent":["import { log } from \"builder-util\"\nimport { httpExecutor } from \"builder-util/out/nodeHttpExecutor\"\nimport { readJson } from \"fs-extra-p\"\nimport { Lazy } from \"lazy-val\"\nimport * as path from \"path\"\nimport { orNullIfFileNotExist } from \"read-config-file\"\nimport { Configuration } from \"../configuration\"\nimport { getConfig } from \"./config\"\nimport { versionFromDependencyRange } from \"./packageMetadata\"\n\nexport type MetadataValue = Lazy<{ [key: string]: any } | null>\n\nexport async function getElectronVersion(projectDir: string, config?: Configuration, projectMetadata: MetadataValue = new Lazy(() => orNullIfFileNotExist(readJson(path.join(projectDir, \"package.json\"))))): Promise<string> {\n  if (config == null) {\n    config = await getConfig(projectDir, null, null)\n  }\n  if (config.electronVersion != null) {\n    return config.electronVersion\n  }\n  return await computeElectronVersion(projectDir, projectMetadata)\n}\n\nexport async function getElectronVersionFromInstalled(projectDir: string) {\n  for (const name of [\"electron\", \"electron-prebuilt\", \"electron-prebuilt-compile\"]) {\n    try {\n      return (await readJson(path.join(projectDir, \"node_modules\", name, \"package.json\"))).version\n    }\n    catch (e) {\n      if (e.code !== \"ENOENT\") {\n        log.warn({name, error: e}, `cannot read electron version package.json`)\n      }\n    }\n  }\n  return null\n}\n\n/** @internal */\nexport async function computeElectronVersion(projectDir: string, projectMetadata: MetadataValue): Promise<string> {\n  const result = await getElectronVersionFromInstalled(projectDir)\n  if (result != null) {\n    return result\n  }\n\n  const electronPrebuiltDep = findFromElectronPrebuilt(await projectMetadata!!.value)\n  if (electronPrebuiltDep == null || electronPrebuiltDep === \"latest\") {\n    try {\n      const releaseInfo = JSON.parse((await httpExecutor.request({\n        hostname: \"github.com\",\n        path: \"/electron/electron/releases/latest\",\n        headers: {\n          Accept: \"application/json\",\n        },\n      }))!!)\n      return (releaseInfo.tag_name.startsWith(\"v\")) ? releaseInfo.tag_name.substring(1) : releaseInfo.tag_name\n    }\n    catch (e) {\n      log.warn(e)\n    }\n\n    throw new Error(`Cannot find electron dependency to get electron version in the '${path.join(projectDir, \"package.json\")}'`)\n  }\n\n  return versionFromDependencyRange(electronPrebuiltDep)\n}\n\nfunction findFromElectronPrebuilt(packageData: any): any {\n  for (const name of [\"electron\", \"electron-prebuilt\", \"electron-prebuilt-compile\"]) {\n    const devDependencies = packageData.devDependencies\n    let dep = devDependencies == null ? null : devDependencies[name]\n    if (dep == null) {\n      const dependencies = packageData.dependencies\n      dep = dependencies == null ? null : dependencies[name]\n    }\n    if (dep != null) {\n      return dep\n    }\n  }\n  return null\n}"]}
