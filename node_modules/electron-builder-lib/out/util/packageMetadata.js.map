{"version":3,"file":"packageMetadata.js","sourceRoot":"","sources":["../../src/util/packageMetadata.ts"],"names":[],"mappings":"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","sourcesContent":["import { isEmptyOrSpaces, log } from \"builder-util\"\nimport { readFile, readJson } from \"fs-extra-p\"\nimport * as path from \"path\"\nimport * as semver from \"semver\"\nimport { Metadata } from \"..\"\n\nconst normalizeData = require(\"normalize-package-data\")\n\n/** @internal */\nexport async function readPackageJson(file: string): Promise<any> {\n  const data = await readJson(file)\n  await authors(file, data)\n  normalizeData(data)\n  return data\n}\n\nasync function authors(file: string, data: any) {\n  if (data.contributors != null) {\n    return\n  }\n\n  let authorData\n  try {\n    authorData = await readFile(path.resolve(path.dirname(file), \"AUTHORS\"), \"utf8\")\n  }\n  catch (ignored) {\n    return\n  }\n\n  data.contributors = authorData\n    .split(/\\r?\\n/g)\n    .map(it => it.replace(/^\\s*#.*$/, \"\").trim())\n}\n\n/** @internal */\nexport function checkMetadata(metadata: Metadata, devMetadata: any | null, appPackageFile: string, devAppPackageFile: string): void {\n  const errors: Array<string> = []\n  const reportError = (missedFieldName: string) => {\n    errors.push(`Please specify '${missedFieldName}' in the package.json (${appPackageFile})`)\n  }\n\n  const checkNotEmpty = (name: string, value: string | null | undefined) => {\n    if (isEmptyOrSpaces(value)) {\n      reportError(name)\n    }\n  }\n\n  if ((metadata as any).directories != null) {\n    errors.push(`\"directories\" in the root is deprecated, please specify in the \"build\"`)\n  }\n\n  checkNotEmpty(\"name\", metadata.name)\n\n  if (isEmptyOrSpaces(metadata.description)) {\n    log.warn({appPackageFile}, `description is missed in the package.json`)\n  }\n  if (metadata.author == null) {\n    log.warn({appPackageFile}, `author is missed in the package.json`)\n  }\n  checkNotEmpty(\"version\", metadata.version)\n\n  if (metadata != null) {\n    checkDependencies(metadata.dependencies, errors)\n  }\n  if (metadata !== devMetadata) {\n    if (metadata.build != null) {\n      errors.push(`'build' in the application package.json (${appPackageFile}) is not supported since 3.0 anymore. Please move 'build' into the development package.json (${devAppPackageFile})`)\n    }\n  }\n\n  const devDependencies = (metadata as any).devDependencies\n  if (devDependencies != null && \"electron-rebuild\" in devDependencies) {\n    log.info('electron-rebuild not required if you use electron-builder, please consider to remove excess dependency from devDependencies\\n\\nTo ensure your native dependencies are always matched electron version, simply add script `\"postinstall\": \"electron-builder install-app-deps\" to your `package.json`')\n  }\n\n  if (errors.length > 0) {\n    throw new Error(errors.join(\"\\n\"))\n  }\n}\n\nexport function versionFromDependencyRange(version: string) {\n  const firstChar = version[0]\n  return firstChar === \"^\" || firstChar === \"~\" ? version.substring(1) : version\n}\n\nfunction checkDependencies(dependencies: { [key: string]: string } | null | undefined, errors: Array<string>) {\n  if (dependencies == null) {\n    return\n  }\n\n  const updaterVersion = dependencies[\"electron-updater\"]\n  if (updaterVersion != null && !semver.satisfies(versionFromDependencyRange(updaterVersion), \">=2.18.2\")) {\n    errors.push(`At least electron-updater 2.18.2 is required by current electron-builder version. Please set electron-updater version to \"^2.18.2\"`)\n  }\n\n  const deps = [\"electron\", \"electron-prebuilt\", \"electron-rebuild\"]\n  if (process.env.ALLOW_ELECTRON_BUILDER_AS_PRODUCTION_DEPENDENCY !== \"true\") {\n    deps.push(\"electron-builder\")\n  }\n  for (const name of deps) {\n    if (name in dependencies) {\n      errors.push(`Package \"${name}\" is only allowed in \"devDependencies\". `\n        + `Please remove it from the \"dependencies\" section in your package.json.`)\n    }\n  }\n}"]}
