{"version":3,"file":"JsonStreamParser.js","sourceRoot":"","sources":["../../src/util/JsonStreamParser.ts"],"names":[],"mappings":";;;;;AAAA,IAAK,AAEJ;AAFD,WAAK,AAAS;AACZ,yCAAM;AAAE,uCAAI,AACd;AAAC,GAFI,AAAS,cAAT,AAAS,YAEb,AAED,AAAM;;AAKJ,gBAA6B,AAAiC;AAAjC,aAAY,eAAZ,AAAY,AAAqB;AAJtD,aAAK,QAAG,AAAS,UAAC,AAAM;AACxB,aAAM,SAAG,AAAE;AACX,aAAsB,yBAAG,AAAC,AAGlC;AAAC;AAED,AAA4E;AAC5E,AAAa,kBAAC,AAAa;AACzB,YAAI,AAAM,SAAG,AAAC;AACd,eAAO,AAAM,SAAG,AAAK,MAAC,AAAM,QAAE,AAAC;AAC7B,AAAE,AAAC,gBAAC,AAAI,KAAC,AAAK,UAAK,AAAS,UAAC,AAAM,AAAC,QAAC,AAAC;AACpC,AAAE,AAAC,oBAAC,AAAK,MAAC,AAAM,WAAK,AAAC,KAAI,AAAK,MAAC,AAAC,AAAC,OAAK,AAAG,AAAC,KAAC,AAAC;AAC3C,AAAO;AACP,AAAM,AACR;AAAC;AAED,AAAG,AAAC,qBAAC,IAAI,AAAC,IAAG,AAAM,QAAE,AAAC,IAAG,AAAK,MAAC,AAAM,QAAE,AAAC,AAAE,KAAE,AAAC;AAC3C,AAAE,AAAC,wBAAC,AAAK,MAAC,AAAC,AAAC,OAAK,AAAG,AAAC,KAAC,AAAC;AACrB,AAAI,6BAAC,AAAM,UAAI,AAAK,MAAC,AAAS,UAAC,AAAC,GAAE,AAAC,AAAC;AACpC,AAAI,6BAAC,AAAsB,yBAAG,AAAQ,SAAC,AAAI,KAAC,AAAM,OAAC,AAAI,AAAE,QAAE,AAAE,AAAC;AAC9D,AAAI,6BAAC,AAAM,SAAG,AAAE;AAChB,AAAM,iCAAG,AAAC;AACV,AAAI,6BAAC,AAAK,QAAG,AAAS,UAAC,AAAI;AAC3B,AAAK,AACP;AAAC,AACH;AAAC,AACH;AAAC;AAED,kBAAM,AAAG,MAAG,AAAM,SAAG,AAAI,KAAC,AAAsB;AAChD,AAAI,iBAAC,AAAM,UAAI,AAAK,MAAC,AAAS,UAAC,AAAM,QAAE,AAAI,KAAC,AAAG,IAAC,AAAK,MAAC,AAAM,QAAE,AAAG,AAAC,AAAC;AACnE,AAAI,iBAAC,AAAsB,0BAAI,AAAK,MAAC,AAAM,SAAG,AAAM;AACpD,AAAE,AAAC,gBAAC,AAAI,KAAC,AAAsB,yBAAG,AAAC,AAAC,GAAC,AAAC;AACpC,AAAM,AACR;AAAC;AAED,AAAM,qBAAG,AAAG;AACZ,AAAI,iBAAC,AAAsB,yBAAG,AAAC;AAC/B,AAAI,iBAAC,AAAK,QAAG,AAAS,UAAC,AAAM;AAC7B,kBAAM,AAAI,OAAG,AAAI,KAAC,AAAK,MAAC,AAAI,KAAC,AAAM,AAAC;AACpC,AAAI,iBAAC,AAAM,SAAG,AAAE;AAEhB,AAAI,iBAAC,AAAY,aAAC,AAAI,AAAC,AACzB;AAAC,AACH;AAAC,AACF","sourcesContent":["enum ReadState {\n  HEADER, BODY\n}\n\nexport class JsonStreamParser {\n  private state = ReadState.HEADER\n  private buffer = \"\"\n  private remainingMessageLength = 0\n\n  constructor(private readonly eventHandler: (data: any) => void) {\n  }\n\n  // https://github.com/EventSource/eventsource/blob/master/lib/eventsource.js\n  parseIncoming(chunk: string) {\n    let offset = 0\n    while (offset < chunk.length) {\n      if (this.state === ReadState.HEADER) {\n        if (chunk.length === 1 && chunk[0] === \" \") {\n          // ping\n          return\n        }\n\n        for (let i = offset; i < chunk.length; i++) {\n          if (chunk[i] === \"{\") {\n            this.buffer += chunk.substring(0, i)\n            this.remainingMessageLength = parseInt(this.buffer.trim(), 10)\n            this.buffer = \"\"\n            offset = i\n            this.state = ReadState.BODY\n            break\n          }\n        }\n      }\n\n      const end = offset + this.remainingMessageLength\n      this.buffer += chunk.substring(offset, Math.min(chunk.length, end))\n      this.remainingMessageLength -= chunk.length - offset\n      if (this.remainingMessageLength > 0) {\n        return\n      }\n\n      offset = end\n      this.remainingMessageLength = 0\n      this.state = ReadState.HEADER\n      const data = JSON.parse(this.buffer)\n      this.buffer = \"\"\n\n      this.eventHandler(data)\n    }\n  }\n}"]}
