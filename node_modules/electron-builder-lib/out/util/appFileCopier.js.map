{"version":3,"file":"appFileCopier.js","sourceRoot":"","sources":["../../src/util/appFileCopier.ts"],"names":[],"mappings":"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","sourcesContent":["import BluebirdPromise from \"bluebird-lst\"\nimport { AsyncTaskManager } from \"builder-util\"\nimport { CONCURRENCY, FileCopier, Link, MAX_FILE_REQUESTS } from \"builder-util/out/fs\"\nimport { ensureDir, readlink, symlink } from \"fs-extra-p\"\nimport * as path from \"path\"\nimport { copyFileOrData } from \"../asar/asarUtil\"\nimport { Packager } from \"../packager\"\nimport { ensureEndSlash, NODE_MODULES_PATTERN, ResolvedFileSet } from \"./AppFileCopierHelper\"\n\nexport function getDestinationPath(file: string, fileSet: ResolvedFileSet) {\n  if (file === fileSet.src) {\n    return fileSet.destination\n  }\n  else {\n    const src = ensureEndSlash(fileSet.src)\n    const dest = ensureEndSlash(fileSet.destination)\n    if (file.startsWith(src)) {\n      return dest + file.substring(src.length)\n    }\n    else {\n      // hoisted node_modules\n      const index = file.lastIndexOf(NODE_MODULES_PATTERN)\n      if (index < 0) {\n        throw new Error(`File \"${file}\" not under the source directory \"${fileSet.src}\"`)\n      }\n      return dest + file.substring(index + 1 /* leading slash */)\n    }\n  }\n}\n\nexport async function copyAppFiles(fileSet: ResolvedFileSet, packager: Packager) {\n  const metadata = fileSet.metadata\n  const transformedFiles = fileSet.transformedFiles\n  // search auto unpacked dir\n  const taskManager = new AsyncTaskManager(packager.cancellationToken)\n  const createdParentDirs = new Set<string>()\n\n  const fileCopier = new FileCopier()\n  const links: Array<Link> = []\n  for (let i = 0, n = fileSet.files.length; i < n; i++) {\n    const sourceFile = fileSet.files[i]\n    const stat = metadata.get(sourceFile)\n    if (stat == null) {\n      // dir\n      continue\n    }\n\n    const destinationFile = getDestinationPath(sourceFile, fileSet)\n    if (stat.isFile()) {\n      const fileParent = path.dirname(destinationFile)\n      if (!createdParentDirs.has(fileParent)) {\n        createdParentDirs.add(fileParent)\n        await ensureDir(fileParent)\n      }\n\n      taskManager.addTask(copyFileOrData(fileCopier, transformedFiles == null ? null : transformedFiles.get(i), sourceFile, destinationFile, stat))\n      if (taskManager.tasks.length > MAX_FILE_REQUESTS) {\n        await taskManager.awaitTasks()\n      }\n    }\n    else if (stat.isSymbolicLink()) {\n      links.push({file: destinationFile, link: await readlink(sourceFile)})\n    }\n  }\n\n  if (taskManager.tasks.length > MAX_FILE_REQUESTS) {\n    await taskManager.awaitTasks()\n  }\n  if (links.length > 0) {\n    BluebirdPromise.map(links, it => symlink(it.link, it.file), CONCURRENCY)\n  }\n}"]}
