{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;oEAgCO,AAAK,WAAgB,AAAyC,SAAE,WAAqB,AAAI,AAAQ,6CAAC,AAAO,AAAC;AAC/G,AAAwF;AACxF,cAAM,AAAa,gBAAG,IAAI,AAAG,AAAU;AACvC,AAAQ,iBAAC,AAAe,gBAAC,AAAK,AAAC,AAAE;AAC/B,AAAE,AAAC,gBAAC,AAAK,MAAC,AAAI,QAAI,AAAI,AAAC,MAAC,AAAC;AACvB,AAAa,8BAAC,AAAG,IAAC,AAAK,MAAC,AAAI,AAAC,AAC/B;AAAC,AACH;AAAC,AAAC;AAEF,cAAM,AAAc,iBAAG,AAAI,AAAc,+DAAC,AAAQ,UAAE,AAAO,AAAC;AAC5D,cAAM,AAAa,gBAAG,AAAG,AAAE;AACzB,AAAG,sDAAC,AAAI,KAAC,AAAqB,AAAC;AAC/B,AAAQ,qBAAC,AAAiB,kBAAC,AAAM,AAAE;AACnC,AAAc,2BAAC,AAAW,AAAE,AAC9B;AAAC;AACD,AAAO,gBAAC,AAAI,KAAC,AAAQ,UAAE,AAAa,AAAC;AAErC,AAAM,eAAC,iEAA8B,AAAK,AAAE,QAAC,AAAI;AAAC,AAAG,AAAE,mBAAC,AAAK,MAAC,AAAI,KAAC,AAAa,AAAC,AAAC;SAAtD,AAAQ,GAAgD,AAAa,AAAC,AAAE;AAClG,gBAAI,AAAqB;AACzB,AAAE,AAAC,gBAAC,AAAa,AAAC,eAAC,AAAC;AAClB,AAAc,+BAAC,AAAW,AAAE;AAC5B,AAAO,0BAAG,AAAO,QAAC,AAAO,QAAC,AAAI,AAAC,AACjC;AAAC,AACD,AAAI,mBAAC,AAAC;AACJ,AAAO,0BAAG,AAAc,eAAC,AAAU,AAAE,AACvC;AAAC;AAED,AAAM,2BACH,AAAI;AAAC,AAAG,AAAE,uBAAC,AAAO,QAAC,AAAc,eAAC,AAAQ,UAAE,AAAa,AAAC,AAAC,AAChE;aAFS,AAAO;AAEf,AAAC,AACJ,SAbe,AAAc;AAa5B;;;;;;;;;;;AA3DD,AAAO,AAAE,AAAQ,AAAE,AAAM,AAAY;;;;;;;+CAI5B,AAAQ,AAAe,AAAM,AAAY,AAElD,AAAO;;;;;;;;;;;;;uCAAuB,AAAQ;;;;;;uCAAE,AAAM;;;;;;uCAAE,AAAU;;;;;;uCAAqF,AAAc,AAAoB,AAAM,AAAQ,AAC/L,AAAO;;;;;;AARP,AAAO,AAAE,AAAG,AAAE,AAAM,AAAc;;;;;;;qDAQzB,AAAa;;;;;;qDAAE,AAAI;;;;;;qDAAE,AAAc,AAAE,AAAM,AAAc,AAalE,AAAO;;;;;;;;;;;;;6CAAE,AAAO,AAAE,AAAM,AAAW,AAGnC,AAAO;;;;;;;;;;;;;mEAAE,AAAiB,AAAgB,AAAM,AAAsB,AAEtE,AAAO;;;;;;AAvBP,AAAO,AAAE,AAAc,AAAE,AAAM,AAA0B,AAEzD,AAAO;;;;;;;2DAqBE,AAAc,AAAE,AAAM,AAA0B,AACzD,AAAO;;;;;;;;;;;;;+DAAE,AAAgB,AAAE,AAAM,AAAoB,AACrD,AAAO;;;;;;;;;;;;;mDAAE,AAAU,AAAgB,AAAM,AAAe,AAExD,AAAM;;;;;;AAhCN,AAAO,AAAE,AAAc,AAAE,AAAM,AAA0B","sourcesContent":["import { executeFinally } from \"builder-util/out/promise\"\nimport { PublishOptions } from \"electron-publish/out/publisher\"\nimport { log } from \"builder-util\"\nimport { Packager } from \"./packager\"\nimport { PackagerOptions } from \"./packagerApi\"\nimport { PublishManager } from \"./publish/PublishManager\"\n\nexport { Packager, BuildResult } from \"./packager\"\nexport { PackagerOptions, ArtifactCreated } from \"./packagerApi\"\nexport { TargetConfiguration, Platform, Target, DIR_TARGET, BeforeBuildContext, SourceRepositoryInfo, TargetSpecificOptions, TargetConfigType, DEFAULT_TARGET, CompressionLevel } from \"./core\"\nexport { getArchSuffix, Arch, archFromString } from \"builder-util\"\nexport { Configuration, AfterPackContext, MetadataDirectories, Protocol, ReleaseInfo, ElectronDownloadOptions } from \"./configuration\"\nexport { PlatformSpecificBuildOptions, AsarOptions, FileSet } from \"./options/PlatformSpecificBuildOptions\"\nexport { FileAssociation } from \"./options/FileAssociation\"\nexport { MacConfiguration, DmgOptions, MasConfiguration, MacOsTargetName, PkgOptions, DmgContent, DmgWindow } from \"./options/macOptions\"\nexport { WindowsConfiguration } from \"./options/winOptions\"\nexport { AppXOptions } from \"./options/AppXOptions\"\nexport { MsiOptions } from \"./options/MsiOptions\"\nexport { CommonWindowsInstallerConfiguration } from \"./options/CommonWindowsInstallerConfiguration\"\nexport { NsisOptions, NsisWebOptions, PortableOptions, CommonNsisOptions } from \"./targets/nsis/nsisOptions\"\nexport { LinuxConfiguration, DebOptions, CommonLinuxOptions, LinuxTargetSpecificOptions, AppImageOptions } from \"./options/linuxOptions\"\nexport { SnapOptions } from \"./options/SnapOptions\"\nexport { Metadata, AuthorMetadata, RepositoryInfo } from \"./options/metadata\"\nexport { AppInfo } from \"./appInfo\"\nexport { SquirrelWindowsOptions } from \"./options/SquirrelWindowsOptions\"\nexport { WindowsSignOptions, CustomWindowsSignTaskConfiguration, WindowsSignTaskConfiguration, CustomWindowsSign, FileCodeSigningInfo, CertificateFromStoreInfo } from \"./windowsCodeSign\"\nexport { CancellationToken, ProgressInfo } from \"builder-util-runtime\"\nexport { PublishOptions, UploadTask } from \"electron-publish\"\nexport { PublishManager } from \"./publish/PublishManager\"\nexport { PlatformPackager } from \"./platformPackager\"\nexport { buildForge, ForgeOptions } from \"./forge-maker\"\n\nexport async function build(options: PackagerOptions & PublishOptions, packager: Packager = new Packager(options)): Promise<Array<string>> {\n  // because artifact event maybe dispatched several times for different publish providers\n  const artifactPaths = new Set<string>()\n  packager.artifactCreated(event => {\n    if (event.file != null) {\n      artifactPaths.add(event.file)\n    }\n  })\n\n  const publishManager = new PublishManager(packager, options)\n  const sigIntHandler = () => {\n    log.warn(\"cancelled by SIGINT\")\n    packager.cancellationToken.cancel()\n    publishManager.cancelTasks()\n  }\n  process.once(\"SIGINT\", sigIntHandler)\n\n  return await executeFinally(packager.build().then(() => Array.from(artifactPaths)), errorOccurred => {\n    let promise: Promise<any>\n    if (errorOccurred) {\n      publishManager.cancelTasks()\n      promise = Promise.resolve(null)\n    }\n    else {\n      promise = publishManager.awaitTasks()\n    }\n\n    return promise\n      .then(() => process.removeListener(\"SIGINT\", sigIntHandler))\n  })\n}"]}
