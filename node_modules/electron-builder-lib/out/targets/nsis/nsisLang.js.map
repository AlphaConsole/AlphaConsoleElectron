{"version":3,"file":"nsisLang.js","sourceRoot":"","sources":["../../../src/targets/nsis/nsisLang.ts"],"names":[],"mappings":"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","sourcesContent":["import { asArray } from \"builder-util\"\nimport { bundledLanguages, langIdToName, lcid, toLangWithRegion } from \"builder-util/out/langs\"\nimport _debug from \"debug\"\nimport { outputFile, readFile } from \"fs-extra-p\"\nimport { safeLoad } from \"js-yaml\"\nimport * as path from \"path\"\nimport { PlatformPackager } from \"../../platformPackager\"\nimport { NsisOptions } from \"./nsisOptions\"\nimport { NsisScriptGenerator } from \"./nsisScriptGenerator\"\nimport { nsisTemplatesDir } from \"./nsisUtil\"\n\nconst debug = _debug(\"electron-builder:nsis\")\n\nexport class LangConfigurator {\n  readonly isMultiLang: boolean\n  readonly langs: Array<string>\n\n  constructor(options: NsisOptions) {\n    const rawList = options.installerLanguages\n\n    if (options.unicode === false || rawList === null || (Array.isArray(rawList) && rawList.length === 0)) {\n      this.isMultiLang = false\n    }\n    else {\n      this.isMultiLang = options.multiLanguageInstaller !== false\n    }\n\n    if (this.isMultiLang) {\n      this.langs = rawList == null ? bundledLanguages.slice() : asArray(rawList)\n        .map(it => toLangWithRegion(it.replace(\"-\", \"_\")))\n    }\n    else {\n      this.langs = [\"en_US\"]\n    }\n  }\n}\n\nexport function createAddLangsMacro(scriptGenerator: NsisScriptGenerator, langConfigurator: LangConfigurator) {\n  const result: Array<string> = []\n  for (const langWithRegion of langConfigurator.langs) {\n    let name: string\n    if (langWithRegion === \"zh_CN\") {\n      name = \"SimpChinese\"\n    }\n    else if (langWithRegion === \"zh_TW\") {\n      name = \"TradChinese\"\n    }\n    else if (langWithRegion === \"nb_NO\") {\n      name = \"Norwegian\"\n    }\n    else if (langWithRegion === \"pt_BR\") {\n      name = \"PortugueseBR\"\n    }\n    else {\n      const lang = langWithRegion.substring(0, langWithRegion.indexOf(\"_\"))\n      name = (langIdToName as any)[lang]\n      if (name == null) {\n        throw new Error(`Language name is unknown for ${lang}`)\n      }\n\n      if (name === \"Spanish\") {\n        name = \"SpanishInternational\"\n      }\n    }\n    result.push(`!insertmacro MUI_LANGUAGE \"${name}\"`)\n  }\n\n  scriptGenerator.macro(\"addLangs\", result)\n}\n\nasync function writeCustomLangFile(data: string, packager: PlatformPackager<any>) {\n  const file = await packager.getTempFile(\"messages.nsh\")\n  await outputFile(file, data)\n  return file\n}\n\nexport async function addCustomMessageFileInclude(input: string, packager: PlatformPackager<any>, scriptGenerator: NsisScriptGenerator, langConfigurator: LangConfigurator) {\n  const data = safeLoad(await readFile(path.join(nsisTemplatesDir, input), \"utf-8\"))\n  const instructions = computeCustomMessageTranslations(data, langConfigurator).join(\"\\n\")\n  debug(instructions)\n  scriptGenerator.include(await writeCustomLangFile(instructions, packager))\n}\n\nfunction computeCustomMessageTranslations(messages: any, langConfigurator: LangConfigurator): Array<string> {\n  const result: Array<string> = []\n  const includedLangs = new Set(langConfigurator.langs)\n  for (const messageId of Object.keys(messages)) {\n    const langToTranslations = messages[messageId]\n    const unspecifiedLangs = new Set(langConfigurator.langs)\n    for (const lang of Object.keys(langToTranslations)) {\n      const langWithRegion = toLangWithRegion(lang)\n\n      if (!includedLangs.has(langWithRegion)) {\n        continue\n      }\n\n      result.push(`LangString ${messageId} ${lcid[langWithRegion]} \"${langToTranslations[lang].replace(/\\n/g, \"$\\\\r$\\\\n\")}\"`)\n      unspecifiedLangs.delete(langWithRegion)\n    }\n\n    if (langConfigurator.isMultiLang) {\n      const defaultTranslation = langToTranslations.en.replace(/\\n/g, \"$\\\\r$\\\\n\")\n      for (const langWithRegion of unspecifiedLangs) {\n        result.push(`LangString ${messageId} ${lcid[langWithRegion]} \"${defaultTranslation}\"`)\n      }\n    }\n  }\n  return result\n}"]}
