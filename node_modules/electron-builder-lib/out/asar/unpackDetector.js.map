{"version":3,"file":"unpackDetector.js","sourceRoot":"","sources":["../../src/asar/unpackDetector.ts"],"names":[],"mappings":"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","sourcesContent":["import BluebirdPromise from \"bluebird-lst\"\nimport { log } from \"builder-util\"\nimport { CONCURRENCY } from \"builder-util/out/fs\"\nimport { ensureDir } from \"fs-extra-p\"\nimport * as path from \"path\"\nimport { getDestinationPath } from \"../util/appFileCopier\"\nimport { NODE_MODULES_PATTERN, ResolvedFileSet } from \"../util/AppFileCopierHelper\"\n\nconst isBinaryFile: any = BluebirdPromise.promisify(require(\"isbinaryfile\"))\n\nfunction addValue(map: Map<string, Array<string>>, key: string, value: string) {\n  let list = map.get(key)\n  if (list == null) {\n    list = [value]\n    map.set(key, list)\n  }\n  else {\n    list.push(value)\n  }\n}\n\n/** @internal */\nexport async function detectUnpackedDirs(fileSet: ResolvedFileSet, autoUnpackDirs: Set<string>, unpackedDest: string, rootForAppFilesWithoutAsar: string) {\n  const dirToCreate = new Map<string, Array<string>>()\n  const metadata = fileSet.metadata\n\n  function addParents(child: string, root: string) {\n    child = path.dirname(child)\n    if (autoUnpackDirs.has(child)) {\n      return\n    }\n\n    do {\n      autoUnpackDirs.add(child)\n      const p = path.dirname(child)\n      // create parent dir to be able to copy file later without directory existence check\n      addValue(dirToCreate, p, path.basename(child))\n\n      if (child === root || p === root || autoUnpackDirs.has(p)) {\n        break\n      }\n      child = p\n    }\n    while (true)\n\n    autoUnpackDirs.add(root)\n  }\n\n  for (let i = 0, n = fileSet.files.length; i < n; i++) {\n    const file = fileSet.files[i]\n    const index = file.lastIndexOf(NODE_MODULES_PATTERN)\n    if (index < 0) {\n      continue\n    }\n\n    let nextSlashIndex = file.indexOf(path.sep, index + NODE_MODULES_PATTERN.length + 1)\n    if (nextSlashIndex < 0) {\n      continue\n    }\n\n    if (file[index + NODE_MODULES_PATTERN.length] === \"@\") {\n      nextSlashIndex = file.indexOf(path.sep, nextSlashIndex + 1)\n    }\n\n    if (!metadata.get(file)!.isFile()) {\n      continue\n    }\n\n    const packageDir = file.substring(0, nextSlashIndex)\n    const packageDirPathInArchive = path.relative(rootForAppFilesWithoutAsar, getDestinationPath(packageDir, fileSet))\n    const pathInArchive = path.relative(rootForAppFilesWithoutAsar, getDestinationPath(file, fileSet))\n    if (autoUnpackDirs.has(packageDirPathInArchive)) {\n      // if package dir is unpacked, any file also unpacked\n      addParents(pathInArchive, packageDirPathInArchive)\n      continue\n    }\n\n    let shouldUnpack = false\n    if (file.endsWith(\".dll\") || file.endsWith(\".exe\")) {\n      shouldUnpack = true\n    }\n    else if (!file.includes(\".\", nextSlashIndex) && path.extname(file) === \"\") {\n      shouldUnpack = await isBinaryFile(file)\n    }\n\n    if (!shouldUnpack) {\n      continue\n    }\n\n    if (log.isDebugEnabled) {\n      log.debug({file: pathInArchive, reason: \"contains executable code\"}, \"not packed into asar archive\")\n    }\n\n    addParents(pathInArchive, packageDirPathInArchive)\n  }\n\n  if (dirToCreate.size > 0) {\n    await ensureDir(unpackedDest + path.sep + \"node_modules\")\n    // child directories should be not created asynchronously - parent directories should be created first\n    await BluebirdPromise.map(dirToCreate.keys(), async parentDir => {\n      const base = unpackedDest + path.sep + parentDir\n      await ensureDir(base)\n      await BluebirdPromise.each(dirToCreate.get(parentDir)!, (it): any => {\n        if (dirToCreate.has(parentDir + path.sep + it)) {\n          // already created\n          return null\n        }\n        else {\n          return ensureDir(base + path.sep + it)\n        }\n      })\n    }, CONCURRENCY)\n  }\n}"]}
