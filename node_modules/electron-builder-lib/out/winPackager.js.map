{"version":3,"file":"winPackager.js","sourceRoot":"","sources":["../src/winPackager.ts"],"names":[],"mappings":"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","sourcesContent":["import { Arch, asArray, exec, execWine, InvalidConfigurationError, log, use } from \"builder-util\"\nimport { parseDn } from \"builder-util-runtime\"\nimport { createHash } from \"crypto\"\nimport _debug from \"debug\"\nimport { rename } from \"fs-extra-p\"\nimport isCI from \"is-ci\"\nimport { Lazy } from \"lazy-val\"\nimport * as path from \"path\"\nimport { downloadCertificate } from \"./codeSign\"\nimport { AfterPackContext } from \"./configuration\"\nimport { DIR_TARGET, Platform, Target } from \"./core\"\nimport { RequestedExecutionLevel, WindowsConfiguration } from \"./options/winOptions\"\nimport { Packager } from \"./packager\"\nimport { chooseNotNull, PlatformPackager } from \"./platformPackager\"\nimport AppXTarget from \"./targets/AppxTarget\"\nimport { NsisTarget } from \"./targets/nsis/NsisTarget\"\nimport { AppPackageHelper, CopyElevateHelper } from \"./targets/nsis/nsisUtil\"\nimport { WebInstallerTarget } from \"./targets/nsis/WebInstallerTarget\"\nimport { createCommonTarget } from \"./targets/targetFactory\"\nimport { BuildCacheManager, digest } from \"./util/cacheManager\"\nimport { isBuildCacheEnabled } from \"./util/flags\"\nimport { time } from \"./util/timer\"\nimport { getWindowsVm, VmManager } from \"./vm/vm\"\nimport { CertificateFromStoreInfo, FileCodeSigningInfo, getCertificateFromStoreInfo, getSignVendorPath, sign, WindowsSignOptions } from \"./windowsCodeSign\"\n\nexport class WinPackager extends PlatformPackager<WindowsConfiguration> {\n  readonly cscInfo = new Lazy<FileCodeSigningInfo | CertificateFromStoreInfo | null>(() => {\n    const platformSpecificBuildOptions = this.platformSpecificBuildOptions\n    if (platformSpecificBuildOptions.certificateSubjectName != null || platformSpecificBuildOptions.certificateSha1 != null) {\n      if (platformSpecificBuildOptions.sign != null) {\n        return Promise.resolve(null)\n      }\n      return this.vm.value.then(vm => getCertificateFromStoreInfo(platformSpecificBuildOptions, vm))\n    }\n\n    const certificateFile = platformSpecificBuildOptions.certificateFile\n    if (certificateFile != null) {\n      const certificatePassword = this.getCscPassword()\n      return Promise.resolve({\n        file: certificateFile,\n        password: certificatePassword == null ? null : certificatePassword.trim(),\n      })\n    }\n\n    const cscLink = this.getCscLink(\"WIN_CSC_LINK\")\n    if (cscLink == null) {\n      return Promise.resolve(null)\n    }\n\n    return downloadCertificate(cscLink, this.info.tempDirManager, this.projectDir)\n      .then(path => {\n        return {\n          file: path!!,\n          password: this.getCscPassword(),\n        }\n      })\n  })\n\n  private _iconPath = new Lazy(() => this.getOrConvertIcon(\"ico\"))\n\n  readonly vm = new Lazy<VmManager>(() => process.platform === \"win32\" ? Promise.resolve(new VmManager()) : getWindowsVm(this.debugLogger))\n\n  readonly computedPublisherSubjectOnWindowsOnly = new Lazy<string | null>(async () => {\n    const cscInfo = await this.cscInfo.value\n    if (cscInfo == null) {\n      return null\n    }\n\n    if (\"subject\" in cscInfo) {\n      return (cscInfo as CertificateFromStoreInfo).subject\n    }\n\n    const vm = await this.vm.value\n    const info = cscInfo as FileCodeSigningInfo\n    const certFile = vm.toVmFile(info.file)\n    // https://github.com/electron-userland/electron-builder/issues/1735\n    const args = info.password ? [`(Get-PfxData \"${certFile}\" -Password (ConvertTo-SecureString -String \"${info.password}\" -Force -AsPlainText)).EndEntityCertificates.Subject`] : [`(Get-PfxCertificate \"${certFile}\").Subject`]\n    return await vm.exec(\"powershell.exe\", [\"-NoProfile\", \"-NonInteractive\", \"-Command\"].concat(args), {timeout: 30 * 1000}).then(it => it.trim())\n  })\n\n  readonly computedPublisherName = new Lazy<Array<string> | null>(async () => {\n    let publisherName = (this.platformSpecificBuildOptions as WindowsConfiguration).publisherName\n    if (publisherName === null) {\n      return null\n    }\n\n    const cscInfo = await this.cscInfo.value\n    if (cscInfo == null) {\n      return null\n    }\n\n    if (\"subject\" in cscInfo) {\n      return asArray(parseDn((cscInfo as CertificateFromStoreInfo).subject).get(\"CN\"))\n    }\n\n    const cscFile = (cscInfo as FileCodeSigningInfo).file\n    if (publisherName == null && cscFile != null) {\n      if (process.platform === \"win32\") {\n        try {\n          const subject = await this.computedPublisherSubjectOnWindowsOnly.value\n          const commonName = subject == null ? null : parseDn(subject).get(\"CN\")\n          if (commonName) {\n            return asArray(commonName)\n          }\n        }\n        catch (e) {\n          log.warn({error: e.message}, \"cannot get publisher name using powershell\")\n        }\n      }\n\n      try {\n        publisherName = await extractCommonNameUsingOpenssl((cscInfo as FileCodeSigningInfo).password || \"\", cscFile)\n      }\n      catch (e) {\n        throw new Error(`Cannot extract publisher name from code signing certificate, please file issue. As workaround, set win.publisherName: ${e.stack || e}`)\n      }\n    }\n\n    return publisherName == null ? null : asArray(publisherName)\n  })\n\n  get isForceCodeSigningVerification(): boolean {\n    return this.platformSpecificBuildOptions.verifyUpdateCodeSignature !== false\n  }\n\n  constructor(info: Packager) {\n    super(info, Platform.WINDOWS)\n  }\n\n  get defaultTarget(): Array<string> {\n    return [\"nsis\"]\n  }\n\n  protected doGetCscPassword(): string | undefined | null {\n    return chooseNotNull(chooseNotNull(this.platformSpecificBuildOptions.certificatePassword, process.env.WIN_CSC_KEY_PASSWORD), super.doGetCscPassword())\n  }\n\n  createTargets(targets: Array<string>, mapper: (name: string, factory: (outDir: string) => Target) => void): void {\n    let copyElevateHelper: CopyElevateHelper | null\n    const getCopyElevateHelper = () => {\n      if (copyElevateHelper == null) {\n        copyElevateHelper = new CopyElevateHelper()\n      }\n      return copyElevateHelper\n    }\n\n    let helper: AppPackageHelper | null\n    const getHelper = () => {\n      if (helper == null) {\n        helper = new AppPackageHelper(getCopyElevateHelper())\n      }\n      return helper\n    }\n\n    for (const name of targets) {\n      if (name === DIR_TARGET) {\n        continue\n      }\n\n      if (name === \"nsis\" || name === \"portable\") {\n        mapper(name, outDir => new NsisTarget(this, outDir, name, getHelper()))\n      }\n      else if (name === \"nsis-web\") {\n        // package file format differs from nsis target\n        mapper(name, outDir => new WebInstallerTarget(this, path.join(outDir, name), name, new AppPackageHelper(getCopyElevateHelper())))\n      }\n      else {\n        const targetClass: typeof NsisTarget | typeof AppXTarget | null = (() => {\n          switch (name) {\n            case \"squirrel\":\n              try {\n                return require(\"electron-builder-squirrel-windows\").default\n              }\n              catch (e) {\n                throw new InvalidConfigurationError(`Module electron-builder-squirrel-windows must be installed in addition to build Squirrel.Windows: ${e.stack || e}`)\n              }\n\n            case \"appx\":\n              return require(\"./targets/AppxTarget\").default\n\n            case \"msi\":\n              return require(\"./targets/MsiTarget\").default\n\n            default:\n              return null\n          }\n        })()\n\n        mapper(name, outDir => targetClass === null ? createCommonTarget(name, outDir, this) : new (targetClass as any)(this, outDir, name))\n      }\n    }\n  }\n\n  getIconPath() {\n    return this._iconPath.value\n  }\n\n  async sign(file: string, logMessagePrefix?: string) {\n    const signOptions: WindowsSignOptions = {\n      path: file,\n      name: this.appInfo.productName,\n      site: await this.appInfo.computePackageUrl(),\n      options: this.platformSpecificBuildOptions,\n    }\n\n    const cscInfo = await this.cscInfo.value\n    if (cscInfo == null) {\n      if (this.platformSpecificBuildOptions.sign != null) {\n        await sign(signOptions, this)\n      }\n      else if (this.forceCodeSigning) {\n        throw new InvalidConfigurationError(`App is not signed and \"forceCodeSigning\" is set to true, please ensure that code signing configuration is correct, please see https://electron.build/code-signing`)\n      }\n      return\n    }\n\n    if (logMessagePrefix == null) {\n      logMessagePrefix = \"signing\"\n    }\n\n    if (\"file\" in cscInfo) {\n      log.info({\n        file: log.filePath(file),\n        certificateFile: (cscInfo as FileCodeSigningInfo).file,\n      }, logMessagePrefix)\n    }\n    else {\n      const info = cscInfo as CertificateFromStoreInfo\n      log.info({\n        file: log.filePath(file),\n        subject: info.subject,\n        thumbprint: info.thumbprint,\n        store: info.store,\n        user: info.isLocalMachineStore ? \"local machine\" : \"current user\",\n      }, logMessagePrefix)\n    }\n\n    await this.doSign({\n      ...signOptions,\n      cscInfo,\n      options: {\n        ...this.platformSpecificBuildOptions,\n      },\n    })\n  }\n\n  private async doSign(options: WindowsSignOptions) {\n    for (let i = 0; i < 3; i++) {\n      try {\n        await sign(options, this)\n        break\n      }\n      catch (e) {\n        // https://github.com/electron-userland/electron-builder/issues/1414\n        const message = e.message\n        if (message != null && message.includes(\"Couldn't resolve host name\")) {\n          log.warn({error: message, attempt: i + 1}, `cannot sign`)\n          continue\n        }\n        throw e\n      }\n    }\n  }\n\n  async signAndEditResources(file: string, arch: Arch, outDir: string, internalName?: string | null, requestedExecutionLevel?: RequestedExecutionLevel | null) {\n    const appInfo = this.appInfo\n\n    const files: Array<string> = []\n\n    const args = [\n      file,\n      \"--set-version-string\", \"FileDescription\", appInfo.productName,\n      \"--set-version-string\", \"ProductName\", appInfo.productName,\n      \"--set-version-string\", \"LegalCopyright\", appInfo.copyright,\n      \"--set-file-version\", appInfo.buildVersion,\n      \"--set-product-version\", appInfo.versionInWeirdWindowsForm,\n    ]\n\n    if (internalName != null) {\n      args.push(\n        \"--set-version-string\", \"InternalName\", internalName,\n        \"--set-version-string\", \"OriginalFilename\", \"\",\n      )\n    }\n\n    if (requestedExecutionLevel != null && requestedExecutionLevel !== \"asInvoker\") {\n      args.push(\"--set-requested-execution-level\", requestedExecutionLevel)\n    }\n\n    use(appInfo.companyName, it => args.push(\"--set-version-string\", \"CompanyName\", it!))\n    use(this.platformSpecificBuildOptions.legalTrademarks, it => args.push(\"--set-version-string\", \"LegalTrademarks\", it!))\n    const iconPath = await this.getIconPath()\n    use(iconPath, it => {\n      files.push(it)\n      args.push(\"--set-icon\", it)\n    })\n\n    const config = this.config\n    const cscInfoForCacheDigest = !isBuildCacheEnabled() || isCI || config.electronDist != null ? null : await this.cscInfo.value\n    let buildCacheManager: BuildCacheManager | null = null\n    // resources editing doesn't change executable for the same input and executed quickly - no need to complicate\n    if (cscInfoForCacheDigest != null) {\n      const cscFile = (cscInfoForCacheDigest as FileCodeSigningInfo).file\n      if (cscFile != null) {\n        files.push(cscFile)\n      }\n\n      const timer = time(\"executable cache\")\n      const hash = createHash(\"sha512\")\n      hash.update(config.electronVersion || \"no electronVersion\")\n      hash.update(config.muonVersion || \"no muonVersion\")\n      hash.update(JSON.stringify(this.platformSpecificBuildOptions))\n      hash.update(JSON.stringify(args))\n      hash.update(this.platformSpecificBuildOptions.certificateSha1 || \"no certificateSha1\")\n      hash.update(this.platformSpecificBuildOptions.certificateSubjectName || \"no subjectName\")\n\n      buildCacheManager = new BuildCacheManager(outDir, file, arch)\n      if (await buildCacheManager.copyIfValid(await digest(hash, files))) {\n        timer.end()\n        return\n      }\n      timer.end()\n    }\n\n    const timer = time(\"wine&sign\")\n    await execWine(path.join(await getSignVendorPath(), \"rcedit.exe\"), args)\n    await this.sign(file)\n    timer.end()\n\n    if (buildCacheManager != null) {\n      await buildCacheManager.save()\n    }\n  }\n\n  protected async postInitApp(packContext: AfterPackContext) {\n    const executable = path.join(packContext.appOutDir, `${this.appInfo.productFilename}.exe`)\n    await rename(path.join(packContext.appOutDir, `${this.electronDistExecutableName}.exe`), executable)\n  }\n\n  protected async signApp(packContext: AfterPackContext): Promise<any> {\n    const exeFileName = `${this.appInfo.productFilename}.exe`\n    if (this.platformSpecificBuildOptions.signAndEditExecutable !== false) {\n      await this.signAndEditResources(path.join(packContext.appOutDir, exeFileName), packContext.arch, packContext.outDir, path.basename(exeFileName, \".exe\"), this.platformSpecificBuildOptions.requestedExecutionLevel)\n    }\n  }\n}\n\nconst debugOpenssl = _debug(\"electron-builder:openssl\")\nasync function extractCommonNameUsingOpenssl(password: string, certPath: string): Promise<string> {\n  const result = await exec(\"openssl\", [\"pkcs12\", \"-nokeys\", \"-nodes\", \"-passin\", `pass:${password}`, \"-nomacver\", \"-clcerts\", \"-in\", certPath], {timeout: 30 * 1000}, debugOpenssl.enabled)\n  const match = result.match(/^subject.*\\/CN=([^\\/\\n]+)/m)\n  if (match == null || match[1] == null) {\n    throw new Error(`Cannot extract common name from p12: ${result}`)\n  }\n  else {\n    return match[1]\n  }\n}"]}
